{
	"name": "ageData",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "ageData"
				}
			],
			"transformations": [
				{
					"name": "RenameColumns"
				},
				{
					"name": "AddDerivedColumns"
				},
				{
					"name": "FilterValidData"
				},
				{
					"name": "AggregateGenderData"
				},
				{
					"name": "AggregateAllModels"
				},
				{
					"name": "PrepareAllModelsData"
				},
				{
					"name": "UnionModelData"
				},
				{
					"name": "CalculateAverageAges"
				},
				{
					"name": "MapMarketCodes"
				},
				{
					"name": "SelectFinalColumns"
				},
				{
					"name": "CollectAllData"
				},
				{
					"name": "FlattenOutput"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ResponseId as string,",
				"          EndDate as string,",
				"          ED_MODEL_CODE as string,",
				"          ED_MODEL_YEAR as string,",
				"          {1711-1712} as integer,",
				"          Q4601 as string,",
				"          Q4531 as string,",
				"          Q4609 as string,",
				"          Q5386 as string,",
				"          Q2002 as string,",
				"          Q2012 as string,",
				"          {1701} as integer,",
				"          {1721} as string,",
				"          {1731-1732} as string,",
				"          V1021 as string,",
				"          {1950} as string,",
				"          {670} as string,",
				"          {671g_1_1_1} as string,",
				"          {671g_1_1_3} as string,",
				"          {671g_1_1_5} as string,",
				"          {711} as string,",
				"          {713g_1_1} as string,",
				"          {713g_1_3} as string,",
				"          {713g_1_5} as string,",
				"          {1961g_1_1_1} as string,",
				"          {1961g_1_1_3} as string,",
				"          {1961g_1_1_5} as string,",
				"          {3931g_3931} as string,",
				"          {3931g_3932} as string,",
				"          {3931g_3933} as string,",
				"          {3931g_3934} as string,",
				"          {3931g_3935} as string,",
				"          {3931g_3936} as string,",
				"          {3931g_3937} as string,",
				"          {3931g_3938} as string,",
				"          {3931g_3939} as string,",
				"          {3931g_3940} as string,",
				"          {3931g_3941} as string,",
				"          {1961g_2_1_1} as string,",
				"          {1961g_3_1_1} as string,",
				"          ED_AUTH_GROUP as string,",
				"          {3881g_38813883} as string,",
				"          {2674-2675} as string,",
				"          {1909-1910} as string,",
				"          Market as string,",
				"          Description as string,",
				"          Type as string,",
				"          Model_Row as string,",
				"          Derivate as string,",
				"          NBOSegment as string,",
				"          Drive as string,",
				"          Body as string,",
				"          PerformanceLevel as string,",
				"          TypeSOP as string,",
				"          TypeEOP as string,",
				"          Top as string,",
				"          Classic as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 select(mapColumn(",
				"          ResponseId,",
				"          EndDate,",
				"          ED_MODEL_CODE,",
				"          ED_MODEL_YEAR,",
				"          Q1711_1712 = {1711-1712},",
				"          Q4601,",
				"          Q4531,",
				"          Q4609,",
				"          Q5386,",
				"          Q2002,",
				"          Q2012,",
				"          Q1701 = {1701},",
				"          Q1721 = {1721},",
				"          {1731-1732},",
				"          V1021,",
				"          {1950},",
				"          {670},",
				"          {671g_1_1_1},",
				"          {671g_1_1_3},",
				"          {671g_1_1_5},",
				"          {711},",
				"          {713g_1_1},",
				"          {713g_1_3},",
				"          {713g_1_5},",
				"          {1961g_1_1_1},",
				"          {1961g_1_1_3},",
				"          {1961g_1_1_5},",
				"          {3931g_3931},",
				"          {3931g_3932},",
				"          {3931g_3933},",
				"          {3931g_3934},",
				"          {3931g_3935},",
				"          {3931g_3936},",
				"          {3931g_3937},",
				"          {3931g_3938},",
				"          {3931g_3939},",
				"          {3931g_3940},",
				"          {3931g_3941},",
				"          {1961g_2_1_1},",
				"          {1961g_3_1_1},",
				"          ED_AUTH_GROUP,",
				"          {3881g_38813883},",
				"          {2674-2675},",
				"          {1909-1910},",
				"          Market,",
				"          Description,",
				"          Type,",
				"          Model_Row,",
				"          Derivate,",
				"          NBOSegment,",
				"          Drive,",
				"          Body,",
				"          PerformanceLevel,",
				"          TypeSOP,",
				"          TypeEOP,",
				"          Top,",
				"          Classic",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameColumns",
				"RenameColumns derive(ModelGroup = iif(isNull(Derivate) || Derivate == '' || Derivate == Model_Row, ",
				"             Model_Row + ' Basic', ",
				"             iif(startsWith(Derivate, Model_Row), ",
				"                Derivate, ",
				"                Model_Row + ' ' + Derivate)),",
				"          Year = toString(year(toDate(EndDate, 'yyyy-MM-dd')))) ~> AddDerivedColumns",
				"AddDerivedColumns filter(!isNull(Market) &&",
				"Market != '' &&",
				"!isNull(Year) &&",
				"Year != '' &&",
				"!isNull(ModelGroup) &&",
				"ModelGroup != '' &&",
				"!isNull(Q1701) &&",
				"!isNull(Q1711_1712)) ~> FilterValidData",
				"FilterValidData aggregate(groupBy(Market,",
				"          Year,",
				"          ModelGroup),",
				"     totalCount = count(),",
				"          maleCount = sum(iif(Q1701 == 1, 1, 0)),",
				"          femaleCount = sum(iif(Q1701 == 2, 1, 0)),",
				"          totalAgeSum = sum(Q1711_1712),",
				"          maleAgeSum = sum(iif(Q1701 == 1, Q1711_1712, 0)),",
				"          femaleAgeSum = sum(iif(Q1701 == 2, Q1711_1712, 0))) ~> AggregateGenderData",
				"FilterValidData aggregate(groupBy(Market,",
				"          Year),",
				"     allModelsTotalCount = count(),",
				"          allModelsMaleCount = sum(iif(Q1701 == 1, 1, 0)),",
				"          allModelsFemaleCount = sum(iif(Q1701 == 2, 1, 0)),",
				"          allModelsTotalAgeSum = sum(Q1711_1712),",
				"          allModelsMaleAgeSum = sum(iif(Q1701 == 1, Q1711_1712, 0)),",
				"          allModelsFemaleAgeSum = sum(iif(Q1701 == 2, Q1711_1712, 0))) ~> AggregateAllModels",
				"AggregateAllModels derive(ModelGroup = 'All Models',",
				"          totalCount = allModelsTotalCount,",
				"          maleCount = allModelsMaleCount,",
				"          femaleCount = allModelsFemaleCount,",
				"          totalAgeSum = allModelsTotalAgeSum,",
				"          maleAgeSum = allModelsMaleAgeSum,",
				"          femaleAgeSum = allModelsFemaleAgeSum) ~> PrepareAllModelsData",
				"AggregateGenderData, PrepareAllModelsData union(byName: true)~> UnionModelData",
				"UnionModelData derive(avgAge = round(toDouble(totalAgeSum) / toDouble(totalCount + 1), 0),",
				"          maleAvgAge = round(toDouble(maleAgeSum) / toDouble(maleCount + 1), 0),",
				"          femaleAvgAge = round(toDouble(femaleAgeSum) / toDouble(femaleCount + 1), 0)) ~> CalculateAverageAges",
				"CalculateAverageAges derive(MappedMarket = case(",
				"  Market == 'PGCN', 'CN',",
				"  Market == 'PCGB', 'UK',",
				"  Market == 'PCNA', 'US',",
				"  Market == 'PD', 'DE',",
				"  Market",
				")) ~> MapMarketCodes",
				"MapMarketCodes select(mapColumn(",
				"          market = MappedMarket,",
				"          year = Year,",
				"          model = ModelGroup,",
				"          average = avgAge,",
				"          male = maleAvgAge,",
				"          female = femaleAvgAge",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectFinalColumns",
				"SelectFinalColumns aggregate(groupBy(dummy = 1),",
				"     data = collect(@(market, year, model, average, male, female))) ~> CollectAllData",
				"CollectAllData select(mapColumn(",
				"          data",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlattenOutput",
				"FlattenOutput sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'json',",
				"     fileSystem: 'output',",
				"     partitionFileNames:['newCarBuyersAgeChart.json'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> ageData"
			]
		}
	}
}