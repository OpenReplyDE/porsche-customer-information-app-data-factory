{
	"name": "vehiclesPerHouseholdData",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Full_data",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "RenameColumns"
				},
				{
					"name": "AddDerivedColumns"
				},
				{
					"name": "FilterValidData"
				},
				{
					"name": "AggregateData"
				},
				{
					"name": "CalculatePercentages"
				},
				{
					"name": "AggregateBaseModelData"
				},
				{
					"name": "PrepareBaseModelData"
				},
				{
					"name": "UnionModelData"
				},
				{
					"name": "SelectFinalColumns"
				},
				{
					"name": "CollectIntoArray"
				},
				{
					"name": "SelectArrayColumn"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ResponseId as string,",
				"          EndDate as string,",
				"          ED_MODEL_CODE as string,",
				"          ED_MODEL_YEAR as string,",
				"          {1711-1712} as integer,",
				"          Q4601 as string,",
				"          Q4531 as string,",
				"          Q4609 as string,",
				"          Q5386 as string,",
				"          Q2002 as integer,",
				"          Q2012 as string,",
				"          {1701} as integer,",
				"          {1721} as string,",
				"          {1731-1732} as string,",
				"          V1021 as string,",
				"          {1950} as integer,",
				"          {670} as string,",
				"          {671g_1_1_1} as string,",
				"          {671g_1_1_3} as string,",
				"          {671g_1_1_5} as string,",
				"          {711} as string,",
				"          {713g_1_1} as string,",
				"          {713g_1_3} as string,",
				"          {713g_1_5} as string,",
				"          {1961g_1_1_1} as string,",
				"          {1961g_1_1_3} as string,",
				"          {1961g_1_1_5} as string,",
				"          {3931g_3931} as string,",
				"          {3931g_3932} as string,",
				"          {3931g_3933} as string,",
				"          {3931g_3934} as string,",
				"          {3931g_3935} as string,",
				"          {3931g_3936} as string,",
				"          {3931g_3937} as string,",
				"          {3931g_3938} as string,",
				"          {3931g_3939} as string,",
				"          {3931g_3940} as string,",
				"          {3931g_3941} as string,",
				"          {1961g_2_1_1} as string,",
				"          {1961g_3_1_1} as string,",
				"          ED_AUTH_GROUP as string,",
				"          {3881g_38813883} as string,",
				"          {2674-2675} as string,",
				"          {1909-1910} as string,",
				"          Market as string,",
				"          Description as string,",
				"          Type as string,",
				"          Model_Row as string,",
				"          Derivate as string,",
				"          NBOSegment as string,",
				"          Drive as string,",
				"          Body as string,",
				"          PerformanceLevel as string,",
				"          TypeSOP as string,",
				"          TypeEOP as string,",
				"          Top as string,",
				"          Classic as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 select(mapColumn(",
				"          ResponseId,",
				"          EndDate,",
				"          ED_MODEL_CODE,",
				"          ED_MODEL_YEAR,",
				"          Q1711_1712 = {1711-1712},",
				"          Q4601,",
				"          Q4531,",
				"          Q4609,",
				"          Q5386,",
				"          Q2002,",
				"          Q2012,",
				"          Q1701 = {1701},",
				"          Q1721 = {1721},",
				"          {1731-1732},",
				"          V1021,",
				"          Q1950 = {1950},",
				"          {670},",
				"          {671g_1_1_1},",
				"          {671g_1_1_3},",
				"          {671g_1_1_5},",
				"          {711},",
				"          {713g_1_1},",
				"          {713g_1_3},",
				"          {713g_1_5},",
				"          {1961g_1_1_1},",
				"          {1961g_1_1_3},",
				"          {1961g_1_1_5},",
				"          {3931g_3931},",
				"          {3931g_3932},",
				"          {3931g_3933},",
				"          {3931g_3934},",
				"          {3931g_3935},",
				"          {3931g_3936},",
				"          {3931g_3937},",
				"          {3931g_3938},",
				"          {3931g_3939},",
				"          {3931g_3940},",
				"          {3931g_3941},",
				"          {1961g_2_1_1},",
				"          {1961g_3_1_1},",
				"          ED_AUTH_GROUP,",
				"          {3881g_38813883},",
				"          {2674-2675},",
				"          {1909-1910},",
				"          Market,",
				"          Description,",
				"          Type,",
				"          Model_Row,",
				"          Derivate,",
				"          NBOSegment,",
				"          Drive,",
				"          Body,",
				"          PerformanceLevel,",
				"          TypeSOP,",
				"          TypeEOP,",
				"          Top,",
				"          Classic",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameColumns",
				"RenameColumns derive(Market = case(",
				"          Market == 'PGCN', 'CN',",
				"          Market == 'PCGB', 'UK',",
				"          Market == 'PCNA', 'US',",
				"          Market == 'PD', 'DE',",
				"          Market",
				"     ),",
				"          ModelGroup = iif(isNull(Derivate) || Derivate == '' || Derivate == Model_Row, ",
				"                 Model_Row + ' Basic', ",
				"                 iif(startsWith(Derivate, Model_Row), ",
				"                    Derivate, ",
				"                    Model_Row + ' ' + Derivate)),",
				"          Year = left(EndDate, 4),",
				"          Gender = iif(Q1701 == 1, 'male', 'female'),",
				"          VehicleCount = case(",
				"       Q1950 == 1, 'vehicle1',",
				"       Q1950 == 2, 'vehicle2',",
				"       Q1950 == 3, 'vehicle3',",
				"       Q1950 == 4, 'vehicle4',",
				"       Q1950 == 5, 'vehicle5',",
				"       Q1950 == 6, 'vehicle6',",
				"       'vehicleMoreThan6'",
				"    ),",
				"          BaseModel = trim(split(Model_Row, ' ')[1])) ~> AddDerivedColumns",
				"AddDerivedColumns filter(!isNull(Market) &&",
				"    Market != '' &&",
				"    !isNull(Year) &&",
				"    Year != '' &&",
				"    !isNull(ModelGroup) &&",
				"    ModelGroup != '' &&",
				"    !isNull(Q1950)) ~> FilterValidData",
				"FilterValidData aggregate(groupBy(Market,",
				"          Year,",
				"          ModelGroup,",
				"          BaseModel),",
				"     male_total = countIf(Gender == 'male'),",
				"          female_total = countIf(Gender == 'female'),",
				"          male_vehicle1 = countIf(Gender == 'male' && VehicleCount == 'vehicle1'),",
				"          male_vehicle2 = countIf(Gender == 'male' && VehicleCount == 'vehicle2'),",
				"          male_vehicle3 = countIf(Gender == 'male' && VehicleCount == 'vehicle3'),",
				"          male_vehicle4 = countIf(Gender == 'male' && VehicleCount == 'vehicle4'),",
				"          male_vehicle5 = countIf(Gender == 'male' && VehicleCount == 'vehicle5'),",
				"          male_vehicle6 = countIf(Gender == 'male' && VehicleCount == 'vehicle6'),",
				"          male_vehicleMoreThan6 = countIf(Gender == 'male' && VehicleCount == 'vehicleMoreThan6'),",
				"          female_vehicle1 = countIf(Gender == 'female' && VehicleCount == 'vehicle1'),",
				"          female_vehicle2 = countIf(Gender == 'female' && VehicleCount == 'vehicle2'),",
				"          female_vehicle3 = countIf(Gender == 'female' && VehicleCount == 'vehicle3'),",
				"          female_vehicle4 = countIf(Gender == 'female' && VehicleCount == 'vehicle4'),",
				"          female_vehicle5 = countIf(Gender == 'female' && VehicleCount == 'vehicle5'),",
				"          female_vehicle6 = countIf(Gender == 'female' && VehicleCount == 'vehicle6'),",
				"          female_vehicleMoreThan6 = countIf(Gender == 'female' && VehicleCount == 'vehicleMoreThan6')) ~> AggregateData",
				"AggregateData derive(male_vehicle1 = round(toDouble(male_vehicle1) / toDouble(male_total), 2),",
				"          male_vehicle2 = round(toDouble(male_vehicle2) / toDouble(male_total), 2),",
				"          male_vehicle3 = round(toDouble(male_vehicle3) / toDouble(male_total), 2),",
				"          male_vehicle4 = round(toDouble(male_vehicle4) / toDouble(male_total), 2),",
				"          male_vehicle5 = round(toDouble(male_vehicle5) / toDouble(male_total), 2),",
				"          male_vehicle6 = round(toDouble(male_vehicle6) / toDouble(male_total), 2),",
				"          male_vehicleMoreThan6 = round(toDouble(male_vehicleMoreThan6) / toDouble(male_total), 2),",
				"          female_vehicle1 = round(toDouble(female_vehicle1) / toDouble(female_total), 2),",
				"          female_vehicle2 = round(toDouble(female_vehicle2) / toDouble(female_total), 2),",
				"          female_vehicle3 = round(toDouble(female_vehicle3) / toDouble(female_total), 2),",
				"          female_vehicle4 = round(toDouble(female_vehicle4) / toDouble(female_total), 2),",
				"          female_vehicle5 = round(toDouble(female_vehicle5) / toDouble(female_total), 2),",
				"          female_vehicle6 = round(toDouble(female_vehicle6) / toDouble(female_total), 2),",
				"          female_vehicleMoreThan6 = round(toDouble(female_vehicleMoreThan6) / toDouble(female_total), 2)) ~> CalculatePercentages",
				"AggregateData aggregate(groupBy(Market,",
				"          Year,",
				"          BaseModel),",
				"     male_total = sum(male_total),",
				"          female_total = sum(female_total),",
				"          male_vehicle1 = sum(male_vehicle1),",
				"          male_vehicle2 = sum(male_vehicle2),",
				"          male_vehicle3 = sum(male_vehicle3),",
				"          male_vehicle4 = sum(male_vehicle4),",
				"          male_vehicle5 = sum(male_vehicle5),",
				"          male_vehicle6 = sum(male_vehicle6),",
				"          male_vehicleMoreThan6 = sum(male_vehicleMoreThan6),",
				"          female_vehicle1 = sum(female_vehicle1),",
				"          female_vehicle2 = sum(female_vehicle2),",
				"          female_vehicle3 = sum(female_vehicle3),",
				"          female_vehicle4 = sum(female_vehicle4),",
				"          female_vehicle5 = sum(female_vehicle5),",
				"          female_vehicle6 = sum(female_vehicle6),",
				"          female_vehicleMoreThan6 = sum(female_vehicleMoreThan6)) ~> AggregateBaseModelData",
				"AggregateBaseModelData derive(ModelGroup = BaseModel + ' All',",
				"          male_vehicle1 = round(toDouble(male_vehicle1) / toDouble(male_total), 2),",
				"          male_vehicle2 = round(toDouble(male_vehicle2) / toDouble(male_total), 2),",
				"          male_vehicle3 = round(toDouble(male_vehicle3) / toDouble(male_total), 2),",
				"          male_vehicle4 = round(toDouble(male_vehicle4) / toDouble(male_total), 2),",
				"          male_vehicle5 = round(toDouble(male_vehicle5) / toDouble(male_total), 2),",
				"          male_vehicle6 = round(toDouble(male_vehicle6) / toDouble(male_total), 2),",
				"          male_vehicleMoreThan6 = round(toDouble(male_vehicleMoreThan6) / toDouble(male_total), 2),",
				"          female_vehicle1 = round(toDouble(female_vehicle1) / toDouble(female_total), 2),",
				"          female_vehicle2 = round(toDouble(female_vehicle2) / toDouble(female_total), 2),",
				"          female_vehicle3 = round(toDouble(female_vehicle3) / toDouble(female_total), 2),",
				"          female_vehicle4 = round(toDouble(female_vehicle4) / toDouble(female_total), 2),",
				"          female_vehicle5 = round(toDouble(female_vehicle5) / toDouble(female_total), 2),",
				"          female_vehicle6 = round(toDouble(female_vehicle6) / toDouble(female_total), 2),",
				"          female_vehicleMoreThan6 = round(toDouble(female_vehicleMoreThan6) / toDouble(female_total), 2)) ~> PrepareBaseModelData",
				"CalculatePercentages, PrepareBaseModelData union(byName: true)~> UnionModelData",
				"UnionModelData select(mapColumn(",
				"          market = Market,",
				"          year = Year,",
				"          model = ModelGroup,",
				"          male_vehicle1,",
				"          male_vehicle2,",
				"          male_vehicle3,",
				"          male_vehicle4,",
				"          male_vehicle5,",
				"          male_vehicle6,",
				"          male_vehicleMoreThan6,",
				"          female_vehicle1,",
				"          female_vehicle2,",
				"          female_vehicle3,",
				"          female_vehicle4,",
				"          female_vehicle5,",
				"          female_vehicle6,",
				"          female_vehicleMoreThan6",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectFinalColumns",
				"SelectFinalColumns aggregate(groupBy(dummy = 1),",
				"     data = collect(@(market = market,",
				"                     year = year,",
				"                     model = model,",
				"                     male_vehicle1 = male_vehicle1,",
				"                     male_vehicle2 = male_vehicle2,",
				"                     male_vehicle3 = male_vehicle3,",
				"                     male_vehicle4 = male_vehicle4,",
				"                     male_vehicle5 = male_vehicle5,",
				"                     male_vehicle6 = male_vehicle6,",
				"                     male_vehicleMoreThan6 = male_vehicleMoreThan6,",
				"                     female_vehicle1 = female_vehicle1,",
				"                     female_vehicle2 = female_vehicle2,",
				"                     female_vehicle3 = female_vehicle3,",
				"                     female_vehicle4 = female_vehicle4,",
				"                     female_vehicle5 = female_vehicle5,",
				"                     female_vehicle6 = female_vehicle6,",
				"                     female_vehicleMoreThan6 = female_vehicleMoreThan6))) ~> CollectIntoArray",
				"CollectIntoArray select(mapColumn(",
				"          data",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectArrayColumn",
				"SelectArrayColumn sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'json',",
				"     fileSystem: 'output',",
				"     partitionFileNames:['numberOfVehiclesPerHouseholdChart.json'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}