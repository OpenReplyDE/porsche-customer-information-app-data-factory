{
	"name": "full_data",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "allCountriesData"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "RenameColumns"
				},
				{
					"name": "modelAggregates"
				},
				{
					"name": "allModelsDerived"
				},
				{
					"name": "modelDerived"
				},
				{
					"name": "unionAllModels"
				},
				{
					"name": "sortedModels"
				},
				{
					"name": "modelJsonData"
				},
				{
					"name": "combinedJson"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ResponseId as string,",
				"          EndDate as timestamp,",
				"          ED_MODEL_CODE as string,",
				"          ED_MODEL_YEAR as string,",
				"          {1711-1712} as short,",
				"          Q4601 as string,",
				"          Q4531 as string,",
				"          Q4609 as string,",
				"          Q5386 as string,",
				"          Q2002 as string,",
				"          Q2012 as string,",
				"          {1701} as short,",
				"          {1721} as short,",
				"          {1731-1732} as short,",
				"          V1021 as string,",
				"          {1950} as short,",
				"          {670} as short,",
				"          {671g_1_1_1} as string,",
				"          {671g_1_1_3} as string,",
				"          {671g_1_1_5} as string,",
				"          {711} as short,",
				"          {713g_1_1} as string,",
				"          {713g_1_3} as string,",
				"          {713g_1_5} as string,",
				"          {1961g_1_1_1} as string,",
				"          {1961g_1_1_3} as string,",
				"          {1961g_1_1_5} as string,",
				"          {3931g_3931} as boolean,",
				"          {3931g_3932} as boolean,",
				"          {3931g_3933} as boolean,",
				"          {3931g_3934} as boolean,",
				"          {3931g_3935} as boolean,",
				"          {3931g_3936} as boolean,",
				"          {3931g_3937} as boolean,",
				"          {3931g_3938} as boolean,",
				"          {3931g_3939} as boolean,",
				"          {3931g_3940} as boolean,",
				"          {3931g_3941} as boolean,",
				"          {1961g_2_1_1} as string,",
				"          {1961g_3_1_1} as string,",
				"          ED_AUTH_GROUP as string,",
				"          {3881g_38813883} as short,",
				"          {2674-2675} as string,",
				"          {1909-1910} as string,",
				"          Market as string,",
				"          Description as string,",
				"          Type as string,",
				"          Model_Row as string,",
				"          Derivate as string,",
				"          NBOSegment as string,",
				"          Drive as string,",
				"          Body as string,",
				"          PerformanceLevel as string,",
				"          TypeSOP as short,",
				"          TypeEOP as short,",
				"          Top as boolean,",
				"          Classic as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> allCountriesData",
				"allCountriesData select(mapColumn(",
				"          ResponseId,",
				"          EndDate,",
				"          ED_MODEL_CODE,",
				"          ED_MODEL_YEAR,",
				"          Q1711_1712 = {1711-1712},",
				"          Q4601,",
				"          Q4531,",
				"          Q4609,",
				"          Q5386,",
				"          Q2002,",
				"          Q2012,",
				"          Q1701 = {1701},",
				"          Q1721 = {1721},",
				"          {1731-1732},",
				"          V1021,",
				"          {1950},",
				"          {670},",
				"          {671g_1_1_1},",
				"          {671g_1_1_3},",
				"          {671g_1_1_5},",
				"          {711},",
				"          {713g_1_1},",
				"          {713g_1_3},",
				"          {713g_1_5},",
				"          {1961g_1_1_1},",
				"          {1961g_1_1_3},",
				"          {1961g_1_1_5},",
				"          {3931g_3931},",
				"          {3931g_3932},",
				"          {3931g_3933},",
				"          {3931g_3934},",
				"          {3931g_3935},",
				"          {3931g_3936},",
				"          {3931g_3937},",
				"          {3931g_3938},",
				"          {3931g_3939},",
				"          {3931g_3940},",
				"          {3931g_3941},",
				"          {1961g_2_1_1},",
				"          {1961g_3_1_1},",
				"          ED_AUTH_GROUP,",
				"          {3881g_38813883},",
				"          {2674-2675},",
				"          {1909-1910},",
				"          Market,",
				"          Description,",
				"          Type,",
				"          Model_Row,",
				"          Derivate,",
				"          NBOSegment,",
				"          Drive,",
				"          Body,",
				"          PerformanceLevel,",
				"          TypeSOP,",
				"          TypeEOP,",
				"          Top,",
				"          Classic",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameColumns",
				"RenameColumns aggregate(groupBy(Model_Row),",
				"     totalCount = countIf(!isNull(Q1701) && !isNull(Q1721) && !isNull(Q1711_1712)),",
				"          maleCount = countIf(Q1701 == 1 && !isNull(Q1721) && !isNull(Q1711_1712)),",
				"          femaleCount = countIf(Q1701 == 2 && !isNull(Q1721) && !isNull(Q1711_1712)),",
				"          totalRelationshipCount = countIf(!isNull(Q1701) && !isNull(Q1721) && !isNull(Q1711_1712)),",
				"          marriedCount = countIf(Q1721 == 1 && !isNull(Q1701) && !isNull(Q1711_1712)),",
				"          singleCount = countIf(Q1721 == 2 && !isNull(Q1701) && !isNull(Q1711_1712)),",
				"          maleUnder29 = countIf(Q1701 == 1 && Q1711_1712 < 30),",
				"          male30To39 = countIf(Q1701 == 1 && Q1711_1712 >= 30 && Q1711_1712 < 40),",
				"          male40To49 = countIf(Q1701 == 1 && Q1711_1712 >= 40 && Q1711_1712 < 50),",
				"          male50To59 = countIf(Q1701 == 1 && Q1711_1712 >= 50 && Q1711_1712 < 60),",
				"          male60Plus = countIf(Q1701 == 1 && Q1711_1712 >= 60),",
				"          femaleUnder29 = countIf(Q1701 == 2 && Q1711_1712 < 30),",
				"          female30To39 = countIf(Q1701 == 2 && Q1711_1712 >= 30 && Q1711_1712 < 40),",
				"          female40To49 = countIf(Q1701 == 2 && Q1711_1712 >= 40 && Q1711_1712 < 50),",
				"          female50To59 = countIf(Q1701 == 2 && Q1711_1712 >= 50 && Q1711_1712 < 60),",
				"          female60Plus = countIf(Q1701 == 2 && Q1711_1712 >= 60)) ~> modelAggregates",
				"modelAggregates derive(model_descr = 'All models',",
				"          malePercentage = round(toDouble(maleCount) / toDouble(totalCount), 2),",
				"          femalePercentage = round(toDouble(femaleCount) / toDouble(totalCount), 2),",
				"          marriedPercentage = round(toDouble(marriedCount) / toDouble(totalRelationshipCount), 2),",
				"          singlePercentage = round(toDouble(singleCount) / toDouble(totalRelationshipCount), 2),",
				"          maleAgeGroups = @(ageUnder29=round(toDouble(maleUnder29) / toDouble(maleCount), 2),",
				"          age30To39=round(toDouble(male30To39) / toDouble(maleCount), 2),",
				"          age40To49=round(toDouble(male40To49) / toDouble(maleCount), 2),",
				"          age50To59=round(toDouble(male50To59) / toDouble(maleCount), 2),",
				"          age60Plus=round(toDouble(male60Plus) / toDouble(maleCount), 2)),",
				"          femaleAgeGroups = @(ageUnder29=round(toDouble(femaleUnder29) / toDouble(femaleCount), 2),",
				"          age30To39=round(toDouble(female30To39) / toDouble(femaleCount), 2),",
				"          age40To49=round(toDouble(female40To49) / toDouble(femaleCount), 2),",
				"          age50To59=round(toDouble(female50To59) / toDouble(femaleCount), 2),",
				"          age60Plus=round(toDouble(female60Plus) / toDouble(femaleCount), 2))) ~> allModelsDerived",
				"modelAggregates derive(model_descr = Model_Row,",
				"          malePercentage = round(toDouble(maleCount) / toDouble(totalCount), 2),",
				"          femalePercentage = round(toDouble(femaleCount) / toDouble(totalCount), 2),",
				"          marriedPercentage = round(toDouble(marriedCount) / toDouble(totalRelationshipCount), 2),",
				"          singlePercentage = round(toDouble(singleCount) / toDouble(totalRelationshipCount), 2),",
				"          maleAgeGroups = @(ageUnder29=round(toDouble(maleUnder29) / toDouble(maleCount), 2),",
				"          age30To39=round(toDouble(male30To39) / toDouble(maleCount), 2),",
				"          age40To49=round(toDouble(male40To49) / toDouble(maleCount), 2),",
				"          age50To59=round(toDouble(male50To59) / toDouble(maleCount), 2),",
				"          age60Plus=round(toDouble(male60Plus) / toDouble(maleCount), 2)),",
				"          femaleAgeGroups = @(ageUnder29=round(toDouble(femaleUnder29) / toDouble(femaleCount), 2),",
				"          age30To39=round(toDouble(female30To39) / toDouble(femaleCount), 2),",
				"          age40To49=round(toDouble(female40To49) / toDouble(femaleCount), 2),",
				"          age50To59=round(toDouble(female50To59) / toDouble(femaleCount), 2),",
				"          age60Plus=round(toDouble(female60Plus) / toDouble(femaleCount), 2))) ~> modelDerived",
				"modelDerived, allModelsDerived union(byName: true)~> unionAllModels",
				"unionAllModels sort(asc(iif(model_descr == 'All models', 1, 2), true)) ~> sortedModels",
				"sortedModels derive(modelJson = @(model=model_descr,",
				"          male=@(percentage=malePercentage,",
				"          ageGroups=maleAgeGroups,",
				"          married=round(toDouble(marriedCount) / toDouble(totalRelationshipCount), 2),",
				"          single=round(toDouble(singleCount) / toDouble(totalRelationshipCount), 2),",
				"          other=round(1 - (toDouble(marriedCount) + toDouble(singleCount)) / toDouble(totalRelationshipCount), 2)),",
				"          female=@(percentage=femalePercentage,",
				"          ageGroups=femaleAgeGroups,",
				"          married=round(toDouble(marriedCount) / toDouble(totalRelationshipCount), 2),",
				"          single=round(toDouble(singleCount) / toDouble(totalRelationshipCount), 2),",
				"          other=round(1 - (toDouble(marriedCount) + toDouble(singleCount)) / toDouble(totalRelationshipCount), 2)),",
				"          married=marriedPercentage,",
				"          single=singlePercentage,",
				"          other=round(1 - marriedPercentage - singlePercentage, 2),",
				"          market='DE',",
				"          year=2024)) ~> modelJsonData",
				"modelJsonData aggregate(groupBy(dummy = 1),",
				"     finalJsonArray = collect(modelJson)) ~> combinedJson",
				"combinedJson sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'json',",
				"     fileSystem: 'output',",
				"     filePattern:'allCountriesData.json',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          finalJsonArray",
				"     )) ~> sink1"
			]
		}
	}
}