{
	"name": "cap_churnConquestRate",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CAP_2019",
						"type": "DatasetReference"
					},
					"name": "source2019"
				},
				{
					"dataset": {
						"referenceName": "CAP_2020",
						"type": "DatasetReference"
					},
					"name": "source2020"
				},
				{
					"dataset": {
						"referenceName": "CAP_2021",
						"type": "DatasetReference"
					},
					"name": "source2021"
				},
				{
					"dataset": {
						"referenceName": "CAP_2022",
						"type": "DatasetReference"
					},
					"name": "source2022"
				},
				{
					"dataset": {
						"referenceName": "CAP_2023",
						"type": "DatasetReference"
					},
					"name": "source2023"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "capAverage2019",
					"flowlet": {
						"referenceName": "_capValues2",
						"type": "DataFlowReference",
						"parameters": {
							"market": "$market",
							"year": "'2019'"
						}
					}
				},
				{
					"name": "capAverage2020",
					"flowlet": {
						"referenceName": "_capValues2",
						"type": "DataFlowReference",
						"parameters": {
							"market": "$market",
							"year": "'2020'"
						}
					}
				},
				{
					"name": "capAverage2021",
					"flowlet": {
						"referenceName": "_capValues2",
						"type": "DataFlowReference",
						"parameters": {
							"market": "$market",
							"year": "'2021'"
						}
					}
				},
				{
					"name": "capAverage2022",
					"flowlet": {
						"referenceName": "_capValues2",
						"type": "DataFlowReference",
						"parameters": {
							"market": "$market",
							"year": "'2022'"
						}
					}
				},
				{
					"name": "capAverage2023",
					"flowlet": {
						"referenceName": "_capValues2",
						"type": "DataFlowReference",
						"parameters": {
							"market": "$market",
							"year": "'2023'"
						}
					}
				},
				{
					"name": "UnionAllData"
				},
				{
					"name": "CreateDataArray"
				},
				{
					"name": "aggregate"
				},
				{
					"name": "select"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     market as string",
				"}",
				"source(output(",
				"          GroupName as string,",
				"          GroupType as string,",
				"          ChurnRate as double,",
				"          ConquestRate as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2019",
				"source(output(",
				"          GroupName as string,",
				"          GroupType as string,",
				"          ChurnRate as double,",
				"          ConquestRate as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2020",
				"source(output(",
				"          GroupName as string,",
				"          GroupType as string,",
				"          ChurnRate as double,",
				"          ConquestRate as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2021",
				"source(output(",
				"          GroupName as string,",
				"          GroupType as string,",
				"          ChurnRate as double,",
				"          ConquestRate as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2022",
				"source(output(",
				"          GroupName as string,",
				"          GroupType as string,",
				"          ChurnRate as double,",
				"          ConquestRate as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2023",
				"source2019 compose(mapParameter(",
				"          market = $market,",
				"          year = '2019'",
				"     ),",
				"     mapColumn(",
				"          GroupName,",
				"          GroupType,",
				"          value1 = ChurnRate,",
				"          value2 = ConquestRate",
				"     ),",
				"     composition: '_capValues2') ~> capAverage2019@(output1)",
				"source2020 compose(mapParameter(",
				"          market = $market,",
				"          year = '2020'",
				"     ),",
				"     mapColumn(",
				"          GroupName,",
				"          GroupType,",
				"          value1 = ChurnRate,",
				"          value2 = ConquestRate",
				"     ),",
				"     composition: '_capValues2') ~> capAverage2020@(output1)",
				"source2021 compose(mapParameter(",
				"          market = $market,",
				"          year = '2021'",
				"     ),",
				"     mapColumn(",
				"          GroupName,",
				"          GroupType,",
				"          value1 = ChurnRate,",
				"          value2 = ConquestRate",
				"     ),",
				"     composition: '_capValues2') ~> capAverage2021@(output1)",
				"source2022 compose(mapParameter(",
				"          market = $market,",
				"          year = '2022'",
				"     ),",
				"     mapColumn(",
				"          GroupName,",
				"          GroupType,",
				"          value1 = ChurnRate,",
				"          value2 = ConquestRate",
				"     ),",
				"     composition: '_capValues2') ~> capAverage2022@(output1)",
				"source2023 compose(mapParameter(",
				"          market = $market,",
				"          year = '2023'",
				"     ),",
				"     mapColumn(",
				"          GroupName,",
				"          GroupType,",
				"          value1 = ChurnRate,",
				"          value2 = ConquestRate",
				"     ),",
				"     composition: '_capValues2') ~> capAverage2023@(output1)",
				"capAverage2019@output1, capAverage2020@output1, capAverage2021@output1, capAverage2022@output1, capAverage2023@output1 union(byName: true)~> UnionAllData",
				"select1 derive(data = @(market, year, model, male_churnRate, male_conquestRate, female_churnRate, female_conquestRate, total_churnRate, total_conquestRate)) ~> CreateDataArray",
				"CreateDataArray aggregate(groupBy(dummy = 1),",
				"     data = collect(data)) ~> aggregate",
				"aggregate select(mapColumn(",
				"          data",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> select",
				"UnionAllData select(mapColumn(",
				"          market,",
				"          year,",
				"          model,",
				"          male_churnRate = value1_male,",
				"          female_churnRate = value1_female,",
				"          total_churnRate = value1_all,",
				"          male_conquestRate = value2_male,",
				"          female_conquestRate = value2_female,",
				"          total_conquestRate = value2_all",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'json',",
				"     fileSystem: 'output',",
				"     partitionFileNames:[(concat('ageTotalCustomerBaseChart', $market, '.json'))],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}