{
	"name": "incomeDataUSA",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "FullData",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "SelectUSAColumns"
				},
				{
					"name": "FilterUSAData"
				},
				{
					"name": "DeriveColumns"
				},
				{
					"name": "AggregateData"
				},
				{
					"name": "CalculateTotals"
				},
				{
					"name": "CalculatePercentages"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ResponseId as string,",
				"          EndDate as string,",
				"          ED_MODEL_CODE as string,",
				"          ED_MODEL_YEAR as string,",
				"          {1711-1712} as string,",
				"          Q4601 as integer,",
				"          Q4531 as string,",
				"          Q4609 as string,",
				"          Q5386 as string,",
				"          Q2002 as integer,",
				"          Q2012 as string,",
				"          {170111} as integer,",
				"          {1721} as integer,",
				"          {1731-1732} as string,",
				"          V1021 as string,",
				"          {1950} as string,",
				"          {670} as string,",
				"          {671g_1_1_1} as string,",
				"          {671g_1_1_3} as string,",
				"          {671g_1_1_5} as string,",
				"          {711} as integer,",
				"          {713g_1_121} as string,",
				"          {713g_1_3} as string,",
				"          {713g_1_5} as string,",
				"          {1961g_1_1_1} as string,",
				"          {1961g_1_1_3} as string,",
				"          {1961g_1_1_5} as string,",
				"          {3931g_3931} as string,",
				"          {3931g_3932} as string,",
				"          {3931g_3933} as string,",
				"          {3931g_3934} as string,",
				"          {3931g_3935} as string,",
				"          {3931g_3936} as string,",
				"          {3931g_3937} as string,",
				"          {3931g_3938} as string,",
				"          {3931g_3939} as string,",
				"          {3931g_3940} as string,",
				"          {3931g_3941} as string,",
				"          {1961g_2_1_1} as string,",
				"          {1961g_3_1_1} as string,",
				"          ED_AUTH_GROUP as string,",
				"          {3881g_38813883} as string,",
				"          {2674-2675} as string,",
				"          {1909-1910} as integer,",
				"          Market as string,",
				"          Description as string,",
				"          Type as string,",
				"          Model_Row as string,",
				"          Derivate as string,",
				"          NBOSegment as string,",
				"          Drive as string,",
				"          Body as string,",
				"          PerformanceLevel as string,",
				"          TypeSOP as string,",
				"          TypeEOP as string,",
				"          Top as string,",
				"          Classic as string,",
				"          {170157} as string,",
				"          {1903-1904} as integer,",
				"          {1923-1924} as integer,",
				"          {2601-2602} as string,",
				"          {2702-2703} as string,",
				"          {3881g_38843886} as string,",
				"          {3881g_38873889} as string,",
				"          {3881g_38903892} as string,",
				"          {3881g_38933895} as string,",
				"          {3881g_38963898} as string,",
				"          {2051g_1001} as string,",
				"          {2051g_30168} as string,",
				"          {2051g_30269} as string,",
				"          {2051g_101} as string,",
				"          {2063} as string,",
				"          {2051g_901} as string,",
				"          {2051g_90273} as string,",
				"          {2051g_406} as string,",
				"          {2051g_30375} as string,",
				"          {2051g_60276} as string,",
				"          {2072} as string,",
				"          {2073} as string,",
				"          {2051g_604} as string,",
				"          {2075} as string,",
				"          {2051g_90381} as string,",
				"          {2051g_904} as string,",
				"          {2051g_50183} as string,",
				"          {2051g_41584} as string,",
				"          {208285} as string,",
				"          {2083} as string,",
				"          {208487} as string,",
				"          {209088} as string,",
				"          {209289} as string,",
				"          {2093} as string,",
				"          {2096} as string,",
				"          {2051g_1003} as string,",
				"          {2051g_50393} as string,",
				"          {210294} as string,",
				"          {2051g_1004} as string,",
				"          {2110} as string,",
				"          {211197} as string,",
				"          {211498} as string,",
				"          {2115} as string,",
				"          {2051g_413} as string,",
				"          {2117} as string,",
				"          {2051g_414102} as string,",
				"          {2119} as string,",
				"          {2051g_309104} as string,",
				"          {2122105} as string,",
				"          {2124} as string,",
				"          {2051g_611} as string,",
				"          {2128} as string,",
				"          {2129} as string,",
				"          {2051g_419110} as string,",
				"          {2051g_1006} as string,",
				"          {2051g_804112} as string,",
				"          {2051g_805} as string,",
				"          {2051g_803} as string,",
				"          {2136} as string,",
				"          {2138116} as string,",
				"          {2141} as string,",
				"          {2142} as string,",
				"          {2051g_703} as string,",
				"          {2051g_1002} as string,",
				"          {2145} as string,",
				"          {2146} as string,",
				"          {2147} as string,",
				"          {2154} as string,",
				"          {2051g_301125} as string,",
				"          {2051g_403} as string,",
				"          {2051g_404} as string,",
				"          {2051g_302128} as string,",
				"          {2051g_102} as string,",
				"          {2102130} as string,",
				"          {2051g_103} as string,",
				"          {2051g_902132} as string,",
				"          {2051g_303133} as string,",
				"          {2051g_602134} as string,",
				"          {2051g_304} as string,",
				"          {2090136} as string,",
				"          {2053} as string,",
				"          {2051g_903138} as string,",
				"          {2135} as string,",
				"          {2092140} as string,",
				"          {2080} as string,",
				"          {2082142} as string,",
				"          {2084143} as string,",
				"          {2087} as string,",
				"          {2088} as string,",
				"          {2091} as string,",
				"          {2051g_503147} as string,",
				"          {2100} as string,",
				"          {2101} as string,",
				"          {2104} as string,",
				"          {2105} as string,",
				"          {2106} as string,",
				"          {2111153} as string,",
				"          {2114154} as string,",
				"          {2051g_502} as string,",
				"          {2051g_414156} as string,",
				"          {2051g_309157} as string,",
				"          {2120} as string,",
				"          {2051g_415159} as string,",
				"          {2122160} as string,",
				"          {2051g_310} as string,",
				"          {2051g_419162} as string,",
				"          {2051g_804163} as string,",
				"          {2054} as string,",
				"          {2051g_501165} as string,",
				"          {2051g_504} as string,",
				"          {2051g_416} as string,",
				"          {2051g_417} as string,",
				"          {2138169} as string,",
				"          {2051g_1102_TEXT} as string,",
				"          Q4970 as string,",
				"          {2051g_1101} as string,",
				"          {713g_1_4} as string,",
				"          {713g_1_1174} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 select(mapColumn(",
				"          ResponseId,",
				"          EndDate,",
				"          ED_MODEL_CODE,",
				"          ED_MODEL_YEAR,",
				"          Q4601,",
				"          Market,",
				"          Model_Row,",
				"          Derivate,",
				"          Q1701 = {170111}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectUSAColumns",
				"SelectUSAColumns filter(Market == 'PCNA') ~> FilterUSAData",
				"FilterUSAData derive(Year = left(EndDate, 4),",
				"          ModelGroup = iif(isNull(Derivate) || Derivate == '' || Derivate == Model_Row, ",
				"        Model_Row + ' Basic', ",
				"        iif(startsWith(Derivate, Model_Row), ",
				"        Derivate, ",
				"        Model_Row + ' ' + Derivate)),",
				"          IncomeGroup = case(",
				"        Q4601 == 1, 'below100k',",
				"        Q4601 == 2, 'between100And200k',",
				"        Q4601 == 3, 'between200And300k',",
				"        Q4601 == 4, 'between300And400k',",
				"        Q4601 == 5, 'between400And500k',",
				"        Q4601 == 6, 'between500And600k',",
				"        Q4601 == 7, 'between600And700k',",
				"        Q4601 == 8, 'between700And800k',",
				"        Q4601 == 9, 'between800And900k',",
				"        Q4601 == 10, 'between900And1000k',",
				"        Q4601 == 11, 'between1000And1250k',",
				"        Q4601 == 12, 'between1250And1500k',",
				"        Q4601 == 13, 'moreThan1500k',",
				"        Q4601 == 98, 'preferNotToAnswer',",
				"        'unknown'",
				"    ),",
				"          Gender = iif(Q1701 == 1, 'male', 'female')) ~> DeriveColumns",
				"DeriveColumns aggregate(groupBy(Year,",
				"          ModelGroup),",
				"     total_count = count(),",
				"          male_below100k = countIf(Gender == 'male' && IncomeGroup == 'below100k'),",
				"          male_between100And200k = countIf(Gender == 'male' && IncomeGroup == 'between100And200k'),",
				"          male_between200And300k = countIf(Gender == 'male' && IncomeGroup == 'between200And300k'),",
				"          male_between300And400k = countIf(Gender == 'male' && IncomeGroup == 'between300And400k'),",
				"          male_between400And500k = countIf(Gender == 'male' && IncomeGroup == 'between400And500k'),",
				"          male_between500And600k = countIf(Gender == 'male' && IncomeGroup == 'between500And600k'),",
				"          male_between600And700k = countIf(Gender == 'male' && IncomeGroup == 'between600And700k'),",
				"          male_between700And800k = countIf(Gender == 'male' && IncomeGroup == 'between700And800k'),",
				"          male_between800And900k = countIf(Gender == 'male' && IncomeGroup == 'between800And900k'),",
				"          male_between900And1000k = countIf(Gender == 'male' && IncomeGroup == 'between900And1000k'),",
				"          male_between1000And1250k = countIf(Gender == 'male' && IncomeGroup == 'between1000And1250k'),",
				"          male_between1250And1500k = countIf(Gender == 'male' && IncomeGroup == 'between1250And1500k'),",
				"          male_moreThan1500k = countIf(Gender == 'male' && IncomeGroup == 'moreThan1500k'),",
				"          male_preferNotToAnswer = countIf(Gender == 'male' && IncomeGroup == 'preferNotToAnswer'),",
				"          female_below100k = countIf(Gender == 'female' && IncomeGroup == 'below100k'),",
				"          female_between100And200k = countIf(Gender == 'female' && IncomeGroup == 'between100And200k'),",
				"          female_between200And300k = countIf(Gender == 'female' && IncomeGroup == 'between200And300k'),",
				"          female_between300And400k = countIf(Gender == 'female' && IncomeGroup == 'between300And400k'),",
				"          female_between400And500k = countIf(Gender == 'female' && IncomeGroup == 'between400And500k'),",
				"          female_between500And600k = countIf(Gender == 'female' && IncomeGroup == 'between500And600k'),",
				"          female_between600And700k = countIf(Gender == 'female' && IncomeGroup == 'between600And700k'),",
				"          female_between700And800k = countIf(Gender == 'female' && IncomeGroup == 'between700And800k'),",
				"          female_between800And900k = countIf(Gender == 'female' && IncomeGroup == 'between800And900k'),",
				"          female_between900And1000k = countIf(Gender == 'female' && IncomeGroup == 'between900And1000k'),",
				"          female_between1000And1250k = countIf(Gender == 'female' && IncomeGroup == 'between1000And1250k'),",
				"          female_between1250And1500k = countIf(Gender == 'female' && IncomeGroup == 'between1250And1500k'),",
				"          female_moreThan1500k = countIf(Gender == 'female' && IncomeGroup == 'moreThan1500k'),",
				"          female_preferNotToAnswer = countIf(Gender == 'female' && IncomeGroup == 'preferNotToAnswer')) ~> AggregateData",
				"AggregateData derive(total_male = male_below100k + male_between100And200k + male_between200And300k + male_between300And400k + male_between400And500k + male_between500And600k + male_between600And700k + male_between700And800k + male_between800And900k + male_between900And1000k + male_between1000And1250k + male_between1250And1500k + male_moreThan1500k + male_preferNotToAnswer,",
				"          total_female = female_below100k + female_between100And200k + female_between200And300k + female_between300And400k + female_between400And500k + female_between500And600k + female_between600And700k + female_between700And800k + female_between800And900k + female_between900And1000k + female_between1000And1250k + female_between1250And1500k + female_moreThan1500k + female_preferNotToAnswer) ~> CalculateTotals",
				"CalculateTotals derive(male_below100k = round(toDouble(male_below100k) / toDouble(total_male), 3),",
				"          male_between100And200k = round(toDouble(male_between100And200k) / toDouble(total_male), 3),",
				"          male_between200And300k = round(toDouble(male_between200And300k) / toDouble(total_male), 3),",
				"          male_between300And400k = round(toDouble(male_between300And400k) / toDouble(total_male), 3),",
				"          male_between400And500k = round(toDouble(male_between400And500k) / toDouble(total_male), 3),",
				"          male_between500And600k = round(toDouble(male_between500And600k) / toDouble(total_male), 3),",
				"          male_between600And700k = round(toDouble(male_between600And700k) / toDouble(total_male), 3),",
				"          male_between700And800k = round(toDouble(male_between700And800k) / toDouble(total_male), 3),",
				"          male_between800And900k = round(toDouble(male_between800And900k) / toDouble(total_male), 3),",
				"          male_between900And1000k = round(toDouble(male_between900And1000k) / toDouble(total_male), 3),",
				"          male_between1000And1250k = round(toDouble(male_between1000And1250k) / toDouble(total_male), 3),",
				"          male_between1250And1500k = round(toDouble(male_between1250And1500k) / toDouble(total_male), 3),",
				"          male_moreThan1500k = round(toDouble(male_moreThan1500k) / toDouble(total_male), 3),",
				"          male_preferNotToAnswer = round(toDouble(male_preferNotToAnswer) / toDouble(total_male), 3),",
				"          female_below100k = round(toDouble(female_below100k) / toDouble(total_female), 3),",
				"          female_between100And200k = round(toDouble(female_between100And200k) / toDouble(total_female), 3),",
				"          female_between200And300k = round(toDouble(female_between200And300k) / toDouble(total_female), 3),",
				"          female_between300And400k = round(toDouble(female_between300And400k) / toDouble(total_female), 3),",
				"          female_between400And500k = round(toDouble(female_between400And500k) / toDouble(total_female), 3),",
				"          female_between500And600k = round(toDouble(female_between500And600k) / toDouble(total_female), 3),",
				"          female_between600And700k = round(toDouble(female_between600And700k) / toDouble(total_female), 3),",
				"          female_between700And800k = round(toDouble(female_between700And800k) / toDouble(total_female), 3),",
				"          female_between800And900k = round(toDouble(female_between800And900k) / toDouble(total_female), 3),",
				"          female_between900And1000k = round(toDouble(female_between900And1000k) / toDouble(total_female), 3),",
				"          female_between1000And1250k = round(toDouble(female_between1000And1250k) / toDouble(total_female), 3),",
				"          female_between1250And1500k = round(toDouble(female_between1250And1500k) / toDouble(total_female), 3),",
				"          female_moreThan1500k = round(toDouble(female_moreThan1500k) / toDouble(total_female), 3),",
				"          female_preferNotToAnswer = round(toDouble(female_preferNotToAnswer) / toDouble(total_female), 3)) ~> CalculatePercentages",
				"CalculatePercentages select(mapColumn(",
				"          Year,",
				"          ModelGroup,",
				"          total_count,",
				"          male_below100k,",
				"          male_between100And200k,",
				"          male_between200And300k,",
				"          male_between300And400k,",
				"          male_between400And500k,",
				"          male_between500And600k,",
				"          male_between600And700k,",
				"          male_between700And800k,",
				"          male_between800And900k,",
				"          male_between900And1000k,",
				"          male_between1000And1250k,",
				"          male_between1250And1500k,",
				"          male_moreThan1500k,",
				"          male_preferNotToAnswer,",
				"          female_below100k,",
				"          female_between100And200k,",
				"          female_between200And300k,",
				"          female_between300And400k,",
				"          female_between400And500k,",
				"          female_between500And600k,",
				"          female_between600And700k,",
				"          female_between700And800k,",
				"          female_between800And900k,",
				"          female_between900And1000k,",
				"          female_between1000And1250k,",
				"          female_between1250And1500k,",
				"          female_moreThan1500k,",
				"          female_preferNotToAnswer,",
				"          total_male,",
				"          total_female",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'json',",
				"     fileSystem: 'output',",
				"     partitionFileNames:['incomeChartUSA.json'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}