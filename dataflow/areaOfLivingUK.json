{
	"name": "areaOfLivingUK",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CAP_UK_2019",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "CAP_UK_2020",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "CAP_UK_2021",
						"type": "DatasetReference"
					},
					"name": "source3"
				},
				{
					"dataset": {
						"referenceName": "CAP_UK_2022",
						"type": "DatasetReference"
					},
					"name": "source4"
				},
				{
					"dataset": {
						"referenceName": "CAP_UK_2023",
						"type": "DatasetReference"
					},
					"name": "source5"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "SplitModelTypes1"
				},
				{
					"name": "SplitModelTypes2"
				},
				{
					"name": "SplitModelTypes3"
				},
				{
					"name": "SplitModelTypes4"
				},
				{
					"name": "SplitModelTypes5"
				},
				{
					"name": "DeriveGenderColumns1"
				},
				{
					"name": "DeriveGenderColumns2"
				},
				{
					"name": "DeriveGenderColumns3"
				},
				{
					"name": "DeriveGenderColumns4"
				},
				{
					"name": "DeriveGenderColumns5"
				},
				{
					"name": "DeriveEngineColumns1"
				},
				{
					"name": "DeriveEngineColumns2"
				},
				{
					"name": "DeriveEngineColumns3"
				},
				{
					"name": "DeriveEngineColumns4"
				},
				{
					"name": "DeriveEngineColumns5"
				},
				{
					"name": "SelectGenderColumns1"
				},
				{
					"name": "SelectGenderColumns2"
				},
				{
					"name": "SelectGenderColumns3"
				},
				{
					"name": "SelectGenderColumns4"
				},
				{
					"name": "SelectGenderColumns5"
				},
				{
					"name": "SelectEngineColumns1"
				},
				{
					"name": "SelectEngineColumns2"
				},
				{
					"name": "SelectEngineColumns3"
				},
				{
					"name": "SelectEngineColumns4"
				},
				{
					"name": "SelectEngineColumns5"
				},
				{
					"name": "DeriveGenderKeys1"
				},
				{
					"name": "DeriveGenderKeys2"
				},
				{
					"name": "DeriveGenderKeys3"
				},
				{
					"name": "DeriveGenderKeys4"
				},
				{
					"name": "DeriveGenderKeys5"
				},
				{
					"name": "DeriveEngineKeys1"
				},
				{
					"name": "DeriveEngineKeys2"
				},
				{
					"name": "DeriveEngineKeys3"
				},
				{
					"name": "DeriveEngineKeys4"
				},
				{
					"name": "DeriveEngineKeys5"
				},
				{
					"name": "UnionGenderData"
				},
				{
					"name": "UnionEngineData"
				},
				{
					"name": "UnionAllData"
				},
				{
					"name": "CreateDataArray"
				},
				{
					"name": "AggregateToArray"
				},
				{
					"name": "SelectDataArray"
				}
			],
			"scriptLines": [
				"source(output(",
				"          GroupName as string,",
				"          GroupType as string,",
				"          {L�ndlicher Raum} as double,",
				"          {Kleinst�dtischer Raum} as double,",
				"          {St�dtischer Raum} as double,",
				"          Ballungsraum as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          GroupName as string,",
				"          GroupType as string,",
				"          {L�ndlicher Raum} as double,",
				"          {Kleinst�dtischer Raum} as double,",
				"          {St�dtischer Raum} as double,",
				"          Ballungsraum as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source(output(",
				"          GroupName as string,",
				"          GroupType as string,",
				"          {L�ndlicher Raum} as double,",
				"          {Kleinst�dtischer Raum} as double,",
				"          {St�dtischer Raum} as double,",
				"          Ballungsraum as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source3",
				"source(output(",
				"          GroupName as string,",
				"          GroupType as string,",
				"          {L�ndlicher Raum} as double,",
				"          {Kleinst�dtischer Raum} as double,",
				"          {St�dtischer Raum} as double,",
				"          Ballungsraum as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source4",
				"source(output(",
				"          GroupName as string,",
				"          GroupType as string,",
				"          {L�ndlicher Raum} as double,",
				"          {Kleinst�dtischer Raum} as double,",
				"          {St�dtischer Raum} as double,",
				"          Ballungsraum as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source5",
				"source1 split(GroupType == 'Model/Gender',",
				"     GroupType == 'Model/Engine',",
				"     disjoint: false) ~> SplitModelTypes1@(ModelGender, ModelEngine)",
				"source2 split(GroupType == 'Model/Gender',",
				"     GroupType == 'Model/Engine',",
				"     disjoint: false) ~> SplitModelTypes2@(ModelGender, ModelEngine)",
				"source3 split(GroupType == 'Model/Gender',",
				"     GroupType == 'Model/Engine',",
				"     disjoint: false) ~> SplitModelTypes3@(ModelGender, ModelEngine)",
				"source4 split(GroupType == 'Model/Gender',",
				"     GroupType == 'Model/Engine',",
				"     disjoint: false) ~> SplitModelTypes4@(ModelGender, ModelEngine)",
				"source5 split(GroupType == 'Model/Gender',",
				"     GroupType == 'Model/Engine',",
				"     disjoint: false) ~> SplitModelTypes5@(ModelGender, ModelEngine)",
				"SplitModelTypes1@ModelGender derive(market = 'UK',",
				"          year = '2019',",
				"          variant = 'All',",
				"          model = iif(GroupName == 'Porsche/Female' || GroupName == 'Porsche/Male', 'All Models',",
				"       iif(startsWith(split(GroupName, '/')[1], '7') || startsWith(split(GroupName, '/')[1], '9'),",
				"         concat('_', split(GroupName, '/')[1]),",
				"         split(GroupName, '/')[1])),",
				"          gender = iif(endsWith(GroupName, '/Female'), 'female', 'male')) ~> DeriveGenderColumns1",
				"SplitModelTypes2@ModelGender derive(market = 'UK',",
				"          year = '2020',",
				"          variant = 'All',",
				"          model = iif(GroupName == 'Porsche/Female' || GroupName == 'Porsche/Male', 'All Models',",
				"       iif(startsWith(split(GroupName, '/')[1], '7') || startsWith(split(GroupName, '/')[1], '9'),",
				"         concat('_', split(GroupName, '/')[1]),",
				"         split(GroupName, '/')[1])),",
				"          gender = iif(endsWith(GroupName, '/Female'), 'female', 'male')) ~> DeriveGenderColumns2",
				"SplitModelTypes3@ModelGender derive(market = 'UK',",
				"          year = '2021',",
				"          variant = 'All',",
				"          model = iif(GroupName == 'Porsche/Female' || GroupName == 'Porsche/Male', 'All Models',",
				"       iif(startsWith(split(GroupName, '/')[1], '7') || startsWith(split(GroupName, '/')[1], '9'),",
				"         concat('_', split(GroupName, '/')[1]),",
				"         split(GroupName, '/')[1])),",
				"          gender = iif(endsWith(GroupName, '/Female'), 'female', 'male')) ~> DeriveGenderColumns3",
				"SplitModelTypes4@ModelGender derive(market = 'UK',",
				"          year = '2022',",
				"          variant = 'All',",
				"          model = iif(GroupName == 'Porsche/Female' || GroupName == 'Porsche/Male', 'All Models',",
				"       iif(startsWith(split(GroupName, '/')[1], '7') || startsWith(split(GroupName, '/')[1], '9'),",
				"         concat('_', split(GroupName, '/')[1]),",
				"         split(GroupName, '/')[1])),",
				"          gender = iif(endsWith(GroupName, '/Female'), 'female', 'male')) ~> DeriveGenderColumns4",
				"SplitModelTypes5@ModelGender derive(market = 'UK',",
				"          year = '2023',",
				"          variant = 'All',",
				"          model = iif(GroupName == 'Porsche/Female' || GroupName == 'Porsche/Male', 'All Models',",
				"       iif(startsWith(split(GroupName, '/')[1], '7') || startsWith(split(GroupName, '/')[1], '9'),",
				"         concat('_', split(GroupName, '/')[1]),",
				"         split(GroupName, '/')[1])),",
				"          gender = iif(endsWith(GroupName, '/Female'), 'female', 'male')) ~> DeriveGenderColumns5",
				"SplitModelTypes1@ModelEngine derive(market = 'UK',",
				"          year = '2019',",
				"          variant = trim(split(GroupName, '/')[2]),",
				"          model = iif(startsWith(split(GroupName, '/')[1], '7') || startsWith(split(GroupName, '/')[1], '9'),",
				"   concat('_', split(GroupName, '/')[1]),",
				"   split(GroupName, '/')[1])) ~> DeriveEngineColumns1",
				"SplitModelTypes2@ModelEngine derive(market = 'UK',",
				"          year = '2020',",
				"          variant = trim(split(GroupName, '/')[2]),",
				"          model = iif(startsWith(split(GroupName, '/')[1], '7') || startsWith(split(GroupName, '/')[1], '9'),",
				"   concat('_', split(GroupName, '/')[1]),",
				"   split(GroupName, '/')[1])) ~> DeriveEngineColumns2",
				"SplitModelTypes3@ModelEngine derive(market = 'UK',",
				"          year = '2021',",
				"          variant = trim(split(GroupName, '/')[2]),",
				"          model = iif(startsWith(split(GroupName, '/')[1], '7') || startsWith(split(GroupName, '/')[1], '9'),",
				"   concat('_', split(GroupName, '/')[1]),",
				"   split(GroupName, '/')[1])) ~> DeriveEngineColumns3",
				"SplitModelTypes4@ModelEngine derive(market = 'UK',",
				"          year = '2022',",
				"          variant = trim(split(GroupName, '/')[2]),",
				"          model = iif(startsWith(split(GroupName, '/')[1], '7') || startsWith(split(GroupName, '/')[1], '9'),",
				"   concat('_', split(GroupName, '/')[1]),",
				"   split(GroupName, '/')[1])) ~> DeriveEngineColumns4",
				"SplitModelTypes5@ModelEngine derive(market = 'UK',",
				"          year = '2023',",
				"          variant = trim(split(GroupName, '/')[2]),",
				"          model = iif(startsWith(split(GroupName, '/')[1], '7') || startsWith(split(GroupName, '/')[1], '9'),",
				"   concat('_', split(GroupName, '/')[1]),",
				"   split(GroupName, '/')[1])) ~> DeriveEngineColumns5",
				"DeriveGenderColumns1 select(mapColumn(",
				"          market,",
				"          year,",
				"          variant,",
				"          model,",
				"          gender,",
				"          Village = {L�ndlicher Raum},",
				"          Suburbs = {Kleinst�dtischer Raum},",
				"          Town = {St�dtischer Raum},",
				"          City = Ballungsraum",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectGenderColumns1",
				"DeriveGenderColumns2 select(mapColumn(",
				"          market,",
				"          year,",
				"          variant,",
				"          model,",
				"          gender,",
				"          Village = {L�ndlicher Raum},",
				"          Suburbs = {Kleinst�dtischer Raum},",
				"          Town = {St�dtischer Raum},",
				"          City = Ballungsraum",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectGenderColumns2",
				"DeriveGenderColumns3 select(mapColumn(",
				"          market,",
				"          year,",
				"          variant,",
				"          model,",
				"          gender,",
				"          Village = {L�ndlicher Raum},",
				"          Suburbs = {Kleinst�dtischer Raum},",
				"          Town = {St�dtischer Raum},",
				"          City = Ballungsraum",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectGenderColumns3",
				"DeriveGenderColumns4 select(mapColumn(",
				"          market,",
				"          year,",
				"          variant,",
				"          model,",
				"          gender,",
				"          Village = {L�ndlicher Raum},",
				"          Suburbs = {Kleinst�dtischer Raum},",
				"          Town = {St�dtischer Raum},",
				"          City = Ballungsraum",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectGenderColumns4",
				"DeriveGenderColumns5 select(mapColumn(",
				"          market,",
				"          year,",
				"          variant,",
				"          model,",
				"          gender,",
				"          Village = {L�ndlicher Raum},",
				"          Suburbs = {Kleinst�dtischer Raum},",
				"          Town = {St�dtischer Raum},",
				"          City = Ballungsraum",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectGenderColumns5",
				"DeriveEngineColumns1 select(mapColumn(",
				"          market,",
				"          year,",
				"          variant,",
				"          model,",
				"          Village = {L�ndlicher Raum},",
				"          Suburbs = {Kleinst�dtischer Raum},",
				"          Town = {St�dtischer Raum},",
				"          City = Ballungsraum",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectEngineColumns1",
				"DeriveEngineColumns2 select(mapColumn(",
				"          market,",
				"          year,",
				"          variant,",
				"          model,",
				"          Village = {L�ndlicher Raum},",
				"          Suburbs = {Kleinst�dtischer Raum},",
				"          Town = {St�dtischer Raum},",
				"          City = Ballungsraum",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectEngineColumns2",
				"DeriveEngineColumns3 select(mapColumn(",
				"          market,",
				"          year,",
				"          variant,",
				"          model,",
				"          Village = {L�ndlicher Raum},",
				"          Suburbs = {Kleinst�dtischer Raum},",
				"          Town = {St�dtischer Raum},",
				"          City = Ballungsraum",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectEngineColumns3",
				"DeriveEngineColumns4 select(mapColumn(",
				"          market,",
				"          year,",
				"          variant,",
				"          model,",
				"          Village = {L�ndlicher Raum},",
				"          Suburbs = {Kleinst�dtischer Raum},",
				"          Town = {St�dtischer Raum},",
				"          City = Ballungsraum",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectEngineColumns4",
				"DeriveEngineColumns5 select(mapColumn(",
				"          market,",
				"          year,",
				"          variant,",
				"          model,",
				"          Village = {L�ndlicher Raum},",
				"          Suburbs = {Kleinst�dtischer Raum},",
				"          Town = {St�dtischer Raum},",
				"          City = Ballungsraum",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectEngineColumns5",
				"SelectGenderColumns1 derive(Village_key = 'Village',",
				"          Village_value = Village,",
				"          Suburbs_key = 'Suburbs',",
				"          Suburbs_value = Suburbs,",
				"          Town_key = 'Town',",
				"          Town_value = Town,",
				"          City_key = 'City',",
				"          City_value = City) ~> DeriveGenderKeys1",
				"SelectGenderColumns2 derive(Village_key = 'Village',",
				"          Village_value = Village,",
				"          Suburbs_key = 'Suburbs',",
				"          Suburbs_value = Suburbs,",
				"          Town_key = 'Town',",
				"          Town_value = Town,",
				"          City_key = 'City',",
				"          City_value = City) ~> DeriveGenderKeys2",
				"SelectGenderColumns3 derive(Village_key = 'Village',",
				"          Village_value = Village,",
				"          Suburbs_key = 'Suburbs',",
				"          Suburbs_value = Suburbs,",
				"          Town_key = 'Town',",
				"          Town_value = Town,",
				"          City_key = 'City',",
				"          City_value = City) ~> DeriveGenderKeys3",
				"SelectGenderColumns4 derive(Village_key = 'Village',",
				"          Village_value = Village,",
				"          Suburbs_key = 'Suburbs',",
				"          Suburbs_value = Suburbs,",
				"          Town_key = 'Town',",
				"          Town_value = Town,",
				"          City_key = 'City',",
				"          City_value = City) ~> DeriveGenderKeys4",
				"SelectGenderColumns5 derive(Village_key = 'Village',",
				"          Village_value = Village,",
				"          Suburbs_key = 'Suburbs',",
				"          Suburbs_value = Suburbs,",
				"          Town_key = 'Town',",
				"          Town_value = Town,",
				"          City_key = 'City',",
				"          City_value = City) ~> DeriveGenderKeys5",
				"SelectEngineColumns1 derive(Village_key = 'Village',",
				"          Village_value = Village,",
				"          Suburbs_key = 'Suburbs',",
				"          Suburbs_value = Suburbs,",
				"          Town_key = 'Town',",
				"          Town_value = Town,",
				"          City_key = 'City',",
				"          City_value = City) ~> DeriveEngineKeys1",
				"SelectEngineColumns2 derive(Village_key = 'Village',",
				"          Village_value = Village,",
				"          Suburbs_key = 'Suburbs',",
				"          Suburbs_value = Suburbs,",
				"          Town_key = 'Town',",
				"          Town_value = Town,",
				"          City_key = 'City',",
				"          City_value = City) ~> DeriveEngineKeys2",
				"SelectEngineColumns3 derive(Village_key = 'Village',",
				"          Village_value = Village,",
				"          Suburbs_key = 'Suburbs',",
				"          Suburbs_value = Suburbs,",
				"          Town_key = 'Town',",
				"          Town_value = Town,",
				"          City_key = 'City',",
				"          City_value = City) ~> DeriveEngineKeys3",
				"SelectEngineColumns4 derive(Village_key = 'Village',",
				"          Village_value = Village,",
				"          Suburbs_key = 'Suburbs',",
				"          Suburbs_value = Suburbs,",
				"          Town_key = 'Town',",
				"          Town_value = Town,",
				"          City_key = 'City',",
				"          City_value = City) ~> DeriveEngineKeys4",
				"SelectEngineColumns5 derive(Village_key = 'Village',",
				"          Village_value = Village,",
				"          Suburbs_key = 'Suburbs',",
				"          Suburbs_value = Suburbs,",
				"          Town_key = 'Town',",
				"          Town_value = Town,",
				"          City_key = 'City',",
				"          City_value = City) ~> DeriveEngineKeys5",
				"DeriveGenderKeys1, DeriveGenderKeys2, DeriveGenderKeys3, DeriveGenderKeys4, DeriveGenderKeys5 union(byName: true)~> UnionGenderData",
				"DeriveEngineKeys1, DeriveEngineKeys2, DeriveEngineKeys3, DeriveEngineKeys4, DeriveEngineKeys5 union(byName: true)~> UnionEngineData",
				"UnionGenderData, UnionEngineData union(byName: true)~> UnionAllData",
				"UnionAllData derive(data = @(market, year, key, value, variant, model, gender)) ~> CreateDataArray",
				"CreateDataArray aggregate(groupBy(dummy = 1),",
				"     data = collect(data)) ~> AggregateToArray",
				"AggregateToArray select(mapColumn(",
				"          data",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectDataArray"
			]
		}
	}
}