{
	"name": "newCustomerRateDE",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CAP_2019",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "CAP_2020",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "CAP_2021",
						"type": "DatasetReference"
					},
					"name": "source3"
				},
				{
					"dataset": {
						"referenceName": "CAP_2022",
						"type": "DatasetReference"
					},
					"name": "source4"
				},
				{
					"dataset": {
						"referenceName": "CAP_2023",
						"type": "DatasetReference"
					},
					"name": "source5"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "SplitModelTypes2019"
				},
				{
					"name": "SplitModelTypes2020"
				},
				{
					"name": "SplitModelTypes2021"
				},
				{
					"name": "SplitModelTypes2022"
				},
				{
					"name": "SplitModelTypes2023"
				},
				{
					"name": "DeriveGenderColumns2019"
				},
				{
					"name": "DeriveGenderColumns2020"
				},
				{
					"name": "DeriveGenderColumns2021"
				},
				{
					"name": "DeriveGenderColumns2022"
				},
				{
					"name": "DeriveGenderColumns2023"
				},
				{
					"name": "AggregateGenderData2019"
				},
				{
					"name": "AggregateGenderData2020"
				},
				{
					"name": "AggregateGenderData2021"
				},
				{
					"name": "AggregateGenderData2022"
				},
				{
					"name": "AggregateGenderData2023"
				},
				{
					"name": "DeriveEngineColumns2019"
				},
				{
					"name": "DeriveEngineColumns2020"
				},
				{
					"name": "DeriveEngineColumns2021"
				},
				{
					"name": "DeriveEngineColumns2022"
				},
				{
					"name": "DeriveEngineColumns2023"
				},
				{
					"name": "UnionAllData"
				},
				{
					"name": "CreateDataArray"
				},
				{
					"name": "AggregateToArray"
				},
				{
					"name": "SelectDataArray"
				}
			],
			"scriptLines": [
				"parameters{",
				"     market as string ('DE')",
				"}",
				"source(output(",
				"          GroupName as string,",
				"          GroupType as string,",
				"          AverageExistingCustomerAge as string,",
				"          {ExistingCustomerAge=0-30} as string,",
				"          {ExistingCustomerAge=30-50} as string,",
				"          {ExistingCustomerAge=50-100} as string,",
				"          ShareOfMen as string,",
				"          ShareOfWomen as string,",
				"          AverageHoldingPeriod as string,",
				"          AverageNumberOfPorscheInPossession as string,",
				"          {PorscheInPossession=1} as string,",
				"          {PorscheInPossession=2} as string,",
				"          {PorscheInPossession=3} as string,",
				"          {PorscheInPossession>=4} as string,",
				"          FirstTimeBuyerRate as double,",
				"          ChurnRate as string,",
				"          ConquestRate as string,",
				"          MeanKmPerYear as string,",
				"          {kmPerYear=0} as string,",
				"          {kmPerYear=500} as string,",
				"          {kmPerYear=1000} as string,",
				"          {kmPerYear=1500} as string,",
				"          {kmPerYear=2000} as string,",
				"          {kmPerYear=2500} as string,",
				"          {kmPerYear=3000} as string,",
				"          {kmPerYear=3500} as string,",
				"          {kmPerYear=4000} as string,",
				"          {kmPerYear=4500} as string,",
				"          {kmPerYear=5000} as string,",
				"          {kmPerYear=5500} as string,",
				"          {kmPerYear=6000} as string,",
				"          {kmPerYear=6500} as string,",
				"          {kmPerYear=7000} as string,",
				"          {kmPerYear=7500} as string,",
				"          {kmPerYear=8000} as string,",
				"          {kmPerYear=8500} as string,",
				"          {kmPerYear=9000} as string,",
				"          {kmPerYear=9500} as string,",
				"          {kmPerYear=10000} as string,",
				"          {kmPerYear=10500} as string,",
				"          {kmPerYear=11000} as string,",
				"          {kmPerYear=11500} as string,",
				"          {kmPerYear=12000} as string,",
				"          {kmPerYear=12500} as string,",
				"          {kmPerYear=13000} as string,",
				"          {kmPerYear=13500} as string,",
				"          {kmPerYear=14000} as string,",
				"          {kmPerYear=14500} as string,",
				"          {kmPerYear=15000} as string,",
				"          {kmPerYear=15500} as string,",
				"          {kmPerYear=16000} as string,",
				"          {kmPerYear=16500} as string,",
				"          {kmPerYear=17000} as string,",
				"          {kmPerYear=17500} as string,",
				"          {kmPerYear=18000} as string,",
				"          {kmPerYear=18500} as string,",
				"          {kmPerYear=19000} as string,",
				"          {kmPerYear=19500} as string,",
				"          {kmPerYear=20000} as string,",
				"          {kmPerYear=20500} as string,",
				"          {kmPerYear=21000} as string,",
				"          {kmPerYear=21500} as string,",
				"          {kmPerYear=22000} as string,",
				"          {kmPerYear=22500} as string,",
				"          {kmPerYear=23000} as string,",
				"          {kmPerYear=23500} as string,",
				"          {kmPerYear=24000} as string,",
				"          {kmPerYear=24500} as string,",
				"          {kmPerYear=25000} as string,",
				"          {kmPerYear=25500} as string,",
				"          {kmPerYear=26000} as string,",
				"          {kmPerYear=26500} as string,",
				"          {kmPerYear=27000} as string,",
				"          {kmPerYear=27500} as string,",
				"          {kmPerYear=28000} as string,",
				"          {kmPerYear=28500} as string,",
				"          {kmPerYear=29000} as string,",
				"          {kmPerYear=29500} as string,",
				"          {kmPerYear=30000} as string,",
				"          {kmPerYear=30500} as string,",
				"          {kmPerYear=31000} as string,",
				"          {kmPerYear=31500} as string,",
				"          {kmPerYear=32000} as string,",
				"          {kmPerYear=32500} as string,",
				"          {kmPerYear=33000} as string,",
				"          {kmPerYear=33500} as string,",
				"          {kmPerYear=34000} as string,",
				"          {kmPerYear=34500} as string,",
				"          {kmPerYear=35000} as string,",
				"          {kmPerYear=35500} as string,",
				"          {kmPerYear=36000} as string,",
				"          {kmPerYear=36500} as string,",
				"          {kmPerYear=37000} as string,",
				"          {kmPerYear=37500} as string,",
				"          {kmPerYear=38000} as string,",
				"          {kmPerYear=38500} as string,",
				"          {kmPerYear=39000} as string,",
				"          {kmPerYear=39500} as string,",
				"          {kmPerYear=40000} as string,",
				"          {kmPerYear=40500} as string,",
				"          {kmPerYear=41000} as string,",
				"          {kmPerYear=41500} as string,",
				"          {kmPerYear=42000} as string,",
				"          {kmPerYear=42500} as string,",
				"          {kmPerYear=43000} as string,",
				"          {kmPerYear=43500} as string,",
				"          {kmPerYear=44000} as string,",
				"          {kmPerYear=44500} as string,",
				"          {kmPerYear=45000} as string,",
				"          {kmPerYear=45500} as string,",
				"          {kmPerYear=46000} as string,",
				"          {kmPerYear=46500} as string,",
				"          {kmPerYear=47000} as string,",
				"          {kmPerYear=47500} as string,",
				"          {kmPerYear=48000} as string,",
				"          {kmPerYear=48500} as string,",
				"          {kmPerYear=49000} as string,",
				"          {kmPerYear=49500} as string,",
				"          {kmPerYear=50000} as string,",
				"          T4 as string,",
				"          T3 as string,",
				"          T2 as string,",
				"          T1 as string,",
				"          Anhui as string,",
				"          Beijing as string,",
				"          Chongqing as string,",
				"          Fujian as string,",
				"          Gansu as string,",
				"          Guangdong as string,",
				"          Guangxi as string,",
				"          Guizhou as string,",
				"          Hainan as string,",
				"          Hebei as string,",
				"          Heilongjiang as string,",
				"          Henan as string,",
				"          {Hong Kong} as string,",
				"          Hubei as string,",
				"          Hunan as string,",
				"          {Inner Mongolia} as string,",
				"          Jiangsu as string,",
				"          Jiangxi as string,",
				"          Jilin as string,",
				"          Liaoning as string,",
				"          Macau as string,",
				"          Ningxia as string,",
				"          Qinghai as string,",
				"          Shaanxi as string,",
				"          Shandong as string,",
				"          Shanghai as string,",
				"          Shanxi as string,",
				"          Sichuan as string,",
				"          Tianjin as string,",
				"          Tibet as string,",
				"          Xinjiang as string,",
				"          Yunnan as string,",
				"          Zhejiang as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          GroupName as string,",
				"          GroupType as string,",
				"          AverageExistingCustomerAge as string,",
				"          {ExistingCustomerAge=0-30} as string,",
				"          {ExistingCustomerAge=30-50} as string,",
				"          {ExistingCustomerAge=50-100} as string,",
				"          ShareOfMen as string,",
				"          ShareOfWomen as string,",
				"          AverageHoldingPeriod as string,",
				"          AverageNumberOfPorscheInPossession as string,",
				"          {PorscheInPossession=1} as string,",
				"          {PorscheInPossession=2} as string,",
				"          {PorscheInPossession=3} as string,",
				"          {PorscheInPossession>=4} as string,",
				"          FirstTimeBuyerRate as double,",
				"          ChurnRate as string,",
				"          ConquestRate as string,",
				"          MeanKmPerYear as string,",
				"          {kmPerYear=0} as string,",
				"          {kmPerYear=500} as string,",
				"          {kmPerYear=1000} as string,",
				"          {kmPerYear=1500} as string,",
				"          {kmPerYear=2000} as string,",
				"          {kmPerYear=2500} as string,",
				"          {kmPerYear=3000} as string,",
				"          {kmPerYear=3500} as string,",
				"          {kmPerYear=4000} as string,",
				"          {kmPerYear=4500} as string,",
				"          {kmPerYear=5000} as string,",
				"          {kmPerYear=5500} as string,",
				"          {kmPerYear=6000} as string,",
				"          {kmPerYear=6500} as string,",
				"          {kmPerYear=7000} as string,",
				"          {kmPerYear=7500} as string,",
				"          {kmPerYear=8000} as string,",
				"          {kmPerYear=8500} as string,",
				"          {kmPerYear=9000} as string,",
				"          {kmPerYear=9500} as string,",
				"          {kmPerYear=10000} as string,",
				"          {kmPerYear=10500} as string,",
				"          {kmPerYear=11000} as string,",
				"          {kmPerYear=11500} as string,",
				"          {kmPerYear=12000} as string,",
				"          {kmPerYear=12500} as string,",
				"          {kmPerYear=13000} as string,",
				"          {kmPerYear=13500} as string,",
				"          {kmPerYear=14000} as string,",
				"          {kmPerYear=14500} as string,",
				"          {kmPerYear=15000} as string,",
				"          {kmPerYear=15500} as string,",
				"          {kmPerYear=16000} as string,",
				"          {kmPerYear=16500} as string,",
				"          {kmPerYear=17000} as string,",
				"          {kmPerYear=17500} as string,",
				"          {kmPerYear=18000} as string,",
				"          {kmPerYear=18500} as string,",
				"          {kmPerYear=19000} as string,",
				"          {kmPerYear=19500} as string,",
				"          {kmPerYear=20000} as string,",
				"          {kmPerYear=20500} as string,",
				"          {kmPerYear=21000} as string,",
				"          {kmPerYear=21500} as string,",
				"          {kmPerYear=22000} as string,",
				"          {kmPerYear=22500} as string,",
				"          {kmPerYear=23000} as string,",
				"          {kmPerYear=23500} as string,",
				"          {kmPerYear=24000} as string,",
				"          {kmPerYear=24500} as string,",
				"          {kmPerYear=25000} as string,",
				"          {kmPerYear=25500} as string,",
				"          {kmPerYear=26000} as string,",
				"          {kmPerYear=26500} as string,",
				"          {kmPerYear=27000} as string,",
				"          {kmPerYear=27500} as string,",
				"          {kmPerYear=28000} as string,",
				"          {kmPerYear=28500} as string,",
				"          {kmPerYear=29000} as string,",
				"          {kmPerYear=29500} as string,",
				"          {kmPerYear=30000} as string,",
				"          {kmPerYear=30500} as string,",
				"          {kmPerYear=31000} as string,",
				"          {kmPerYear=31500} as string,",
				"          {kmPerYear=32000} as string,",
				"          {kmPerYear=32500} as string,",
				"          {kmPerYear=33000} as string,",
				"          {kmPerYear=33500} as string,",
				"          {kmPerYear=34000} as string,",
				"          {kmPerYear=34500} as string,",
				"          {kmPerYear=35000} as string,",
				"          {kmPerYear=35500} as string,",
				"          {kmPerYear=36000} as string,",
				"          {kmPerYear=36500} as string,",
				"          {kmPerYear=37000} as string,",
				"          {kmPerYear=37500} as string,",
				"          {kmPerYear=38000} as string,",
				"          {kmPerYear=38500} as string,",
				"          {kmPerYear=39000} as string,",
				"          {kmPerYear=39500} as string,",
				"          {kmPerYear=40000} as string,",
				"          {kmPerYear=40500} as string,",
				"          {kmPerYear=41000} as string,",
				"          {kmPerYear=41500} as string,",
				"          {kmPerYear=42000} as string,",
				"          {kmPerYear=42500} as string,",
				"          {kmPerYear=43000} as string,",
				"          {kmPerYear=43500} as string,",
				"          {kmPerYear=44000} as string,",
				"          {kmPerYear=44500} as string,",
				"          {kmPerYear=45000} as string,",
				"          {kmPerYear=45500} as string,",
				"          {kmPerYear=46000} as string,",
				"          {kmPerYear=46500} as string,",
				"          {kmPerYear=47000} as string,",
				"          {kmPerYear=47500} as string,",
				"          {kmPerYear=48000} as string,",
				"          {kmPerYear=48500} as string,",
				"          {kmPerYear=49000} as string,",
				"          {kmPerYear=49500} as string,",
				"          {kmPerYear=50000} as string,",
				"          T4 as string,",
				"          T3 as string,",
				"          T2 as string,",
				"          T1 as string,",
				"          Anhui as string,",
				"          Beijing as string,",
				"          Chongqing as string,",
				"          Fujian as string,",
				"          Gansu as string,",
				"          Guangdong as string,",
				"          Guangxi as string,",
				"          Guizhou as string,",
				"          Hainan as string,",
				"          Hebei as string,",
				"          Heilongjiang as string,",
				"          Henan as string,",
				"          {Hong Kong} as string,",
				"          Hubei as string,",
				"          Hunan as string,",
				"          {Inner Mongolia} as string,",
				"          Jiangsu as string,",
				"          Jiangxi as string,",
				"          Jilin as string,",
				"          Liaoning as string,",
				"          Macau as string,",
				"          Ningxia as string,",
				"          Qinghai as string,",
				"          Shaanxi as string,",
				"          Shandong as string,",
				"          Shanghai as string,",
				"          Shanxi as string,",
				"          Sichuan as string,",
				"          Tianjin as string,",
				"          Tibet as string,",
				"          Xinjiang as string,",
				"          Yunnan as string,",
				"          Zhejiang as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source(output(",
				"          GroupName as string,",
				"          GroupType as string,",
				"          AverageExistingCustomerAge as string,",
				"          {ExistingCustomerAge=0-30} as string,",
				"          {ExistingCustomerAge=30-50} as string,",
				"          {ExistingCustomerAge=50-100} as string,",
				"          ShareOfMen as string,",
				"          ShareOfWomen as string,",
				"          AverageHoldingPeriod as string,",
				"          AverageNumberOfPorscheInPossession as string,",
				"          {PorscheInPossession=1} as string,",
				"          {PorscheInPossession=2} as string,",
				"          {PorscheInPossession=3} as string,",
				"          {PorscheInPossession>=4} as string,",
				"          FirstTimeBuyerRate as double,",
				"          ChurnRate as string,",
				"          ConquestRate as string,",
				"          MeanKmPerYear as string,",
				"          {kmPerYear=0} as string,",
				"          {kmPerYear=500} as string,",
				"          {kmPerYear=1000} as string,",
				"          {kmPerYear=1500} as string,",
				"          {kmPerYear=2000} as string,",
				"          {kmPerYear=2500} as string,",
				"          {kmPerYear=3000} as string,",
				"          {kmPerYear=3500} as string,",
				"          {kmPerYear=4000} as string,",
				"          {kmPerYear=4500} as string,",
				"          {kmPerYear=5000} as string,",
				"          {kmPerYear=5500} as string,",
				"          {kmPerYear=6000} as string,",
				"          {kmPerYear=6500} as string,",
				"          {kmPerYear=7000} as string,",
				"          {kmPerYear=7500} as string,",
				"          {kmPerYear=8000} as string,",
				"          {kmPerYear=8500} as string,",
				"          {kmPerYear=9000} as string,",
				"          {kmPerYear=9500} as string,",
				"          {kmPerYear=10000} as string,",
				"          {kmPerYear=10500} as string,",
				"          {kmPerYear=11000} as string,",
				"          {kmPerYear=11500} as string,",
				"          {kmPerYear=12000} as string,",
				"          {kmPerYear=12500} as string,",
				"          {kmPerYear=13000} as string,",
				"          {kmPerYear=13500} as string,",
				"          {kmPerYear=14000} as string,",
				"          {kmPerYear=14500} as string,",
				"          {kmPerYear=15000} as string,",
				"          {kmPerYear=15500} as string,",
				"          {kmPerYear=16000} as string,",
				"          {kmPerYear=16500} as string,",
				"          {kmPerYear=17000} as string,",
				"          {kmPerYear=17500} as string,",
				"          {kmPerYear=18000} as string,",
				"          {kmPerYear=18500} as string,",
				"          {kmPerYear=19000} as string,",
				"          {kmPerYear=19500} as string,",
				"          {kmPerYear=20000} as string,",
				"          {kmPerYear=20500} as string,",
				"          {kmPerYear=21000} as string,",
				"          {kmPerYear=21500} as string,",
				"          {kmPerYear=22000} as string,",
				"          {kmPerYear=22500} as string,",
				"          {kmPerYear=23000} as string,",
				"          {kmPerYear=23500} as string,",
				"          {kmPerYear=24000} as string,",
				"          {kmPerYear=24500} as string,",
				"          {kmPerYear=25000} as string,",
				"          {kmPerYear=25500} as string,",
				"          {kmPerYear=26000} as string,",
				"          {kmPerYear=26500} as string,",
				"          {kmPerYear=27000} as string,",
				"          {kmPerYear=27500} as string,",
				"          {kmPerYear=28000} as string,",
				"          {kmPerYear=28500} as string,",
				"          {kmPerYear=29000} as string,",
				"          {kmPerYear=29500} as string,",
				"          {kmPerYear=30000} as string,",
				"          {kmPerYear=30500} as string,",
				"          {kmPerYear=31000} as string,",
				"          {kmPerYear=31500} as string,",
				"          {kmPerYear=32000} as string,",
				"          {kmPerYear=32500} as string,",
				"          {kmPerYear=33000} as string,",
				"          {kmPerYear=33500} as string,",
				"          {kmPerYear=34000} as string,",
				"          {kmPerYear=34500} as string,",
				"          {kmPerYear=35000} as string,",
				"          {kmPerYear=35500} as string,",
				"          {kmPerYear=36000} as string,",
				"          {kmPerYear=36500} as string,",
				"          {kmPerYear=37000} as string,",
				"          {kmPerYear=37500} as string,",
				"          {kmPerYear=38000} as string,",
				"          {kmPerYear=38500} as string,",
				"          {kmPerYear=39000} as string,",
				"          {kmPerYear=39500} as string,",
				"          {kmPerYear=40000} as string,",
				"          {kmPerYear=40500} as string,",
				"          {kmPerYear=41000} as string,",
				"          {kmPerYear=41500} as string,",
				"          {kmPerYear=42000} as string,",
				"          {kmPerYear=42500} as string,",
				"          {kmPerYear=43000} as string,",
				"          {kmPerYear=43500} as string,",
				"          {kmPerYear=44000} as string,",
				"          {kmPerYear=44500} as string,",
				"          {kmPerYear=45000} as string,",
				"          {kmPerYear=45500} as string,",
				"          {kmPerYear=46000} as string,",
				"          {kmPerYear=46500} as string,",
				"          {kmPerYear=47000} as string,",
				"          {kmPerYear=47500} as string,",
				"          {kmPerYear=48000} as string,",
				"          {kmPerYear=48500} as string,",
				"          {kmPerYear=49000} as string,",
				"          {kmPerYear=49500} as string,",
				"          {kmPerYear=50000} as string,",
				"          T4 as string,",
				"          T3 as string,",
				"          T2 as string,",
				"          T1 as string,",
				"          Anhui as string,",
				"          Beijing as string,",
				"          Chongqing as string,",
				"          Fujian as string,",
				"          Gansu as string,",
				"          Guangdong as string,",
				"          Guangxi as string,",
				"          Guizhou as string,",
				"          Hainan as string,",
				"          Hebei as string,",
				"          Heilongjiang as string,",
				"          Henan as string,",
				"          {Hong Kong} as string,",
				"          Hubei as string,",
				"          Hunan as string,",
				"          {Inner Mongolia} as string,",
				"          Jiangsu as string,",
				"          Jiangxi as string,",
				"          Jilin as string,",
				"          Liaoning as string,",
				"          Macau as string,",
				"          Ningxia as string,",
				"          Qinghai as string,",
				"          Shaanxi as string,",
				"          Shandong as string,",
				"          Shanghai as string,",
				"          Shanxi as string,",
				"          Sichuan as string,",
				"          Tianjin as string,",
				"          Tibet as string,",
				"          Xinjiang as string,",
				"          Yunnan as string,",
				"          Zhejiang as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source3",
				"source(output(",
				"          GroupName as string,",
				"          GroupType as string,",
				"          AverageExistingCustomerAge as string,",
				"          {ExistingCustomerAge=0-30} as string,",
				"          {ExistingCustomerAge=30-50} as string,",
				"          {ExistingCustomerAge=50-100} as string,",
				"          ShareOfMen as string,",
				"          ShareOfWomen as string,",
				"          AverageHoldingPeriod as string,",
				"          AverageNumberOfPorscheInPossession as string,",
				"          {PorscheInPossession=1} as string,",
				"          {PorscheInPossession=2} as string,",
				"          {PorscheInPossession=3} as string,",
				"          {PorscheInPossession>=4} as string,",
				"          FirstTimeBuyerRate as double,",
				"          ChurnRate as string,",
				"          ConquestRate as string,",
				"          MeanKmPerYear as string,",
				"          {kmPerYear=0} as string,",
				"          {kmPerYear=500} as string,",
				"          {kmPerYear=1000} as string,",
				"          {kmPerYear=1500} as string,",
				"          {kmPerYear=2000} as string,",
				"          {kmPerYear=2500} as string,",
				"          {kmPerYear=3000} as string,",
				"          {kmPerYear=3500} as string,",
				"          {kmPerYear=4000} as string,",
				"          {kmPerYear=4500} as string,",
				"          {kmPerYear=5000} as string,",
				"          {kmPerYear=5500} as string,",
				"          {kmPerYear=6000} as string,",
				"          {kmPerYear=6500} as string,",
				"          {kmPerYear=7000} as string,",
				"          {kmPerYear=7500} as string,",
				"          {kmPerYear=8000} as string,",
				"          {kmPerYear=8500} as string,",
				"          {kmPerYear=9000} as string,",
				"          {kmPerYear=9500} as string,",
				"          {kmPerYear=10000} as string,",
				"          {kmPerYear=10500} as string,",
				"          {kmPerYear=11000} as string,",
				"          {kmPerYear=11500} as string,",
				"          {kmPerYear=12000} as string,",
				"          {kmPerYear=12500} as string,",
				"          {kmPerYear=13000} as string,",
				"          {kmPerYear=13500} as string,",
				"          {kmPerYear=14000} as string,",
				"          {kmPerYear=14500} as string,",
				"          {kmPerYear=15000} as string,",
				"          {kmPerYear=15500} as string,",
				"          {kmPerYear=16000} as string,",
				"          {kmPerYear=16500} as string,",
				"          {kmPerYear=17000} as string,",
				"          {kmPerYear=17500} as string,",
				"          {kmPerYear=18000} as string,",
				"          {kmPerYear=18500} as string,",
				"          {kmPerYear=19000} as string,",
				"          {kmPerYear=19500} as string,",
				"          {kmPerYear=20000} as string,",
				"          {kmPerYear=20500} as string,",
				"          {kmPerYear=21000} as string,",
				"          {kmPerYear=21500} as string,",
				"          {kmPerYear=22000} as string,",
				"          {kmPerYear=22500} as string,",
				"          {kmPerYear=23000} as string,",
				"          {kmPerYear=23500} as string,",
				"          {kmPerYear=24000} as string,",
				"          {kmPerYear=24500} as string,",
				"          {kmPerYear=25000} as string,",
				"          {kmPerYear=25500} as string,",
				"          {kmPerYear=26000} as string,",
				"          {kmPerYear=26500} as string,",
				"          {kmPerYear=27000} as string,",
				"          {kmPerYear=27500} as string,",
				"          {kmPerYear=28000} as string,",
				"          {kmPerYear=28500} as string,",
				"          {kmPerYear=29000} as string,",
				"          {kmPerYear=29500} as string,",
				"          {kmPerYear=30000} as string,",
				"          {kmPerYear=30500} as string,",
				"          {kmPerYear=31000} as string,",
				"          {kmPerYear=31500} as string,",
				"          {kmPerYear=32000} as string,",
				"          {kmPerYear=32500} as string,",
				"          {kmPerYear=33000} as string,",
				"          {kmPerYear=33500} as string,",
				"          {kmPerYear=34000} as string,",
				"          {kmPerYear=34500} as string,",
				"          {kmPerYear=35000} as string,",
				"          {kmPerYear=35500} as string,",
				"          {kmPerYear=36000} as string,",
				"          {kmPerYear=36500} as string,",
				"          {kmPerYear=37000} as string,",
				"          {kmPerYear=37500} as string,",
				"          {kmPerYear=38000} as string,",
				"          {kmPerYear=38500} as string,",
				"          {kmPerYear=39000} as string,",
				"          {kmPerYear=39500} as string,",
				"          {kmPerYear=40000} as string,",
				"          {kmPerYear=40500} as string,",
				"          {kmPerYear=41000} as string,",
				"          {kmPerYear=41500} as string,",
				"          {kmPerYear=42000} as string,",
				"          {kmPerYear=42500} as string,",
				"          {kmPerYear=43000} as string,",
				"          {kmPerYear=43500} as string,",
				"          {kmPerYear=44000} as string,",
				"          {kmPerYear=44500} as string,",
				"          {kmPerYear=45000} as string,",
				"          {kmPerYear=45500} as string,",
				"          {kmPerYear=46000} as string,",
				"          {kmPerYear=46500} as string,",
				"          {kmPerYear=47000} as string,",
				"          {kmPerYear=47500} as string,",
				"          {kmPerYear=48000} as string,",
				"          {kmPerYear=48500} as string,",
				"          {kmPerYear=49000} as string,",
				"          {kmPerYear=49500} as string,",
				"          {kmPerYear=50000} as string,",
				"          T4 as string,",
				"          T3 as string,",
				"          T2 as string,",
				"          T1 as string,",
				"          Anhui as string,",
				"          Beijing as string,",
				"          Chongqing as string,",
				"          Fujian as string,",
				"          Gansu as string,",
				"          Guangdong as string,",
				"          Guangxi as string,",
				"          Guizhou as string,",
				"          Hainan as string,",
				"          Hebei as string,",
				"          Heilongjiang as string,",
				"          Henan as string,",
				"          {Hong Kong} as string,",
				"          Hubei as string,",
				"          Hunan as string,",
				"          {Inner Mongolia} as string,",
				"          Jiangsu as string,",
				"          Jiangxi as string,",
				"          Jilin as string,",
				"          Liaoning as string,",
				"          Macau as string,",
				"          Ningxia as string,",
				"          Qinghai as string,",
				"          Shaanxi as string,",
				"          Shandong as string,",
				"          Shanghai as string,",
				"          Shanxi as string,",
				"          Sichuan as string,",
				"          Tianjin as string,",
				"          Tibet as string,",
				"          Xinjiang as string,",
				"          Yunnan as string,",
				"          Zhejiang as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source4",
				"source(output(",
				"          GroupName as string,",
				"          GroupType as string,",
				"          AverageExistingCustomerAge as string,",
				"          {ExistingCustomerAge=0-30} as string,",
				"          {ExistingCustomerAge=30-50} as string,",
				"          {ExistingCustomerAge=50-100} as string,",
				"          ShareOfMen as string,",
				"          ShareOfWomen as string,",
				"          AverageHoldingPeriod as string,",
				"          AverageNumberOfPorscheInPossession as string,",
				"          {PorscheInPossession=1} as string,",
				"          {PorscheInPossession=2} as string,",
				"          {PorscheInPossession=3} as string,",
				"          {PorscheInPossession>=4} as string,",
				"          FirstTimeBuyerRate as double,",
				"          ChurnRate as string,",
				"          ConquestRate as string,",
				"          MeanKmPerYear as string,",
				"          {kmPerYear=0} as string,",
				"          {kmPerYear=500} as string,",
				"          {kmPerYear=1000} as string,",
				"          {kmPerYear=1500} as string,",
				"          {kmPerYear=2000} as string,",
				"          {kmPerYear=2500} as string,",
				"          {kmPerYear=3000} as string,",
				"          {kmPerYear=3500} as string,",
				"          {kmPerYear=4000} as string,",
				"          {kmPerYear=4500} as string,",
				"          {kmPerYear=5000} as string,",
				"          {kmPerYear=5500} as string,",
				"          {kmPerYear=6000} as string,",
				"          {kmPerYear=6500} as string,",
				"          {kmPerYear=7000} as string,",
				"          {kmPerYear=7500} as string,",
				"          {kmPerYear=8000} as string,",
				"          {kmPerYear=8500} as string,",
				"          {kmPerYear=9000} as string,",
				"          {kmPerYear=9500} as string,",
				"          {kmPerYear=10000} as string,",
				"          {kmPerYear=10500} as string,",
				"          {kmPerYear=11000} as string,",
				"          {kmPerYear=11500} as string,",
				"          {kmPerYear=12000} as string,",
				"          {kmPerYear=12500} as string,",
				"          {kmPerYear=13000} as string,",
				"          {kmPerYear=13500} as string,",
				"          {kmPerYear=14000} as string,",
				"          {kmPerYear=14500} as string,",
				"          {kmPerYear=15000} as string,",
				"          {kmPerYear=15500} as string,",
				"          {kmPerYear=16000} as string,",
				"          {kmPerYear=16500} as string,",
				"          {kmPerYear=17000} as string,",
				"          {kmPerYear=17500} as string,",
				"          {kmPerYear=18000} as string,",
				"          {kmPerYear=18500} as string,",
				"          {kmPerYear=19000} as string,",
				"          {kmPerYear=19500} as string,",
				"          {kmPerYear=20000} as string,",
				"          {kmPerYear=20500} as string,",
				"          {kmPerYear=21000} as string,",
				"          {kmPerYear=21500} as string,",
				"          {kmPerYear=22000} as string,",
				"          {kmPerYear=22500} as string,",
				"          {kmPerYear=23000} as string,",
				"          {kmPerYear=23500} as string,",
				"          {kmPerYear=24000} as string,",
				"          {kmPerYear=24500} as string,",
				"          {kmPerYear=25000} as string,",
				"          {kmPerYear=25500} as string,",
				"          {kmPerYear=26000} as string,",
				"          {kmPerYear=26500} as string,",
				"          {kmPerYear=27000} as string,",
				"          {kmPerYear=27500} as string,",
				"          {kmPerYear=28000} as string,",
				"          {kmPerYear=28500} as string,",
				"          {kmPerYear=29000} as string,",
				"          {kmPerYear=29500} as string,",
				"          {kmPerYear=30000} as string,",
				"          {kmPerYear=30500} as string,",
				"          {kmPerYear=31000} as string,",
				"          {kmPerYear=31500} as string,",
				"          {kmPerYear=32000} as string,",
				"          {kmPerYear=32500} as string,",
				"          {kmPerYear=33000} as string,",
				"          {kmPerYear=33500} as string,",
				"          {kmPerYear=34000} as string,",
				"          {kmPerYear=34500} as string,",
				"          {kmPerYear=35000} as string,",
				"          {kmPerYear=35500} as string,",
				"          {kmPerYear=36000} as string,",
				"          {kmPerYear=36500} as string,",
				"          {kmPerYear=37000} as string,",
				"          {kmPerYear=37500} as string,",
				"          {kmPerYear=38000} as string,",
				"          {kmPerYear=38500} as string,",
				"          {kmPerYear=39000} as string,",
				"          {kmPerYear=39500} as string,",
				"          {kmPerYear=40000} as string,",
				"          {kmPerYear=40500} as string,",
				"          {kmPerYear=41000} as string,",
				"          {kmPerYear=41500} as string,",
				"          {kmPerYear=42000} as string,",
				"          {kmPerYear=42500} as string,",
				"          {kmPerYear=43000} as string,",
				"          {kmPerYear=43500} as string,",
				"          {kmPerYear=44000} as string,",
				"          {kmPerYear=44500} as string,",
				"          {kmPerYear=45000} as string,",
				"          {kmPerYear=45500} as string,",
				"          {kmPerYear=46000} as string,",
				"          {kmPerYear=46500} as string,",
				"          {kmPerYear=47000} as string,",
				"          {kmPerYear=47500} as string,",
				"          {kmPerYear=48000} as string,",
				"          {kmPerYear=48500} as string,",
				"          {kmPerYear=49000} as string,",
				"          {kmPerYear=49500} as string,",
				"          {kmPerYear=50000} as string,",
				"          T4 as string,",
				"          T3 as string,",
				"          T2 as string,",
				"          T1 as string,",
				"          Anhui as string,",
				"          Beijing as string,",
				"          Chongqing as string,",
				"          Fujian as string,",
				"          Gansu as string,",
				"          Guangdong as string,",
				"          Guangxi as string,",
				"          Guizhou as string,",
				"          Hainan as string,",
				"          Hebei as string,",
				"          Heilongjiang as string,",
				"          Henan as string,",
				"          {Hong Kong} as string,",
				"          Hubei as string,",
				"          Hunan as string,",
				"          {Inner Mongolia} as string,",
				"          Jiangsu as string,",
				"          Jiangxi as string,",
				"          Jilin as string,",
				"          Liaoning as string,",
				"          Macau as string,",
				"          Ningxia as string,",
				"          Qinghai as string,",
				"          Shaanxi as string,",
				"          Shandong as string,",
				"          Shanghai as string,",
				"          Shanxi as string,",
				"          Sichuan as string,",
				"          Tianjin as string,",
				"          Tibet as string,",
				"          Xinjiang as string,",
				"          Yunnan as string,",
				"          Zhejiang as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source5",
				"source1 split(GroupType == 'Model/Gender',",
				"     GroupType == 'Model/Engine' || GroupType == 'Model/Body',",
				"     disjoint: false) ~> SplitModelTypes2019@(ModelGender, ModelEngine)",
				"source2 split(GroupType == 'Model/Gender',",
				"     GroupType == 'Model/Engine' || GroupType == 'Model/Body',",
				"     disjoint: false) ~> SplitModelTypes2020@(ModelGender, ModelEngine)",
				"source3 split(GroupType == 'Model/Gender',",
				"     GroupType == 'Model/Engine' || GroupType == 'Model/Body',",
				"     disjoint: false) ~> SplitModelTypes2021@(ModelGender, ModelEngine)",
				"source4 split(GroupType == 'Model/Gender',",
				"     GroupType == 'Model/Engine' || GroupType == 'Model/Body',",
				"     disjoint: false) ~> SplitModelTypes2022@(ModelGender, ModelEngine)",
				"source5 split(GroupType == 'Model/Gender',",
				"     GroupType == 'Model/Engine' || GroupType == 'Model/Body',",
				"     disjoint: false) ~> SplitModelTypes2023@(ModelGender, ModelEngine)",
				"SplitModelTypes2019@ModelGender derive(market = 'DE',",
				"          year = '2019',",
				"          variant = 'All',",
				"          model = iif(GroupName == 'Porsche/Female' || GroupName == 'Porsche/Male', 'All Models',",
				"      iif(locate(' ', split(GroupName, '/')[1]) > 0,",
				"        concat(",
				"           trim(split(split(GroupName, '/')[1], ' ')[1]),",
				"           ' All ',",
				"           trim(substring(split(GroupName, '/')[1], locate(' ', split(GroupName, '/')[1]) + 1, 100))",
				"        ),",
				"        concat(split(GroupName, '/')[1], ' All')",
				"      )",
				"    ),",
				"          male = iif(endsWith(GroupName, '/Male'), FirstTimeBuyerRate, toDouble(0)),",
				"          female = iif(endsWith(GroupName, '/Female'), FirstTimeBuyerRate, toDouble(0))) ~> DeriveGenderColumns2019",
				"SplitModelTypes2020@ModelGender derive(market = 'DE',",
				"          year = '2020',",
				"          variant = 'All',",
				"          model = iif(GroupName == 'Porsche/Female' || GroupName == 'Porsche/Male', 'All Models',",
				"      iif(locate(' ', split(GroupName, '/')[1]) > 0,",
				"        concat(",
				"           trim(split(split(GroupName, '/')[1], ' ')[1]),",
				"           ' All ',",
				"           trim(substring(split(GroupName, '/')[1], locate(' ', split(GroupName, '/')[1]) + 1, 100))",
				"        ),",
				"        concat(split(GroupName, '/')[1], ' All')",
				"      )",
				"    ),",
				"          male = iif(endsWith(GroupName, '/Male'), FirstTimeBuyerRate, toDouble(0)),",
				"          female = iif(endsWith(GroupName, '/Female'), FirstTimeBuyerRate, toDouble(0))) ~> DeriveGenderColumns2020",
				"SplitModelTypes2021@ModelGender derive(market = 'DE',",
				"          year = '2021',",
				"          variant = 'All',",
				"          model = iif(GroupName == 'Porsche/Female' || GroupName == 'Porsche/Male', 'All Models',",
				"      iif(locate(' ', split(GroupName, '/')[1]) > 0,",
				"        concat(",
				"           trim(split(split(GroupName, '/')[1], ' ')[1]),",
				"           ' All ',",
				"           trim(substring(split(GroupName, '/')[1], locate(' ', split(GroupName, '/')[1]) + 1, 100))",
				"        ),",
				"        concat(split(GroupName, '/')[1], ' All')",
				"      )",
				"    ),",
				"          male = iif(endsWith(GroupName, '/Male'), FirstTimeBuyerRate, toDouble(0)),",
				"          female = iif(endsWith(GroupName, '/Female'), FirstTimeBuyerRate, toDouble(0))) ~> DeriveGenderColumns2021",
				"SplitModelTypes2022@ModelGender derive(market = 'DE',",
				"          year = '2022',",
				"          variant = 'All',",
				"          model = iif(GroupName == 'Porsche/Female' || GroupName == 'Porsche/Male', 'All Models',",
				"      iif(locate(' ', split(GroupName, '/')[1]) > 0,",
				"        concat(",
				"           trim(split(split(GroupName, '/')[1], ' ')[1]),",
				"           ' All ',",
				"           trim(substring(split(GroupName, '/')[1], locate(' ', split(GroupName, '/')[1]) + 1, 100))",
				"        ),",
				"        concat(split(GroupName, '/')[1], ' All')",
				"      )",
				"    ),",
				"          male = iif(endsWith(GroupName, '/Male'), FirstTimeBuyerRate, toDouble(0)),",
				"          female = iif(endsWith(GroupName, '/Female'), FirstTimeBuyerRate, toDouble(0))) ~> DeriveGenderColumns2022",
				"SplitModelTypes2023@ModelGender derive(market = 'DE',",
				"          year = '2023',",
				"          variant = 'All',",
				"          model = iif(GroupName == 'Porsche/Female' || GroupName == 'Porsche/Male', 'All Models',",
				"      iif(locate(' ', split(GroupName, '/')[1]) > 0,",
				"        concat(",
				"           trim(split(split(GroupName, '/')[1], ' ')[1]),",
				"           ' All ',",
				"           trim(substring(split(GroupName, '/')[1], locate(' ', split(GroupName, '/')[1]) + 1, 100))",
				"        ),",
				"        concat(split(GroupName, '/')[1], ' All')",
				"      )",
				"    ),",
				"          male = iif(endsWith(GroupName, '/Male'), FirstTimeBuyerRate, toDouble(0)),",
				"          female = iif(endsWith(GroupName, '/Female'), FirstTimeBuyerRate, toDouble(0))) ~> DeriveGenderColumns2023",
				"DeriveGenderColumns2019 aggregate(groupBy(market,",
				"          year,",
				"          model),",
				"     male = max(male),",
				"          female = max(female),",
				"          total = (max(male) + max(female)) / 2) ~> AggregateGenderData2019",
				"DeriveGenderColumns2020 aggregate(groupBy(market,",
				"          year,",
				"          model),",
				"     male = max(male),",
				"          female = max(female),",
				"          total = (max(male) + max(female)) / 2) ~> AggregateGenderData2020",
				"DeriveGenderColumns2021 aggregate(groupBy(market,",
				"          year,",
				"          model),",
				"     male = max(male),",
				"          female = max(female),",
				"          total = (max(male) + max(female)) / 2) ~> AggregateGenderData2021",
				"DeriveGenderColumns2022 aggregate(groupBy(market,",
				"          year,",
				"          model),",
				"     male = max(male),",
				"          female = max(female),",
				"          total = (max(male) + max(female)) / 2) ~> AggregateGenderData2022",
				"DeriveGenderColumns2023 aggregate(groupBy(market,",
				"          year,",
				"          model),",
				"     male = max(male),",
				"          female = max(female),",
				"          total = (max(male) + max(female)) / 2) ~> AggregateGenderData2023",
				"SplitModelTypes2019@ModelEngine derive(market = 'DE',",
				"          year = '2019',",
				"          model = replace(GroupName, '/', ' '),",
				"          total = FirstTimeBuyerRate) ~> DeriveEngineColumns2019",
				"SplitModelTypes2020@ModelEngine derive(market = 'DE',",
				"          year = '2020',",
				"          model = replace(GroupName, '/', ' '),",
				"          total = FirstTimeBuyerRate) ~> DeriveEngineColumns2020",
				"SplitModelTypes2021@ModelEngine derive(market = 'DE',",
				"          year = '2021',",
				"          model = replace(GroupName, '/', ' '),",
				"          total = FirstTimeBuyerRate) ~> DeriveEngineColumns2021",
				"SplitModelTypes2022@ModelEngine derive(market = 'DE',",
				"          year = '2022',",
				"          model = replace(GroupName, '/', ' '),",
				"          total = FirstTimeBuyerRate) ~> DeriveEngineColumns2022",
				"SplitModelTypes2023@ModelEngine derive(market = 'DE',",
				"          year = '2023',",
				"          model = replace(GroupName, '/', ' '),",
				"          total = FirstTimeBuyerRate) ~> DeriveEngineColumns2023",
				"AggregateGenderData2019, AggregateGenderData2020, AggregateGenderData2021, AggregateGenderData2022, AggregateGenderData2023, DeriveEngineColumns2019, DeriveEngineColumns2020, DeriveEngineColumns2021, DeriveEngineColumns2022, DeriveEngineColumns2023 union(byName: true)~> UnionAllData",
				"UnionAllData derive(data = @(market, year, model, male, female, total)) ~> CreateDataArray",
				"CreateDataArray aggregate(groupBy(dummy = 1),",
				"     data = collect(data)) ~> AggregateToArray",
				"AggregateToArray select(mapColumn(",
				"          data",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectDataArray",
				"SelectDataArray sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'json',",
				"     fileSystem: 'output',",
				"     partitionFileNames:['newCustomerRateChartDE.json'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}