{
	"name": "areaOfLivingCn2019",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CAP_CN",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "SplitModelTypes"
				},
				{
					"name": "DeriveGenderColumns"
				},
				{
					"name": "DeriveEngineColumns"
				},
				{
					"name": "SelectGenderColumns"
				},
				{
					"name": "SelectEngineColumns"
				},
				{
					"name": "DeriveGenderKeys"
				},
				{
					"name": "DeriveEngineKeys"
				},
				{
					"name": "SelectVillageGender"
				},
				{
					"name": "SelectSuburbsGender"
				},
				{
					"name": "SelectTownGender"
				},
				{
					"name": "SelectCityGender"
				},
				{
					"name": "SelectVillageEngine"
				},
				{
					"name": "SelectSuburbsEngine"
				},
				{
					"name": "SelectTownEngine"
				},
				{
					"name": "SelectCityEngine"
				},
				{
					"name": "UnionGenderData"
				},
				{
					"name": "UnionEngineData"
				},
				{
					"name": "UnionAllData"
				},
				{
					"name": "CreateDataArray"
				},
				{
					"name": "AggregateToArray"
				},
				{
					"name": "SelectDataArray"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Source.Name;GroupName;GroupType;AverageExistingCustomerAge;ExistingCustomerAge=0-30;ExistingCustomerAge=30-50;ExistingCustomerAge=50-100;ShareOfMen;ShareOfWomen;AverageHoldingPeriod;AverageNumberOfPorscheInPossession;PorscheInPossession=1;PorscheInPossession=2;PorscheInPossession=3;PorscheInPossession>=4;FirstTimeBuyerRate;ChurnRate;ConquestRate;MeanKmPerYear;kmPerYear=0;kmPerYear=500;kmPerYear=1000;kmPerYear=1500;kmPerYear=2000;kmPerYear=2500;kmPerYear=3000;kmPerYear=3500;kmPerYear=4000;kmPerYear=4500;kmPerYear=5000;kmPerYear=5500;kmPerYear=6000;kmPerYear=6500;kmPerYear=7000;kmPerYear=7500;kmPerYear=8000;kmPerYear=8500;kmPerYear=9000;kmPerYear=9500;kmPerYear=10000;kmPerYear=10500;kmPerYear=11000;kmPerYear=11500;kmPerYear=12000;kmPerYear=12500;kmPerYear=13000;kmPerYear=13500;kmPerYear=14000;kmPerYear=14500;kmPerYear=15000;kmPerYear=15500;kmPerYear=16000;kmPerYear=16500;kmPerYear=17000;kmPerYear=17500;kmPerYear=18000;kmPerYear=18500;kmPerYear=19000;kmPerYear=19500;kmPerYear=20000;kmPerYear=20500;kmPerYear=21000;kmPerYear=21500;kmPerYear=22000;kmPerYear=22500;kmPerYear=23000;kmPerYear=23500;kmPerYear=24000;kmPerYear=24500;kmPerYear=25000;kmPerYear=25500;kmPerYear=26000;kmPerYear=26500;kmPerYear=27000;kmPerYear=27500;kmPerYear=28000;kmPerYear=28500;kmPerYear=29000;kmPerYear=29500;kmPerYear=30000;kmPerYear=30500;kmPerYear=31000;kmPerYear=31500;kmPerYear=32000;kmPerYear=32500;kmPerYear=33000;kmPerYear=33500;kmPerYear=34000;kmPerYear=34500;kmPerYear=35000;kmPerYear=35500;kmPerYear=36000;kmPerYear=36500;kmPerYear=37000;kmPerYear=37500;kmPerYear=38000;kmPerYear=38500;kmPerYear=39000;kmPerYear=39500;kmPerYear=40000;kmPerYear=40500;kmPerYear=41000;kmPerYear=41500;kmPerYear=42000;kmPerYear=42500;kmPerYear=43000;kmPerYear=43500;kmPerYear=44000;kmPerYear=44500;kmPerYear=45000;kmPerYear=45500;kmPerYear=46000;kmPerYear=46500;kmPerYear=47000;kmPerYear=47500;kmPerYear=48000;kmPerYear=48500;kmPerYear=49000;kmPerYear=49500;kmPerYear=50000;T4;T3;T2;T1;Anhui;Beijing;Chongqing;Fujian;Gansu;Guangdong;Guangxi;Guizhou;Hainan;Hebei;Heilongjiang;Henan;Hong Kong;Hubei;Hunan;Inner Mongolia;Jiangsu;Jiangxi;Jilin;Liaoning;Macau;Ningxia;Qinghai;Shaanxi;Shandong;Shanghai;Shanxi;Sichuan;Tianjin;Tibet;Xinjiang;Yunnan;Zhejiang} as string,",
				"          Prop_1 as string,",
				"          Prop_2 as string,",
				"          Prop_3 as string,",
				"          Prop_4 as string,",
				"          Prop_5 as string,",
				"          Prop_6 as string,",
				"          Prop_7 as string,",
				"          Prop_8 as string,",
				"          Prop_9 as string,",
				"          Prop_10 as string,",
				"          Prop_11 as string,",
				"          Prop_12 as string,",
				"          Prop_13 as string,",
				"          Prop_14 as string,",
				"          Prop_15 as string,",
				"          Prop_16 as string,",
				"          Prop_17 as string,",
				"          Prop_18 as string,",
				"          Prop_19 as string,",
				"          Prop_20 as string,",
				"          Prop_21 as string,",
				"          Prop_22 as string,",
				"          Prop_23 as string,",
				"          Prop_24 as string,",
				"          Prop_25 as string,",
				"          Prop_26 as string,",
				"          Prop_27 as string,",
				"          Prop_28 as string,",
				"          Prop_29 as string,",
				"          Prop_30 as string,",
				"          Prop_31 as string,",
				"          Prop_32 as string,",
				"          Prop_33 as string,",
				"          Prop_34 as string,",
				"          Prop_35 as string,",
				"          Prop_36 as string,",
				"          Prop_37 as string,",
				"          Prop_38 as string,",
				"          Prop_39 as string,",
				"          Prop_40 as string,",
				"          Prop_41 as string,",
				"          Prop_42 as string,",
				"          Prop_43 as string,",
				"          Prop_44 as string,",
				"          Prop_45 as string,",
				"          Prop_46 as string,",
				"          Prop_47 as string,",
				"          Prop_48 as string,",
				"          Prop_49 as string,",
				"          Prop_50 as string,",
				"          Prop_51 as string,",
				"          Prop_52 as string,",
				"          Prop_53 as string,",
				"          Prop_54 as string,",
				"          Prop_55 as string,",
				"          Prop_56 as string,",
				"          Prop_57 as string,",
				"          Prop_58 as string,",
				"          Prop_59 as string,",
				"          Prop_60 as string,",
				"          Prop_61 as string,",
				"          Prop_62 as string,",
				"          Prop_63 as string,",
				"          Prop_64 as string,",
				"          Prop_65 as string,",
				"          Prop_66 as string,",
				"          Prop_67 as string,",
				"          Prop_68 as string,",
				"          Prop_69 as string,",
				"          Prop_70 as string,",
				"          Prop_71 as string,",
				"          Prop_72 as string,",
				"          Prop_73 as string,",
				"          Prop_74 as string,",
				"          Prop_75 as string,",
				"          Prop_76 as string,",
				"          Prop_77 as string,",
				"          Prop_78 as string,",
				"          Prop_79 as string,",
				"          Prop_80 as string,",
				"          Prop_81 as string,",
				"          Prop_82 as string,",
				"          Prop_83 as string,",
				"          Prop_84 as string,",
				"          Prop_85 as string,",
				"          Prop_86 as string,",
				"          Prop_87 as string,",
				"          Prop_88 as string,",
				"          Prop_89 as string,",
				"          Prop_90 as string,",
				"          Prop_91 as string,",
				"          Prop_92 as string,",
				"          Prop_93 as string,",
				"          Prop_94 as string,",
				"          Prop_95 as string,",
				"          Prop_96 as string,",
				"          Prop_97 as string,",
				"          Prop_98 as string,",
				"          Prop_99 as string,",
				"          Prop_100 as string,",
				"          Prop_101 as string,",
				"          Prop_102 as string,",
				"          Prop_103 as string,",
				"          Prop_104 as string,",
				"          Prop_105 as string,",
				"          Prop_106 as string,",
				"          Prop_107 as string,",
				"          Prop_108 as string,",
				"          Prop_109 as string,",
				"          Prop_110 as string,",
				"          Prop_111 as string,",
				"          Prop_112 as string,",
				"          Prop_113 as string,",
				"          Prop_114 as string,",
				"          Prop_115 as string,",
				"          Prop_116 as string,",
				"          Prop_117 as string,",
				"          Prop_118 as string,",
				"          Prop_119 as string,",
				"          Prop_120 as string,",
				"          Prop_121 as string,",
				"          Prop_122 as string,",
				"          Prop_123 as string,",
				"          Prop_124 as string,",
				"          Prop_125 as string,",
				"          Prop_126 as string,",
				"          Prop_127 as string,",
				"          Prop_128 as string,",
				"          Prop_129 as string,",
				"          Prop_130 as string,",
				"          Prop_131 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 split(GroupType == 'Model/Gender',",
				"     GroupType == 'Model/Engine',",
				"     disjoint: false) ~> SplitModelTypes@(ModelGender, ModelEngine)",
				"SplitModelTypes@ModelGender derive(market = 'CN',",
				"          year = '2019',",
				"          variant = 'All',",
				"          model = iif(GroupName == 'Porsche/Female' || GroupName == 'Porsche/Male', 'All Models',",
				"             iif(startsWith(split(GroupName, '/')[1], '7') || startsWith(split(GroupName, '/')[1], '9'),",
				"                concat('_', split(GroupName, '/')[1]),",
				"                split(GroupName, '/')[1])),",
				"          gender = iif(endsWith(GroupName, '/Female'), 'female', 'male')) ~> DeriveGenderColumns",
				"SplitModelTypes@ModelEngine derive(market = 'CN',",
				"          year = '2019',",
				"          variant = trim(split(GroupName, '/')[2]),",
				"          model = iif(startsWith(split(GroupName, '/')[1], '7') || startsWith(split(GroupName, '/')[1], '9'),",
				"        concat('_', split(GroupName, '/')[1]),",
				"        split(GroupName, '/')[1])) ~> DeriveEngineColumns",
				"DeriveGenderColumns select(mapColumn(",
				"          market,",
				"          year,",
				"          variant,",
				"          model,",
				"          gender,",
				"          Village = T4,",
				"          Suburbs = T3,",
				"          Town = T2,",
				"          City = T1",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectGenderColumns",
				"DeriveEngineColumns select(mapColumn(",
				"          market,",
				"          year,",
				"          variant,",
				"          model,",
				"          Village = T4,",
				"          Suburbs = T3,",
				"          Town = T2,",
				"          City = T1",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectEngineColumns",
				"SelectGenderColumns derive(Village_key = 'Village',",
				"          Village_value = Village,",
				"          Suburbs_key = 'Suburbs',",
				"          Suburbs_value = Suburbs,",
				"          Town_key = 'Town',",
				"          Town_value = Town,",
				"          City_key = 'City',",
				"          City_value = City) ~> DeriveGenderKeys",
				"SelectEngineColumns derive(Village_key = 'Village',",
				"          Village_value = Village,",
				"          Suburbs_key = 'Suburbs',",
				"          Suburbs_value = Suburbs,",
				"          Town_key = 'Town',",
				"          Town_value = Town,",
				"          City_key = 'City',",
				"          City_value = City) ~> DeriveEngineKeys",
				"DeriveGenderKeys select(mapColumn(",
				"          market,",
				"          year,",
				"          variant,",
				"          model,",
				"          gender,",
				"          key = Village_key,",
				"          value = Village_value",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectVillageGender",
				"DeriveGenderKeys select(mapColumn(",
				"          market,",
				"          year,",
				"          variant,",
				"          model,",
				"          gender,",
				"          key = Suburbs_key,",
				"          value = Suburbs_value",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectSuburbsGender",
				"DeriveGenderKeys select(mapColumn(",
				"          market,",
				"          year,",
				"          variant,",
				"          model,",
				"          gender,",
				"          key = Town_key,",
				"          value = Town_value",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectTownGender",
				"DeriveGenderKeys select(mapColumn(",
				"          market,",
				"          year,",
				"          variant,",
				"          model,",
				"          gender,",
				"          key = City_key,",
				"          value = City_value",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectCityGender",
				"DeriveEngineKeys select(mapColumn(",
				"          market,",
				"          year,",
				"          variant,",
				"          model,",
				"          key = Village_key,",
				"          value = Village_value",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectVillageEngine",
				"DeriveEngineKeys select(mapColumn(",
				"          market,",
				"          year,",
				"          variant,",
				"          model,",
				"          key = Suburbs_key,",
				"          value = Suburbs_value",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectSuburbsEngine",
				"DeriveEngineKeys select(mapColumn(",
				"          market,",
				"          year,",
				"          variant,",
				"          model,",
				"          key = Town_key,",
				"          value = Town_value",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectTownEngine",
				"DeriveEngineKeys select(mapColumn(",
				"          market,",
				"          year,",
				"          variant,",
				"          model,",
				"          key = City_key,",
				"          value = City_value",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectCityEngine",
				"SelectVillageGender, SelectSuburbsGender, SelectTownGender, SelectCityGender union(byName: true)~> UnionGenderData",
				"SelectVillageEngine, SelectSuburbsEngine, SelectTownEngine, SelectCityEngine union(byName: true)~> UnionEngineData",
				"UnionGenderData, UnionEngineData union(byName: true)~> UnionAllData",
				"UnionAllData derive(data = @(market, year, key, value, variant, model, gender)) ~> CreateDataArray",
				"CreateDataArray aggregate(groupBy(dummy = 1),",
				"     data = collect(data)) ~> AggregateToArray",
				"AggregateToArray select(mapColumn(",
				"          data",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectDataArray",
				"SelectDataArray sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'json',",
				"     fileSystem: 'output',",
				"     partitionFileNames:['cityTypeChartCN.json'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}