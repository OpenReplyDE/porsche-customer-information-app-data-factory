{
	"name": "totalCustomerBaseGenderDataCN",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CAP_CN_2019",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "CAP_CN_2020",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "CAP_CN_2021",
						"type": "DatasetReference"
					},
					"name": "source3"
				},
				{
					"dataset": {
						"referenceName": "CAP_CN_2022",
						"type": "DatasetReference"
					},
					"name": "source4"
				},
				{
					"dataset": {
						"referenceName": "CAP_CN_2023",
						"type": "DatasetReference"
					},
					"name": "source5"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "SplitModelTypes2019"
				},
				{
					"name": "SplitModelTypes2020"
				},
				{
					"name": "SplitModelTypes2021"
				},
				{
					"name": "SplitModelTypes2022"
				},
				{
					"name": "SplitModelTypes2023"
				},
				{
					"name": "DeriveModelColumns2019"
				},
				{
					"name": "DeriveModelColumns2020"
				},
				{
					"name": "DeriveModelColumns2021"
				},
				{
					"name": "DeriveModelColumns2022"
				},
				{
					"name": "DeriveModelColumns2023"
				},
				{
					"name": "DeriveEngineColumns2019"
				},
				{
					"name": "DeriveEngineColumns2020"
				},
				{
					"name": "DeriveEngineColumns2021"
				},
				{
					"name": "DeriveEngineColumns2022"
				},
				{
					"name": "DeriveEngineColumns2023"
				},
				{
					"name": "UnionAllData"
				},
				{
					"name": "SelectFinalColumns"
				},
				{
					"name": "CreateDataArray"
				},
				{
					"name": "AggregateToArray"
				},
				{
					"name": "SelectDataArray"
				}
			],
			"scriptLines": [
				"source(output(",
				"          GroupName as string,",
				"          GroupType as string,",
				"          ShareOfMen as double,",
				"          ShareOfWomen as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          GroupName as string,",
				"          GroupType as string,",
				"          ShareOfMen as double,",
				"          ShareOfWomen as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source(output(",
				"          GroupName as string,",
				"          GroupType as string,",
				"          ShareOfMen as double,",
				"          ShareOfWomen as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source3",
				"source(output(",
				"          GroupName as string,",
				"          GroupType as string,",
				"          ShareOfMen as double,",
				"          ShareOfWomen as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source4",
				"source(output(",
				"          GroupName as string,",
				"          GroupType as string,",
				"          ShareOfMen as double,",
				"          ShareOfWomen as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source5",
				"source1 split(GroupType == 'Model',",
				"     GroupType == 'Model/Engine',",
				"     disjoint: false) ~> SplitModelTypes2019@(Model, ModelEngine)",
				"source2 split(GroupType == 'Model',",
				"     GroupType == 'Model/Engine',",
				"     disjoint: false) ~> SplitModelTypes2020@(Model, ModelEngine)",
				"source3 split(GroupType == 'Model',",
				"     GroupType == 'Model/Engine',",
				"     disjoint: false) ~> SplitModelTypes2021@(Model, ModelEngine)",
				"source4 split(GroupType == 'Model',",
				"     GroupType == 'Model/Engine',",
				"     disjoint: false) ~> SplitModelTypes2022@(Model, ModelEngine)",
				"source5 split(GroupType == 'Model',",
				"     GroupType == 'Model/Engine',",
				"     disjoint: false) ~> SplitModelTypes2023@(Model, ModelEngine)",
				"SplitModelTypes2019@Model derive(market = 'CN',",
				"          year = '2019',",
				"          model = iif(GroupName == 'Porsche', 'All Models', concat(GroupName, ' All')),",
				"          male = ShareOfMen,",
				"          female = ShareOfWomen) ~> DeriveModelColumns2019",
				"SplitModelTypes2020@Model derive(market = 'CN',",
				"          year = '2020',",
				"          model = iif(GroupName == 'Porsche', 'All Models', concat(GroupName, ' All')),",
				"          male = ShareOfMen,",
				"          female = ShareOfWomen) ~> DeriveModelColumns2020",
				"SplitModelTypes2021@Model derive(market = 'CN',",
				"          year = '2021',",
				"          model = iif(GroupName == 'Porsche', 'All Models', concat(GroupName, ' All')),",
				"          male = ShareOfMen,",
				"          female = ShareOfWomen) ~> DeriveModelColumns2021",
				"SplitModelTypes2022@Model derive(market = 'CN',",
				"          year = '2022',",
				"          model = iif(GroupName == 'Porsche', 'All Models', concat(GroupName, ' All')),",
				"          male = ShareOfMen,",
				"          female = ShareOfWomen) ~> DeriveModelColumns2022",
				"SplitModelTypes2023@Model derive(market = 'CN',",
				"          year = '2023',",
				"          model = iif(GroupName == 'Porsche', 'All Models', concat(GroupName, ' All')),",
				"          male = ShareOfMen,",
				"          female = ShareOfWomen) ~> DeriveModelColumns2023",
				"SplitModelTypes2019@ModelEngine derive(market = 'CN',",
				"          year = '2019',",
				"          model = replace(GroupName, '/', ' '),",
				"          male = ShareOfMen,",
				"          female = ShareOfWomen) ~> DeriveEngineColumns2019",
				"SplitModelTypes2020@ModelEngine derive(market = 'CN',",
				"          year = '2020',",
				"          model = replace(GroupName, '/', ' '),",
				"          male = ShareOfMen,",
				"          female = ShareOfWomen) ~> DeriveEngineColumns2020",
				"SplitModelTypes2021@ModelEngine derive(market = 'CN',",
				"          year = '2021',",
				"          model = replace(GroupName, '/', ' '),",
				"          male = ShareOfMen,",
				"          female = ShareOfWomen) ~> DeriveEngineColumns2021",
				"SplitModelTypes2022@ModelEngine derive(market = 'CN',",
				"          year = '2022',",
				"          model = replace(GroupName, '/', ' '),",
				"          male = ShareOfMen,",
				"          female = ShareOfWomen) ~> DeriveEngineColumns2022",
				"SplitModelTypes2023@ModelEngine derive(market = 'CN',",
				"          year = '2023',",
				"          model = replace(GroupName, '/', ' '),",
				"          male = ShareOfMen,",
				"          female = ShareOfWomen) ~> DeriveEngineColumns2023",
				"DeriveModelColumns2019, DeriveModelColumns2020, DeriveModelColumns2021, DeriveModelColumns2022, DeriveModelColumns2023, DeriveEngineColumns2019, DeriveEngineColumns2020, DeriveEngineColumns2021, DeriveEngineColumns2022, DeriveEngineColumns2023 union(byName: true)~> UnionAllData",
				"UnionAllData select(mapColumn(",
				"          market,",
				"          year,",
				"          model,",
				"          male,",
				"          female",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectFinalColumns",
				"SelectFinalColumns derive(data = @(market, year, model, male, female)) ~> CreateDataArray",
				"CreateDataArray aggregate(groupBy(dummy = 1),",
				"     data = collect(data)) ~> AggregateToArray",
				"AggregateToArray select(mapColumn(",
				"          data",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectDataArray",
				"SelectDataArray sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'json',",
				"     fileSystem: 'output',",
				"     partitionFileNames:['totalCustomerBaseGenderChartCN.json'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}