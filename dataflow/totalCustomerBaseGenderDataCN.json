{
	"name": "totalCustomerBaseGenderDataCN",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CAP_CN_2019",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "SplitModelTypes"
				},
				{
					"name": "DeriveModelColumns"
				},
				{
					"name": "DeriveEngineColumns"
				},
				{
					"name": "UnionAllData"
				},
				{
					"name": "SelectFinalColumns"
				},
				{
					"name": "CreateDataArray"
				},
				{
					"name": "AggregateToArray"
				},
				{
					"name": "SelectDataArray"
				}
			],
			"scriptLines": [
				"source(output(",
				"          GroupName as string,",
				"          GroupType as string,",
				"          ShareOfMen as double,",
				"          ShareOfWomen as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 split(GroupType == 'Model',",
				"     GroupType == 'Model/Engine',",
				"     disjoint: false) ~> SplitModelTypes@(Model, ModelEngine)",
				"SplitModelTypes@Model derive(market = 'CN',",
				"          year = '2019',",
				"          model = iif(GroupName == 'Porsche', 'All Models', concat(GroupName, ' All')),",
				"          male = ShareOfMen,",
				"          female = ShareOfWomen) ~> DeriveModelColumns",
				"SplitModelTypes@ModelEngine derive(market = 'CN',",
				"          year = '2019',",
				"          model = replace(GroupName, '/', ' '),",
				"          male = ShareOfMen,",
				"          female = ShareOfWomen) ~> DeriveEngineColumns",
				"DeriveModelColumns, DeriveEngineColumns union(byName: true)~> UnionAllData",
				"UnionAllData select(mapColumn(",
				"          market,",
				"          year,",
				"          model,",
				"          male,",
				"          female",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectFinalColumns",
				"SelectFinalColumns derive(data = @(market, year, model, male, female)) ~> CreateDataArray",
				"CreateDataArray aggregate(groupBy(dummy = 1),",
				"     data = collect(data)) ~> AggregateToArray",
				"AggregateToArray select(mapColumn(",
				"          data",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectDataArray",
				"SelectDataArray sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'json',",
				"     fileSystem: 'output',",
				"     partitionFileNames:['genderTotalCustomerBaseChart.json'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}