{
	"name": "incomeDataDE",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "FullData",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "SelectColumns"
				},
				{
					"name": "FilterDEData"
				},
				{
					"name": "DeriveColumns"
				},
				{
					"name": "AggregateData"
				},
				{
					"name": "CalculateTotals"
				},
				{
					"name": "CalculatePercentages"
				},
				{
					"name": "AggregateBaseModelData"
				},
				{
					"name": "PrepareBaseModelData"
				},
				{
					"name": "UnionModelData"
				},
				{
					"name": "SelectFinalColumns"
				},
				{
					"name": "AggregateAllModels"
				},
				{
					"name": "UnionWithAllModels"
				},
				{
					"name": "CollectIntoArray"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ResponseId as string,",
				"          EndDate as string,",
				"          ED_MODEL_CODE as string,",
				"          ED_MODEL_YEAR as string,",
				"          {1711-1712} as string,",
				"          Q4601 as integer,",
				"          Q4531 as string,",
				"          Q4609 as string,",
				"          Q5386 as string,",
				"          Q2002 as integer,",
				"          Q2012 as string,",
				"          {170111} as integer,",
				"          {1721} as integer,",
				"          {1731-1732} as string,",
				"          V1021 as string,",
				"          {1950} as string,",
				"          {670} as string,",
				"          {671g_1_1_1} as string,",
				"          {671g_1_1_3} as string,",
				"          {671g_1_1_5} as string,",
				"          {711} as integer,",
				"          {713g_1_121} as string,",
				"          {713g_1_3} as string,",
				"          {713g_1_5} as string,",
				"          {1961g_1_1_1} as string,",
				"          {1961g_1_1_3} as string,",
				"          {1961g_1_1_5} as string,",
				"          {3931g_3931} as string,",
				"          {3931g_3932} as string,",
				"          {3931g_3933} as string,",
				"          {3931g_3934} as string,",
				"          {3931g_3935} as string,",
				"          {3931g_3936} as string,",
				"          {3931g_3937} as string,",
				"          {3931g_3938} as string,",
				"          {3931g_3939} as string,",
				"          {3931g_3940} as string,",
				"          {3931g_3941} as string,",
				"          {1961g_2_1_1} as string,",
				"          {1961g_3_1_1} as string,",
				"          ED_AUTH_GROUP as string,",
				"          {3881g_38813883} as string,",
				"          {2674-2675} as string,",
				"          {1909-1910} as integer,",
				"          Market as string,",
				"          Description as string,",
				"          Type as string,",
				"          Model_Row as string,",
				"          Derivate as string,",
				"          NBOSegment as string,",
				"          Drive as string,",
				"          Body as string,",
				"          PerformanceLevel as string,",
				"          TypeSOP as string,",
				"          TypeEOP as string,",
				"          Top as string,",
				"          Classic as string,",
				"          {170157} as string,",
				"          {1903-1904} as integer,",
				"          {1923-1924} as integer,",
				"          {2601-2602} as string,",
				"          {2702-2703} as string,",
				"          {3881g_38843886} as string,",
				"          {3881g_38873889} as string,",
				"          {3881g_38903892} as string,",
				"          {3881g_38933895} as string,",
				"          {3881g_38963898} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 select(mapColumn(",
				"          ResponseId,",
				"          EndDate,",
				"          ED_MODEL_CODE,",
				"          ED_MODEL_YEAR,",
				"          {1903-1904},",
				"          Market,",
				"          Model_Row,",
				"          Derivate,",
				"          Q1701 = {170111}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectColumns",
				"SelectColumns filter(Market == 'PD') ~> FilterDEData",
				"FilterDEData derive(Year = left(EndDate, 4),",
				"          ModelGroup = iif(isNull(Derivate) || Derivate == '' || Derivate == Model_Row, ",
				"        Model_Row + ' Basic', ",
				"        iif(startsWith(Derivate, Model_Row), ",
				"        Derivate, ",
				"        Model_Row + ' ' + Derivate)),",
				"          IncomeGroup = case(",
				"        {1903-1904} == 1, 'below5K',",
				"        {1903-1904} == 2, 'between5And10K',",
				"        {1903-1904} == 3, 'between10And15K',",
				"        {1903-1904} == 4, 'between15And20K',",
				"        {1903-1904} == 5, 'between20And25K',",
				"        {1903-1904} == 6, 'moreThan25K',",
				"        {1903-1904} == 0, 'preferNotToAnswer',",
				"        'unknown'",
				"    ),",
				"          Gender = iif(Q1701 == 1, 'male', 'female'),",
				"          BaseModel = trim(split(Model_Row, ' ')[1])) ~> DeriveColumns",
				"DeriveColumns aggregate(groupBy(Year,",
				"          ModelGroup,",
				"          BaseModel),",
				"     total_count = count(),",
				"          male_below5K = countIf(Gender == 'male' && IncomeGroup == 'below5K'),",
				"          male_between5And10K = countIf(Gender == 'male' && IncomeGroup == 'between5And10K'),",
				"          male_between10And15K = countIf(Gender == 'male' && IncomeGroup == 'between10And15K'),",
				"          male_between15And20K = countIf(Gender == 'male' && IncomeGroup == 'between15And20K'),",
				"          male_between20And25K = countIf(Gender == 'male' && IncomeGroup == 'between20And25K'),",
				"          male_moreThan25K = countIf(Gender == 'male' && IncomeGroup == 'moreThan25K'),",
				"          male_preferNotToAnswer = countIf(Gender == 'male' && IncomeGroup == 'preferNotToAnswer'),",
				"          female_below5K = countIf(Gender == 'female' && IncomeGroup == 'below5K'),",
				"          female_between5And10K = countIf(Gender == 'female' && IncomeGroup == 'between5And10K'),",
				"          female_between10And15K = countIf(Gender == 'female' && IncomeGroup == 'between10And15K'),",
				"          female_between15And20K = countIf(Gender == 'female' && IncomeGroup == 'between15And20K'),",
				"          female_between20And25K = countIf(Gender == 'female' && IncomeGroup == 'between20And25K'),",
				"          female_moreThan25K = countIf(Gender == 'female' && IncomeGroup == 'moreThan25K'),",
				"          female_preferNotToAnswer = countIf(Gender == 'female' && IncomeGroup == 'preferNotToAnswer')) ~> AggregateData",
				"AggregateData derive(total_male = male_below5K + male_between5And10K + male_between10And15K + male_between15And20K + male_between20And25K + male_moreThan25K + male_preferNotToAnswer,",
				"          total_female = female_below5K + female_between5And10K + female_between10And15K + female_between15And20K + female_between20And25K + female_moreThan25K + female_preferNotToAnswer) ~> CalculateTotals",
				"CalculateTotals derive(male_below5K = round(toDouble(male_below5K) / toDouble(total_male), 3),",
				"          male_between5And10K = round(toDouble(male_between5And10K) / toDouble(total_male), 3),",
				"          male_between10And15K = round(toDouble(male_between10And15K) / toDouble(total_male), 3),",
				"          male_between15And20K = round(toDouble(male_between15And20K) / toDouble(total_male), 3),",
				"          male_between20And25K = round(toDouble(male_between20And25K) / toDouble(total_male), 3),",
				"          male_moreThan25K = round(toDouble(male_moreThan25K) / toDouble(total_male), 3),",
				"          male_preferNotToAnswer = round(toDouble(male_preferNotToAnswer) / toDouble(total_male), 3),",
				"          female_below5K = round(toDouble(female_below5K) / toDouble(total_female), 3),",
				"          female_between5And10K = round(toDouble(female_between5And10K) / toDouble(total_female), 3),",
				"          female_between10And15K = round(toDouble(female_between10And15K) / toDouble(total_female), 3),",
				"          female_between15And20K = round(toDouble(female_between15And20K) / toDouble(total_female), 3),",
				"          female_between20And25K = round(toDouble(female_between20And25K) / toDouble(total_female), 3),",
				"          female_moreThan25K = round(toDouble(female_moreThan25K) / toDouble(total_female), 3),",
				"          female_preferNotToAnswer = round(toDouble(female_preferNotToAnswer) / toDouble(total_female), 3)) ~> CalculatePercentages",
				"CalculatePercentages aggregate(groupBy(Year,",
				"          BaseModel),",
				"     male_total = sum(total_male),",
				"          female_total = sum(total_female),",
				"          male_below5K = sum(male_below5K * total_male),",
				"          male_between5And10K = sum(male_between5And10K * total_male),",
				"          male_between10And15K = sum(male_between10And15K * total_male),",
				"          male_between15And20K = sum(male_between15And20K * total_male),",
				"          male_between20And25K = sum(male_between20And25K * total_male),",
				"          male_moreThan25K = sum(male_moreThan25K * total_male),",
				"          male_preferNotToAnswer = sum(male_preferNotToAnswer * total_male),",
				"          female_below5K = sum(female_below5K * total_female),",
				"          female_between5And10K = sum(female_between5And10K * total_female),",
				"          female_between10And15K = sum(female_between10And15K * total_female),",
				"          female_between15And20K = sum(female_between15And20K * total_female),",
				"          female_between20And25K = sum(female_between20And25K * total_female),",
				"          female_moreThan25K = sum(female_moreThan25K * total_female),",
				"          female_preferNotToAnswer = sum(female_preferNotToAnswer * total_female),",
				"          total_count = sum(total_count)) ~> AggregateBaseModelData",
				"AggregateBaseModelData derive(ModelGroup = BaseModel + ' All',",
				"          male_below5K = round(toDouble(male_below5K) / toDouble(male_total), 3),",
				"          male_between5And10K = round(toDouble(male_between5And10K) / toDouble(male_total), 3),",
				"          male_between10And15K = round(toDouble(male_between10And15K) / toDouble(male_total), 3),",
				"          male_between15And20K = round(toDouble(male_between15And20K) / toDouble(male_total), 3),",
				"          male_between20And25K = round(toDouble(male_between20And25K) / toDouble(male_total), 3),",
				"          male_moreThan25K = round(toDouble(male_moreThan25K) / toDouble(male_total), 3),",
				"          male_preferNotToAnswer = round(toDouble(male_preferNotToAnswer) / toDouble(male_total), 3),",
				"          female_below5K = round(toDouble(female_below5K) / toDouble(female_total), 3),",
				"          female_between5And10K = round(toDouble(female_between5And10K) / toDouble(female_total), 3),",
				"          female_between10And15K = round(toDouble(female_between10And15K) / toDouble(female_total), 3),",
				"          female_between15And20K = round(toDouble(female_between15And20K) / toDouble(female_total), 3),",
				"          female_between20And25K = round(toDouble(female_between20And25K) / toDouble(female_total), 3),",
				"          female_moreThan25K = round(toDouble(female_moreThan25K) / toDouble(female_total), 3),",
				"          female_preferNotToAnswer = round(toDouble(female_preferNotToAnswer) / toDouble(female_total), 3)) ~> PrepareBaseModelData",
				"CalculatePercentages, PrepareBaseModelData union(byName: true)~> UnionModelData",
				"UnionModelData select(mapColumn(",
				"          year = Year,",
				"          model = ModelGroup,",
				"          total_count,",
				"          male_below5K,",
				"          male_between5And10K,",
				"          male_between10And15K,",
				"          male_between15And20K,",
				"          male_between20And25K,",
				"          male_moreThan25K,",
				"          male_preferNotToAnswer,",
				"          female_below5K,",
				"          female_between5And10K,",
				"          female_between10And15K,",
				"          female_between15And20K,",
				"          female_between20And25K,",
				"          female_moreThan25K,",
				"          female_preferNotToAnswer",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectFinalColumns",
				"SelectFinalColumns aggregate(groupBy(year),",
				"     model = first('All Models'),",
				"          total_count = sum(total_count),",
				"          male_below5K = round(avg(male_below5K), 3),",
				"          male_between5And10K = round(avg(male_between5And10K), 3),",
				"          male_between10And15K = round(avg(male_between10And15K), 3),",
				"          male_between15And20K = round(avg(male_between15And20K), 3),",
				"          male_between20And25K = round(avg(male_between20And25K), 3),",
				"          male_moreThan25K = round(avg(male_moreThan25K), 3),",
				"          male_preferNotToAnswer = round(avg(male_preferNotToAnswer), 3),",
				"          female_below5K = round(avg(female_below5K), 3),",
				"          female_between5And10K = round(avg(female_between5And10K), 3),",
				"          female_between10And15K = round(avg(female_between10And15K), 3),",
				"          female_between15And20K = round(avg(female_between15And20K), 3),",
				"          female_between20And25K = round(avg(female_between20And25K), 3),",
				"          female_moreThan25K = round(avg(female_moreThan25K), 3),",
				"          female_preferNotToAnswer = round(avg(female_preferNotToAnswer), 3)) ~> AggregateAllModels",
				"SelectFinalColumns, AggregateAllModels union(byName: true)~> UnionWithAllModels",
				"UnionWithAllModels aggregate(groupBy(dummy = 1),",
				"     data = collect(@(",
				"        year = year,",
				"        model = model,",
				"        total_count = total_count,",
				"        male_below5K = male_below5K,",
				"        male_between5And10K = male_between5And10K,",
				"        male_between10And15K = male_between10And15K,",
				"        male_between15And20K = male_between15And20K,",
				"        male_between20And25K = male_between20And25K,",
				"        male_moreThan25K = male_moreThan25K,",
				"        female_below5K = female_below5K,",
				"        female_between5And10K = female_between5And10K,",
				"        female_between10And15K = female_between10And15K,",
				"        female_between15And20K = female_between15And20K,",
				"        female_between20And25K = female_between20And25K,",
				"        female_moreThan25K = female_moreThan25K",
				"    ))) ~> CollectIntoArray",
				"CollectIntoArray sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'json',",
				"     fileSystem: 'output',",
				"     partitionFileNames:['incomeChartDE.json'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          data",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}