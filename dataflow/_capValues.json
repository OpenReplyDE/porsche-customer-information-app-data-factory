{
	"name": "_capValues",
	"properties": {
		"type": "Flowlet",
		"typeProperties": {
			"sources": [],
			"sinks": [],
			"transformations": [
				{
					"name": "SplitModelTypes"
				},
				{
					"name": "DeriveModelColumns"
				},
				{
					"name": "SelectModelAll"
				},
				{
					"name": "AggregateGenderData"
				},
				{
					"name": "DeriveEngineColumns"
				},
				{
					"name": "union"
				},
				{
					"name": "input"
				},
				{
					"name": "output"
				}
			],
			"scriptLines": [
				"parameters{",
				"     market as string,",
				"     year as string",
				"}",
				"input(output(",
				"          GroupName as string,",
				"          GroupType as string,",
				"          value_male as double,",
				"          value_female as double",
				"     ),",
				"     order: 0,",
				"     allowSchemaDrift: true) ~> input",
				"input split(GroupType == 'Model/Engine' || GroupType == 'Model/Body',",
				"     GroupType == 'Model',",
				"     disjoint: false) ~> SplitModelTypes@(ModelEngine, Model)",
				"SplitModelTypes@Model derive(ModelName = iif(GroupName == 'Porsche', 'All Models',",
				"      iif(locate(' ', GroupName) > 0,",
				"        concat(",
				"           trim(split(GroupName, ' ')[1]),",
				"           ' All ',",
				"           trim(substring(GroupName, locate(' ', GroupName) + 1, 100))",
				"        ),",
				"        concat(GroupName, ' All')",
				"      )",
				"    ),",
				"          male = value_male,",
				"          female = value_female) ~> DeriveModelColumns",
				"DeriveModelColumns select(mapColumn(",
				"          ModelName,",
				"          male,",
				"          female",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectModelAll",
				"SelectModelAll aggregate(groupBy(market,",
				"          year,",
				"          model),",
				"     male = max(male),",
				"          female = max(female)) ~> AggregateGenderData",
				"SplitModelTypes@ModelEngine derive(market = $market,",
				"          year = $year,",
				"          model = replace(GroupName, '/', ' '),",
				"          male = value_male,",
				"          female = value_female) ~> DeriveEngineColumns",
				"AggregateGenderData, DeriveEngineColumns union(byName: true)~> union",
				"union output() ~> output"
			]
		}
	}
}