{
	"name": "incomeDataCN",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "PSS",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "SelectColumns"
				},
				{
					"name": "FilterCNData"
				},
				{
					"name": "DeriveColumns"
				},
				{
					"name": "AggregateData"
				},
				{
					"name": "CalculateTotals"
				},
				{
					"name": "CalculatePercentages"
				},
				{
					"name": "AggregateBaseModelData"
				},
				{
					"name": "PrepareBaseModelData"
				},
				{
					"name": "AggregateAllModels"
				},
				{
					"name": "PrepareAllModelsData"
				},
				{
					"name": "UnionModelData"
				},
				{
					"name": "SelectFinalColumns"
				},
				{
					"name": "CollectIntoArray"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ResponseId as string,",
				"          EndDate as string,",
				"          ED_MODEL_CODE as string,",
				"          ED_MODEL_YEAR as string,",
				"          {1711-1712} as string,",
				"          Q4601 as integer,",
				"          Q4531 as string,",
				"          Q4609 as string,",
				"          Q5386 as string,",
				"          Q2002 as integer,",
				"          Q2012 as string,",
				"          {170111} as integer,",
				"          {1721} as integer,",
				"          {1731-1732} as string,",
				"          V1021 as string,",
				"          {1950} as string,",
				"          {670} as string,",
				"          {671g_1_1_1} as string,",
				"          {671g_1_1_3} as string,",
				"          {671g_1_1_5} as string,",
				"          {711} as integer,",
				"          {713g_1_121} as string,",
				"          {713g_1_3} as string,",
				"          {713g_1_5} as string,",
				"          {1961g_1_1_1} as string,",
				"          {1961g_1_1_3} as string,",
				"          {1961g_1_1_5} as string,",
				"          {3931g_3931} as string,",
				"          {3931g_3932} as string,",
				"          {3931g_3933} as string,",
				"          {3931g_3934} as string,",
				"          {3931g_3935} as string,",
				"          {3931g_3936} as string,",
				"          {3931g_3937} as string,",
				"          {3931g_3938} as string,",
				"          {3931g_3939} as string,",
				"          {3931g_3940} as string,",
				"          {3931g_3941} as string,",
				"          {1961g_2_1_1} as string,",
				"          {1961g_3_1_1} as string,",
				"          ED_AUTH_GROUP as string,",
				"          {3881g_38813883} as string,",
				"          {2674-2675} as string,",
				"          {1909-1910} as integer,",
				"          Market as string,",
				"          Description as string,",
				"          Type as string,",
				"          Model_Row as string,",
				"          Derivate as string,",
				"          NBOSegment as string,",
				"          Drive as string,",
				"          Body as string,",
				"          PerformanceLevel as string,",
				"          TypeSOP as string,",
				"          TypeEOP as string,",
				"          Top as string,",
				"          Classic as string,",
				"          {170157} as string,",
				"          {1903-1904} as integer,",
				"          {1923-1924} as integer,",
				"          {2601-2602} as string,",
				"          {2702-2703} as string,",
				"          {3881g_38843886} as string,",
				"          {3881g_38873889} as string,",
				"          {3881g_38903892} as string,",
				"          {3881g_38933895} as string,",
				"          {3881g_38963898} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 select(mapColumn(",
				"          ResponseId,",
				"          EndDate,",
				"          ED_MODEL_CODE,",
				"          ED_MODEL_YEAR,",
				"          {1909-1910},",
				"          Market,",
				"          Model_Row,",
				"          Derivate,",
				"          Q1701 = {170111}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectColumns",
				"SelectColumns filter(Market == 'PGCN') ~> FilterCNData",
				"FilterCNData derive(Year = left(EndDate, 4),",
				"          ModelGroup = iif(isNull(Derivate) || Derivate == '' || Derivate == Model_Row, ",
				"        Model_Row + ' Basic', ",
				"        iif(startsWith(Derivate, Model_Row), ",
				"        Derivate, ",
				"        Model_Row + ' ' + Derivate)),",
				"          IncomeGroup = case(",
				"        {1909-1910} == 1, 'below1m',",
				"        {1909-1910} == 2, 'between1And2m',",
				"        {1909-1910} == 3, 'between2And3m',",
				"        {1909-1910} == 4, 'between3And4m',",
				"        {1909-1910} == 5, 'between4And5m',",
				"        {1909-1910} == 6, 'between5And6m',",
				"        {1909-1910} == 7, 'between6And7m',",
				"        {1909-1910} == 8, 'between7And8m',",
				"        {1909-1910} == 9, 'between8And9m',",
				"        {1909-1910} == 10, 'between9And10m',",
				"        {1909-1910} == 11, 'moreThan10m',",
				"        'unknown'",
				"    ),",
				"          Gender = iif(Q1701 == 1, 'male', 'female'),",
				"          BaseModel = trim(split(Model_Row, ' ')[1])) ~> DeriveColumns",
				"DeriveColumns aggregate(groupBy(Year,",
				"          ModelGroup,",
				"          BaseModel),",
				"     total_count = count(),",
				"          male_below1m = countIf(Gender == 'male' && IncomeGroup == 'below1m'),",
				"          male_between1And2m = countIf(Gender == 'male' && IncomeGroup == 'between1And2m'),",
				"          male_between2And3m = countIf(Gender == 'male' && IncomeGroup == 'between2And3m'),",
				"          male_between3And4m = countIf(Gender == 'male' && IncomeGroup == 'between3And4m'),",
				"          male_between4And5m = countIf(Gender == 'male' && IncomeGroup == 'between4And5m'),",
				"          male_between5And6m = countIf(Gender == 'male' && IncomeGroup == 'between5And6m'),",
				"          male_between6And7m = countIf(Gender == 'male' && IncomeGroup == 'between6And7m'),",
				"          male_between7And8m = countIf(Gender == 'male' && IncomeGroup == 'between7And8m'),",
				"          male_between8And9m = countIf(Gender == 'male' && IncomeGroup == 'between8And9m'),",
				"          male_between9And10m = countIf(Gender == 'male' && IncomeGroup == 'between9And10m'),",
				"          male_moreThan10m = countIf(Gender == 'male' && IncomeGroup == 'moreThan10m'),",
				"          female_below1m = countIf(Gender == 'female' && IncomeGroup == 'below1m'),",
				"          female_between1And2m = countIf(Gender == 'female' && IncomeGroup == 'between1And2m'),",
				"          female_between2And3m = countIf(Gender == 'female' && IncomeGroup == 'between2And3m'),",
				"          female_between3And4m = countIf(Gender == 'female' && IncomeGroup == 'between3And4m'),",
				"          female_between4And5m = countIf(Gender == 'female' && IncomeGroup == 'between4And5m'),",
				"          female_between5And6m = countIf(Gender == 'female' && IncomeGroup == 'between5And6m'),",
				"          female_between6And7m = countIf(Gender == 'female' && IncomeGroup == 'between6And7m'),",
				"          female_between7And8m = countIf(Gender == 'female' && IncomeGroup == 'between7And8m'),",
				"          female_between8And9m = countIf(Gender == 'female' && IncomeGroup == 'between8And9m'),",
				"          female_between9And10m = countIf(Gender == 'female' && IncomeGroup == 'between9And10m'),",
				"          female_moreThan10m = countIf(Gender == 'female' && IncomeGroup == 'moreThan10m')) ~> AggregateData",
				"AggregateData derive(total_male = male_below1m + male_between1And2m + male_between2And3m + male_between3And4m + male_between4And5m + male_between5And6m + male_between6And7m + male_between7And8m + male_between8And9m + male_between9And10m + male_moreThan10m,",
				"          total_female = coalesce(female_below1m, 0) + coalesce(female_between1And2m, 0) + coalesce(female_between2And3m, 0) + coalesce(female_between3And4m, 0) + coalesce(female_between4And5m, 0) + coalesce(female_between5And6m, 0) + coalesce(female_between6And7m, 0) + coalesce(female_between7And8m, 0) + coalesce(female_between8And9m, 0) + coalesce(female_between9And10m, 0) + coalesce(female_moreThan10m, 0)) ~> CalculateTotals",
				"CalculateTotals derive(male_below1m = round(toDouble(male_below1m) / toDouble(total_male), 3),",
				"          male_between1And2m = round(toDouble(male_between1And2m) / toDouble(total_male), 3),",
				"          male_between2And3m = round(toDouble(male_between2And3m) / toDouble(total_male), 3),",
				"          male_between3And4m = round(toDouble(male_between3And4m) / toDouble(total_male), 3),",
				"          male_between4And5m = round(toDouble(male_between4And5m) / toDouble(total_male), 3),",
				"          male_between5And6m = round(toDouble(male_between5And6m) / toDouble(total_male), 3),",
				"          male_between6And7m = round(toDouble(male_between6And7m) / toDouble(total_male), 3),",
				"          male_between7And8m = round(toDouble(male_between7And8m) / toDouble(total_male), 3),",
				"          male_between8And9m = round(toDouble(male_between8And9m) / toDouble(total_male), 3),",
				"          male_between9And10m = round(toDouble(male_between9And10m) / toDouble(total_male), 3),",
				"          male_moreThan10m = round(toDouble(male_moreThan10m) / toDouble(total_male), 3),",
				"          female_below1m = round(toDouble(coalesce(female_below1m, 0)) / toDouble(total_female), 3),",
				"          female_between1And2m = round(toDouble(coalesce(female_between1And2m, 0)) / toDouble(total_female), 3),",
				"          female_between2And3m = round(toDouble(coalesce(female_between2And3m, 0)) / toDouble(total_female), 3),",
				"          female_between3And4m = round(toDouble(coalesce(female_between3And4m, 0)) / toDouble(total_female), 3),",
				"          female_between4And5m = round(toDouble(coalesce(female_between4And5m, 0)) / toDouble(total_female), 3),",
				"          female_between5And6m = round(toDouble(coalesce(female_between5And6m, 0)) / toDouble(total_female), 3),",
				"          female_between6And7m = round(toDouble(coalesce(female_between6And7m, 0)) / toDouble(total_female), 3),",
				"          female_between7And8m = round(toDouble(coalesce(female_between7And8m, 0)) / toDouble(total_female), 3),",
				"          female_between8And9m = round(toDouble(coalesce(female_between8And9m, 0)) / toDouble(total_female), 3),",
				"          female_between9And10m = round(toDouble(coalesce(female_between9And10m, 0)) / toDouble(total_female), 3),",
				"          female_moreThan10m = round(toDouble(coalesce(female_moreThan10m, 0)) / toDouble(total_female), 3)) ~> CalculatePercentages",
				"CalculatePercentages aggregate(groupBy(Year,",
				"          BaseModel),",
				"     male_total = sum(total_male),",
				"          female_total = sum(total_female),",
				"          male_below1m = sum(male_below1m * total_male),",
				"          male_between1And2m = sum(male_between1And2m * total_male),",
				"          male_between2And3m = sum(male_between2And3m * total_male),",
				"          male_between3And4m = sum(male_between3And4m * total_male),",
				"          male_between4And5m = sum(male_between4And5m * total_male),",
				"          male_between5And6m = sum(male_between5And6m * total_male),",
				"          male_between6And7m = sum(male_between6And7m * total_male),",
				"          male_between7And8m = sum(male_between7And8m * total_male),",
				"          male_between8And9m = sum(male_between8And9m * total_male),",
				"          male_between9And10m = sum(male_between9And10m * total_male),",
				"          male_moreThan10m = sum(male_moreThan10m * total_male),",
				"          female_below1m = sum(female_below1m * total_female),",
				"          female_between1And2m = sum(female_between1And2m * total_female),",
				"          female_between2And3m = sum(female_between2And3m * total_female),",
				"          female_between3And4m = sum(female_between3And4m * total_female),",
				"          female_between4And5m = sum(female_between4And5m * total_female),",
				"          female_between5And6m = sum(female_between5And6m * total_female),",
				"          female_between6And7m = sum(female_between6And7m * total_female),",
				"          female_between7And8m = sum(female_between7And8m * total_female),",
				"          female_between8And9m = sum(female_between8And9m * total_female),",
				"          female_between9And10m = sum(female_between9And10m * total_female),",
				"          female_moreThan10m = sum(female_moreThan10m * total_female),",
				"          total_count = sum(total_count)) ~> AggregateBaseModelData",
				"AggregateBaseModelData derive(ModelGroup = BaseModel + ' All',",
				"          male_below1m = round(toDouble(male_below1m) / toDouble(male_total), 3),",
				"          male_between1And2m = round(toDouble(male_between1And2m) / toDouble(male_total), 3),",
				"          male_between2And3m = round(toDouble(male_between2And3m) / toDouble(male_total), 3),",
				"          male_between3And4m = round(toDouble(male_between3And4m) / toDouble(male_total), 3),",
				"          male_between4And5m = round(toDouble(male_between4And5m) / toDouble(male_total), 3),",
				"          male_between5And6m = round(toDouble(male_between5And6m) / toDouble(male_total), 3),",
				"          male_between6And7m = round(toDouble(male_between6And7m) / toDouble(male_total), 3),",
				"          male_between7And8m = round(toDouble(male_between7And8m) / toDouble(male_total), 3),",
				"          male_between8And9m = round(toDouble(male_between8And9m) / toDouble(male_total), 3),",
				"          male_between9And10m = round(toDouble(male_between9And10m) / toDouble(male_total), 3),",
				"          male_moreThan10m = round(toDouble(male_moreThan10m) / toDouble(male_total), 3),",
				"          female_below1m = round(toDouble(female_below1m) / toDouble(female_total), 3),",
				"          female_between1And2m = round(toDouble(female_between1And2m) / toDouble(female_total), 3),",
				"          female_between2And3m = round(toDouble(female_between2And3m) / toDouble(female_total), 3),",
				"          female_between3And4m = round(toDouble(female_between3And4m) / toDouble(female_total), 3),",
				"          female_between4And5m = round(toDouble(female_between4And5m) / toDouble(female_total), 3),",
				"          female_between5And6m = round(toDouble(female_between5And6m) / toDouble(female_total), 3),",
				"          female_between6And7m = round(toDouble(female_between6And7m) / toDouble(female_total), 3),",
				"          female_between7And8m = round(toDouble(female_between7And8m) / toDouble(female_total), 3),",
				"          female_between8And9m = round(toDouble(female_between8And9m) / toDouble(female_total), 3),",
				"          female_between9And10m = round(toDouble(female_between9And10m) / toDouble(female_total), 3),",
				"          female_moreThan10m = round(toDouble(female_moreThan10m) / toDouble(female_total), 3)) ~> PrepareBaseModelData",
				"CalculatePercentages aggregate(groupBy(Year),",
				"     male_total = sum(total_male),",
				"          female_total = sum(total_female),",
				"          male_below1m = sum(male_below1m * total_male),",
				"          male_between1And2m = sum(male_between1And2m * total_male),",
				"          male_between2And3m = sum(male_between2And3m * total_male),",
				"          male_between3And4m = sum(male_between3And4m * total_male),",
				"          male_between4And5m = sum(male_between4And5m * total_male),",
				"          male_between5And6m = sum(male_between5And6m * total_male),",
				"          male_between6And7m = sum(male_between6And7m * total_male),",
				"          male_between7And8m = sum(male_between7And8m * total_male),",
				"          male_between8And9m = sum(male_between8And9m * total_male),",
				"          male_between9And10m = sum(male_between9And10m * total_male),",
				"          male_moreThan10m = sum(male_moreThan10m * total_male),",
				"          female_below1m = sum(female_below1m * total_female),",
				"          female_between1And2m = sum(female_between1And2m * total_female),",
				"          female_between2And3m = sum(female_between2And3m * total_female),",
				"          female_between3And4m = sum(female_between3And4m * total_female),",
				"          female_between4And5m = sum(female_between4And5m * total_female),",
				"          female_between5And6m = sum(female_between5And6m * total_female),",
				"          female_between6And7m = sum(female_between6And7m * total_female),",
				"          female_between7And8m = sum(female_between7And8m * total_female),",
				"          female_between8And9m = sum(female_between8And9m * total_female),",
				"          female_between9And10m = sum(female_between9And10m * total_female),",
				"          female_moreThan10m = sum(female_moreThan10m * total_female),",
				"          total_count = sum(total_count)) ~> AggregateAllModels",
				"AggregateAllModels derive(ModelGroup = 'All Models',",
				"          male_below1m = round(toDouble(male_below1m) / toDouble(male_total), 3),",
				"          male_between1And2m = round(toDouble(male_between1And2m) / toDouble(male_total), 3),",
				"          male_between2And3m = round(toDouble(male_between2And3m) / toDouble(male_total), 3),",
				"          male_between3And4m = round(toDouble(male_between3And4m) / toDouble(male_total), 3),",
				"          male_between4And5m = round(toDouble(male_between4And5m) / toDouble(male_total), 3),",
				"          male_between5And6m = round(toDouble(male_between5And6m) / toDouble(male_total), 3),",
				"          male_between6And7m = round(toDouble(male_between6And7m) / toDouble(male_total), 3),",
				"          male_between7And8m = round(toDouble(male_between7And8m) / toDouble(male_total), 3),",
				"          male_between8And9m = round(toDouble(male_between8And9m) / toDouble(male_total), 3),",
				"          male_between9And10m = round(toDouble(male_between9And10m) / toDouble(male_total), 3),",
				"          male_moreThan10m = round(toDouble(male_moreThan10m) / toDouble(male_total), 3),",
				"          female_below1m = round(toDouble(female_below1m) / toDouble(female_total), 3),",
				"          female_between1And2m = round(toDouble(female_between1And2m) / toDouble(female_total), 3),",
				"          female_between2And3m = round(toDouble(female_between2And3m) / toDouble(female_total), 3),",
				"          female_between3And4m = round(toDouble(female_between3And4m) / toDouble(female_total), 3),",
				"          female_between4And5m = round(toDouble(female_between4And5m) / toDouble(female_total), 3),",
				"          female_between5And6m = round(toDouble(female_between5And6m) / toDouble(female_total), 3),",
				"          female_between6And7m = round(toDouble(female_between6And7m) / toDouble(female_total), 3),",
				"          female_between7And8m = round(toDouble(female_between7And8m) / toDouble(female_total), 3),",
				"          female_between8And9m = round(toDouble(female_between8And9m) / toDouble(female_total), 3),",
				"          female_between9And10m = round(toDouble(female_between9And10m) / toDouble(female_total), 3),",
				"          female_moreThan10m = round(toDouble(female_moreThan10m) / toDouble(female_total), 3)) ~> PrepareAllModelsData",
				"CalculatePercentages, PrepareBaseModelData, PrepareAllModelsData union(byName: true)~> UnionModelData",
				"UnionModelData select(mapColumn(",
				"          year = Year,",
				"          model = ModelGroup,",
				"          total_count,",
				"          male_below1m,",
				"          male_between1And2m,",
				"          male_between2And3m,",
				"          male_between3And4m,",
				"          male_between4And5m,",
				"          male_between5And6m,",
				"          male_between6And7m,",
				"          male_between7And8m,",
				"          male_between8And9m,",
				"          male_between9And10m,",
				"          male_moreThan10m,",
				"          female_below1m,",
				"          female_between1And2m,",
				"          female_between2And3m,",
				"          female_between3And4m,",
				"          female_between4And5m,",
				"          female_between5And6m,",
				"          female_between6And7m,",
				"          female_between7And8m,",
				"          female_between8And9m,",
				"          female_between9And10m,",
				"          female_moreThan10m",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectFinalColumns",
				"SelectFinalColumns aggregate(groupBy(dummy = 1),",
				"     data = collect(@(",
				"        year = year,",
				"        model = model,",
				"        total_count = total_count,",
				"        male_below1m = male_below1m,",
				"        male_between1And2m = male_between1And2m,",
				"        male_between2And3m = male_between2And3m,",
				"        male_between3And4m = male_between3And4m,",
				"        male_between4And5m = male_between4And5m,",
				"        male_between5And6m = male_between5And6m,",
				"        male_between6And7m = male_between6And7m,",
				"        male_between7And8m = male_between7And8m,",
				"        male_between8And9m = male_between8And9m,",
				"        male_between9And10m = male_between9And10m,",
				"        male_moreThan10m = male_moreThan10m,",
				"        female_below1m = female_below1m,",
				"        female_between1And2m = female_between1And2m,",
				"        female_between2And3m = female_between2And3m,",
				"        female_between3And4m = female_between3And4m,",
				"        female_between4And5m = female_between4And5m,",
				"        female_between5And6m = female_between5And6m,",
				"        female_between6And7m = female_between6And7m,",
				"        female_between7And8m = female_between7And8m,",
				"        female_between8And9m = female_between8And9m,",
				"        female_between9And10m = female_between9And10m,",
				"        female_moreThan10m = female_moreThan10m",
				"    ))) ~> CollectIntoArray",
				"CollectIntoArray sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'json',",
				"     fileSystem: 'output',",
				"     partitionFileNames:['incomeChartCN.json'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          data",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}