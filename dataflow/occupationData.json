{
	"name": "occupationData",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "FullData",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "SelectRelevantColumns"
				},
				{
					"name": "DeriveBasicColumns"
				},
				{
					"name": "DeriveKeyColumn"
				},
				{
					"name": "FilterUnknownKeys"
				},
				{
					"name": "AggregateData"
				},
				{
					"name": "SelectFinalColumns"
				},
				{
					"name": "WrapInDataObject"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ResponseId as string,",
				"          EndDate as string,",
				"          ED_MODEL_CODE as string,",
				"          ED_MODEL_YEAR as string,",
				"          {1711-1712} as string,",
				"          Q4601 as integer,",
				"          Q4531 as string,",
				"          Q4609 as integer,",
				"          Q5386 as string,",
				"          Q2002 as integer,",
				"          Q2012 as string,",
				"          {170111} as integer,",
				"          {1721} as integer,",
				"          {1731-1732} as string,",
				"          V1021 as string,",
				"          {1950} as string,",
				"          {670} as string,",
				"          {671g_1_1_1} as string,",
				"          {671g_1_1_3} as string,",
				"          {671g_1_1_5} as string,",
				"          {711} as integer,",
				"          {713g_1_121} as string,",
				"          {713g_1_3} as string,",
				"          {713g_1_5} as string,",
				"          {1961g_1_1_1} as string,",
				"          {1961g_1_1_3} as string,",
				"          {1961g_1_1_5} as string,",
				"          {3931g_3931} as string,",
				"          {3931g_3932} as string,",
				"          {3931g_3933} as string,",
				"          {3931g_3934} as string,",
				"          {3931g_3935} as string,",
				"          {3931g_3936} as string,",
				"          {3931g_3937} as string,",
				"          {3931g_3938} as string,",
				"          {3931g_3939} as string,",
				"          {3931g_3940} as string,",
				"          {3931g_3941} as string,",
				"          {1961g_2_1_1} as string,",
				"          {1961g_3_1_1} as string,",
				"          ED_AUTH_GROUP as string,",
				"          {3881g_38813883} as string,",
				"          {2674-2675} as integer,",
				"          {1909-1910} as integer,",
				"          Market as string,",
				"          Description as string,",
				"          Type as string,",
				"          Model_Row as string,",
				"          Derivate as string,",
				"          NBOSegment as string,",
				"          Drive as string,",
				"          Body as string,",
				"          PerformanceLevel as string,",
				"          TypeSOP as string,",
				"          TypeEOP as string,",
				"          Top as string,",
				"          Classic as string,",
				"          {170157} as string,",
				"          {1903-1904} as integer,",
				"          {1923-1924} as integer,",
				"          {2601-2602} as integer,",
				"          {2702-2703} as integer,",
				"          {3881g_38843886} as string,",
				"          {3881g_38873889} as string,",
				"          {3881g_38903892} as string,",
				"          {3881g_38933895} as string,",
				"          {3881g_38963898} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 select(mapColumn(",
				"          ResponseId,",
				"          EndDate,",
				"          ED_MODEL_CODE,",
				"          ED_MODEL_YEAR,",
				"          Q1711_1712 = {1711-1712},",
				"          Q4601,",
				"          Q4531,",
				"          Q4609,",
				"          Q5386,",
				"          Q2002,",
				"          Q2012,",
				"          Q1701 = {170111},",
				"          Q1721 = {1721},",
				"          {1731-1732},",
				"          V1021,",
				"          {1950},",
				"          {670},",
				"          Market,",
				"          Description,",
				"          Type,",
				"          Model_Row,",
				"          Derivate,",
				"          NBOSegment,",
				"          Drive,",
				"          Body,",
				"          PerformanceLevel,",
				"          TypeSOP,",
				"          TypeEOP,",
				"          Top,",
				"          Classic,",
				"          {2674-2675},",
				"          {2601-2602},",
				"          {2702-2703}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectRelevantColumns",
				"SelectRelevantColumns derive(Year = toString(year(toDate(EndDate, 'yyyy-MM-dd'))),",
				"          BaseModel = trim(split(Model_Row, ' ')[1]),",
				"          Variant = iif(isNull(Derivate) || Derivate == '' || Derivate == Model_Row, 'Basic', Derivate),",
				"          MappedMarket = case(",
				"        Market == 'PGCN', 'CN',",
				"        Market == 'PCGB', 'UK',",
				"        Market == 'PCNA', 'US',",
				"        Market == 'PD', 'DE',",
				"        Market",
				"    )) ~> DeriveBasicColumns",
				"DeriveBasicColumns derive(Key = case(",
				"        MappedMarket == 'US', case(",
				"            Q4609 == 1, 'Employed full-time (30 hrs a week or more)',",
				"            Q4609 == 2, 'Employed part-time (less than 30 hrs a week)',",
				"            Q4609 == 3, 'Self-employed',",
				"            Q4609 == 4, 'Homemaker',",
				"            Q4609 == 5, 'Student',",
				"            Q4609 == 6, 'Retired',",
				"            Q4609 == 7, 'Military',",
				"            Q4609 == 8, 'Unable to work/disabled',",
				"            Q4609 == 9, 'Out of work, but actively looking',",
				"            Q4609 == 10, 'Out of work, not looking for work',",
				"            Q4609 == 98, 'Prefer not to answer',",
				"            Q5386 == '99', 'Other',",
				"            'Unknown'",
				"        ),",
				"        MappedMarket == 'CN', case(",
				"            {2674-2675} == 1, 'Freelancer / self-employed',",
				"            {2674-2675} == 2, 'Owner of a business',",
				"            {2674-2675} == 3, 'CEO / managing director',",
				"            {2674-2675} == 4, 'Employee - manager',",
				"            {2674-2675} == 5, 'Employee - executive',",
				"            {2674-2675} == 6, 'Pensioner, housewife, househusband',",
				"            {2674-2675} == 7, 'Student',",
				"            {2674-2675} == 8, 'Civil official',",
				"            {2674-2675} == 9, 'Lawyer',",
				"            {2674-2675} == 10, 'Consultant',",
				"            {2674-2675} == 11, 'Doctor',",
				"            {2674-2675} == 12, 'Engineer',",
				"            {2674-2675} == 13, 'Government Officer',",
				"            {2674-2675} == 14, 'Artist',",
				"            {2674-2675} == 99, 'Other',",
				"            'Unknown'",
				"        ),",
				"        MappedMarket == 'DE', case(",
				"            {2601-2602} == 1, 'Freelancer / self-employed',",
				"            {2601-2602} == 2, 'Freelancer (employed)',",
				"            {2601-2602} == 3, 'Company owner / managing director (50 or more employees)',",
				"            {2601-2602} == 4, 'Company owner / managing director (20 - 49 employees)',",
				"            {2601-2602} == 5, 'Company owner / managing director (up to 20 employees)',",
				"            {2601-2602} == 6, 'Managing director / executive board',",
				"            {2601-2602} == 7, 'Executive',",
				"            {2601-2602} == 8, 'Employee',",
				"            {2601-2602} == 9, 'Employee in the public sector',",
				"            {2601-2602} == 10, 'Privateer',",
				"            {2601-2602} == 11, 'Shareholder',",
				"            {2601-2602} == 12, 'Pensioner, housewife, student',",
				"            {2601-2602} == 99, 'Other',",
				"            'Unknown'",
				"        ),",
				"        MappedMarket == 'UK', case(",
				"            {2702-2703} == 1, 'Freelancer / self-employed',",
				"            {2702-2703} == 2, 'Freelance working for a company',",
				"            {2702-2703} == 3, 'Company owner (with 50 or more employees)',",
				"            {2702-2703} == 4, 'Company owner (with 20-49 employees)',",
				"            {2702-2703} == 5, 'Company owner (with less than 20 employees)',",
				"            {2702-2703} == 6, 'MD / CEO',",
				"            {2702-2703} == 7, 'Director',",
				"            {2702-2703} == 8, 'Retired',",
				"            {2702-2703} == 9, 'House-wife / House-husband',",
				"            {2702-2703} == 10, 'Student',",
				"            {2702-2703} == 11, 'Other',",
				"            'Unknown'",
				"        ),",
				"        'Unknown'",
				"    )) ~> DeriveKeyColumn",
				"DeriveKeyColumn filter(Key != 'unknown') ~> FilterUnknownKeys",
				"FilterUnknownKeys aggregate(groupBy(MappedMarket,",
				"          Year,",
				"          Key,",
				"          Variant,",
				"          BaseModel),",
				"     male = sum(iif(Q1701 == 1, 1, 0)),",
				"          female = sum(iif(Q1701 == 2, 1, 0))) ~> AggregateData",
				"AggregateData select(mapColumn(",
				"          market = MappedMarket,",
				"          year = Year,",
				"          key = Key,",
				"          male,",
				"          female,",
				"          variant = Variant,",
				"          model = BaseModel",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectFinalColumns",
				"SelectFinalColumns aggregate(groupBy(dummy = 1),",
				"     data = collect(@(",
				"          market = market,",
				"          year = year,",
				"          key = key,",
				"          male = male,",
				"          female = female,",
				"          variant = variant,",
				"          model = model",
				"     ))) ~> WrapInDataObject",
				"WrapInDataObject sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'json',",
				"     fileSystem: 'output',",
				"     partitionFileNames:['occupationChart.json'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          data",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}