{
	"name": "genderData",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Full_data",
						"type": "DatasetReference"
					},
					"name": "allCountriesData"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "newCarBuyersGender"
				}
			],
			"transformations": [
				{
					"name": "RenameColumns"
				},
				{
					"name": "AddDerivedColumns"
				},
				{
					"name": "FilterValidData"
				},
				{
					"name": "AggregateGenderData"
				},
				{
					"name": "ExtractBaseModel"
				},
				{
					"name": "AggregateCarModels"
				},
				{
					"name": "PrepareCarModelsData"
				},
				{
					"name": "AggregateAllModels"
				},
				{
					"name": "PrepareAllModelsData"
				},
				{
					"name": "UnionModelData"
				},
				{
					"name": "CalculatePercentages"
				},
				{
					"name": "MapMarketCodes"
				},
				{
					"name": "SelectFinalColumns"
				},
				{
					"name": "CollectAllData"
				},
				{
					"name": "FlattenOutput"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ResponseId as string,",
				"          EndDate as timestamp,",
				"          ED_MODEL_CODE as string,",
				"          ED_MODEL_YEAR as string,",
				"          {1711-1712} as short,",
				"          Q4601 as string,",
				"          Q4531 as string,",
				"          Q4609 as string,",
				"          Q5386 as string,",
				"          Q2002 as string,",
				"          Q2012 as string,",
				"          {1701} as short,",
				"          {1721} as short,",
				"          {1731-1732} as short,",
				"          V1021 as string,",
				"          {1950} as short,",
				"          {670} as short,",
				"          {671g_1_1_1} as string,",
				"          {671g_1_1_3} as string,",
				"          {671g_1_1_5} as string,",
				"          {711} as short,",
				"          {713g_1_1} as string,",
				"          {713g_1_3} as string,",
				"          {713g_1_5} as string,",
				"          {1961g_1_1_1} as string,",
				"          {1961g_1_1_3} as string,",
				"          {1961g_1_1_5} as string,",
				"          {3931g_3931} as boolean,",
				"          {3931g_3932} as boolean,",
				"          {3931g_3933} as boolean,",
				"          {3931g_3934} as boolean,",
				"          {3931g_3935} as boolean,",
				"          {3931g_3936} as boolean,",
				"          {3931g_3937} as boolean,",
				"          {3931g_3938} as boolean,",
				"          {3931g_3939} as boolean,",
				"          {3931g_3940} as boolean,",
				"          {3931g_3941} as boolean,",
				"          {1961g_2_1_1} as string,",
				"          {1961g_3_1_1} as string,",
				"          ED_AUTH_GROUP as string,",
				"          {3881g_38813883} as short,",
				"          {2674-2675} as string,",
				"          {1909-1910} as string,",
				"          Market as string,",
				"          Description as string,",
				"          Type as string,",
				"          Model_Row as string,",
				"          Derivate as string,",
				"          NBOSegment as string,",
				"          Drive as string,",
				"          Body as string,",
				"          PerformanceLevel as string,",
				"          TypeSOP as short,",
				"          TypeEOP as short,",
				"          Top as boolean,",
				"          Classic as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> allCountriesData",
				"allCountriesData select(mapColumn(",
				"          ResponseId,",
				"          EndDate,",
				"          ED_MODEL_CODE,",
				"          ED_MODEL_YEAR,",
				"          Q1711_1712 = {1711-1712},",
				"          Q4601,",
				"          Q4531,",
				"          Q4609,",
				"          Q5386,",
				"          Q2002,",
				"          Q2012,",
				"          Q1701 = {1701},",
				"          Q1721 = {1721},",
				"          {1731-1732},",
				"          V1021,",
				"          {1950},",
				"          {670},",
				"          {671g_1_1_1},",
				"          {671g_1_1_3},",
				"          {671g_1_1_5},",
				"          {711},",
				"          {713g_1_1},",
				"          {713g_1_3},",
				"          {713g_1_5},",
				"          {1961g_1_1_1},",
				"          {1961g_1_1_3},",
				"          {1961g_1_1_5},",
				"          {3931g_3931},",
				"          {3931g_3932},",
				"          {3931g_3933},",
				"          {3931g_3934},",
				"          {3931g_3935},",
				"          {3931g_3936},",
				"          {3931g_3937},",
				"          {3931g_3938},",
				"          {3931g_3939},",
				"          {3931g_3940},",
				"          {3931g_3941},",
				"          {1961g_2_1_1},",
				"          {1961g_3_1_1},",
				"          ED_AUTH_GROUP,",
				"          {3881g_38813883},",
				"          {2674-2675},",
				"          {1909-1910},",
				"          Market,",
				"          Description,",
				"          Type,",
				"          Model_Row,",
				"          Derivate,",
				"          NBOSegment,",
				"          Drive,",
				"          Body,",
				"          PerformanceLevel,",
				"          TypeSOP,",
				"          TypeEOP,",
				"          Top,",
				"          Classic",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameColumns",
				"RenameColumns derive(ModelGroup = iif(isNull(Derivate) || Derivate == '' || Derivate == Model_Row, ",
				"                 Model_Row + ' Basic', ",
				"                 iif(startsWith(Derivate, Model_Row), ",
				"                    Derivate, ",
				"                    Model_Row + ' ' + Derivate)),",
				"          Year = toString(year(EndDate))) ~> AddDerivedColumns",
				"AddDerivedColumns filter(!isNull(Market) &&",
				"    Market != '' &&",
				"    !isNull(Year) &&",
				"    Year != '' &&",
				"    !isNull(ModelGroup) &&",
				"    ModelGroup != '' &&",
				"    !isNull(Q1701)) ~> FilterValidData",
				"FilterValidData aggregate(groupBy(Market,",
				"          Year,",
				"          ModelGroup),",
				"     totalCount = count(),",
				"          maleCount = countIf(Q1701 == 1),",
				"          femaleCount = countIf(Q1701 == 2)) ~> AggregateGenderData",
				"AggregateGenderData derive(BaseModel = trim(split(ModelGroup, ' ')[1])) ~> ExtractBaseModel",
				"ExtractBaseModel aggregate(groupBy(Market,",
				"          Year,",
				"          BaseModel),",
				"     totalCount = sum(totalCount),",
				"          maleCount = sum(maleCount),",
				"          femaleCount = sum(femaleCount)) ~> AggregateCarModels",
				"AggregateCarModels derive(ModelGroup = BaseModel + ' All') ~> PrepareCarModelsData",
				"FilterValidData aggregate(groupBy(Market,",
				"          Year),",
				"     allModelsTotalCount = count(),",
				"          allModelsMaleCount = countIf(Q1701 == 1),",
				"          allModelsFemaleCount = countIf(Q1701 == 2)) ~> AggregateAllModels",
				"AggregateAllModels derive(ModelGroup = 'All Models',",
				"          totalCount = allModelsTotalCount,",
				"          maleCount = allModelsMaleCount,",
				"          femaleCount = allModelsFemaleCount) ~> PrepareAllModelsData",
				"AggregateGenderData, PrepareCarModelsData, PrepareAllModelsData union(byName: true)~> UnionModelData",
				"UnionModelData derive(male = round(toDouble(maleCount) / toDouble(totalCount), 2),",
				"          female = round(toDouble(femaleCount) / toDouble(totalCount), 2)) ~> CalculatePercentages",
				"CalculatePercentages derive(MappedMarket = case(",
				"      Market == 'PGCN', 'CN',",
				"      Market == 'PCGB', 'UK',",
				"      Market == 'PCNA', 'US',",
				"      Market == 'PD', 'DE',",
				"      Market",
				"    )) ~> MapMarketCodes",
				"MapMarketCodes select(mapColumn(",
				"          market = MappedMarket,",
				"          year = Year,",
				"          model = ModelGroup,",
				"          male,",
				"          female",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectFinalColumns",
				"SelectFinalColumns aggregate(groupBy(dummy = 1),",
				"     data = collect(@(market, year, model, male, female))) ~> CollectAllData",
				"CollectAllData select(mapColumn(",
				"          data",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlattenOutput",
				"FlattenOutput sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'json',",
				"     fileSystem: 'output',",
				"     partitionFileNames:['newCarBuyersGenderChart.json'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> newCarBuyersGender"
			]
		}
	}
}