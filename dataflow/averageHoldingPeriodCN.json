{
	"name": "averageHoldingPeriodCN",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CAP_CN_2019",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "SplitModelTypes"
				},
				{
					"name": "DeriveGenderColumns"
				},
				{
					"name": "AggregateGenderData"
				},
				{
					"name": "DeriveEngineColumns"
				},
				{
					"name": "UnionAllData"
				},
				{
					"name": "CreateDataArray"
				},
				{
					"name": "AggregateToArray"
				},
				{
					"name": "SelectDataArray"
				}
			],
			"scriptLines": [
				"source(output(",
				"          GroupName as string,",
				"          GroupType as string,",
				"          AverageHoldingPeriod as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 split(GroupType == 'Model/Gender',",
				"     GroupType == 'Model/Engine' || GroupType == 'Model/Body',",
				"     disjoint: false) ~> SplitModelTypes@(ModelGender, ModelEngine)",
				"SplitModelTypes@ModelGender derive(market = 'CN',",
				"          year = '2019',",
				"          variant = 'All',",
				"          model = iif(GroupName == 'Porsche/Female' || GroupName == 'Porsche/Male', 'All Models',",
				"        iif(locate(' ', split(GroupName, '/')[1]) > 0,",
				"            concat(",
				"                trim(split(split(GroupName, '/')[1], ' ')[1]),",
				"                ' All ',",
				"                trim(substring(split(GroupName, '/')[1], locate(' ', split(GroupName, '/')[1]) + 1, 100))",
				"            ),",
				"            concat(split(GroupName, '/')[1], ' All')",
				"        )",
				"    ),",
				"          male = iif(endsWith(GroupName, '/Male'), AverageHoldingPeriod, toDouble(0)),",
				"          female = iif(endsWith(GroupName, '/Female'), AverageHoldingPeriod, toDouble(0))) ~> DeriveGenderColumns",
				"DeriveGenderColumns aggregate(groupBy(market,",
				"          year,",
				"          model),",
				"     male = max(male),",
				"          female = max(female),",
				"          total = (max(male) + max(female)) / 2) ~> AggregateGenderData",
				"SplitModelTypes@ModelEngine derive(market = 'CN',",
				"          year = '2019',",
				"          model = replace(GroupName, '/', ' '),",
				"          total = AverageHoldingPeriod) ~> DeriveEngineColumns",
				"AggregateGenderData, DeriveEngineColumns union(byName: true)~> UnionAllData",
				"UnionAllData derive(data = @(market, year, model, male, female, total)) ~> CreateDataArray",
				"CreateDataArray aggregate(groupBy(dummy = 1),",
				"     data = collect(data)) ~> AggregateToArray",
				"AggregateToArray select(mapColumn(",
				"          data",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectDataArray",
				"SelectDataArray sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'json',",
				"     fileSystem: 'output',",
				"     partitionFileNames:['averageHoldingPeriodChart.json'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}