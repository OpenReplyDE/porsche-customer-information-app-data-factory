{
	"name": "areaOfLivingCN",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CAP_CN_2019",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "SplitModelTypes"
				},
				{
					"name": "DeriveGenderColumns"
				},
				{
					"name": "DeriveEngineColumns"
				},
				{
					"name": "SelectGenderColumns"
				},
				{
					"name": "SelectEngineColumns"
				},
				{
					"name": "DeriveGenderKeys"
				},
				{
					"name": "DeriveEngineKeys"
				},
				{
					"name": "SelectVillageGender"
				},
				{
					"name": "SelectSuburbsGender"
				},
				{
					"name": "SelectTownGender"
				},
				{
					"name": "SelectCityGender"
				},
				{
					"name": "SelectVillageEngine"
				},
				{
					"name": "SelectSuburbsEngine"
				},
				{
					"name": "SelectTownEngine"
				},
				{
					"name": "SelectCityEngine"
				},
				{
					"name": "UnionGenderData"
				},
				{
					"name": "UnionEngineData"
				},
				{
					"name": "UnionAllData"
				},
				{
					"name": "CreateDataArray"
				},
				{
					"name": "AggregateToArray"
				},
				{
					"name": "SelectDataArray"
				}
			],
			"scriptLines": [
				"source(output(",
				"          GroupName as string,",
				"          GroupType as string,",
				"          AverageExistingCustomerAge as double,",
				"          {ExistingCustomerAge=0-30} as double,",
				"          {ExistingCustomerAge=30-50} as double,",
				"          {ExistingCustomerAge=50-100} as double,",
				"          ShareOfMen as double,",
				"          ShareOfWomen as double,",
				"          AverageHoldingPeriod as double,",
				"          AverageNumberOfPorscheInPossession as double,",
				"          {PorscheInPossession=1} as double,",
				"          {PorscheInPossession=2} as double,",
				"          {PorscheInPossession=3} as double,",
				"          {PorscheInPossession>=4} as double,",
				"          FirstTimeBuyerRate as double,",
				"          ChurnRate as double,",
				"          ConquestRate as double,",
				"          MeanKmPerYear as double,",
				"          {kmPerYear=0} as double,",
				"          {kmPerYear=500} as double,",
				"          {kmPerYear=1000} as double,",
				"          {kmPerYear=1500} as double,",
				"          {kmPerYear=2000} as double,",
				"          {kmPerYear=2500} as double,",
				"          {kmPerYear=3000} as double,",
				"          {kmPerYear=3500} as double,",
				"          {kmPerYear=4000} as double,",
				"          {kmPerYear=4500} as double,",
				"          {kmPerYear=5000} as double,",
				"          {kmPerYear=5500} as double,",
				"          {kmPerYear=6000} as double,",
				"          {kmPerYear=6500} as double,",
				"          {kmPerYear=7000} as double,",
				"          {kmPerYear=7500} as double,",
				"          {kmPerYear=8000} as double,",
				"          {kmPerYear=8500} as double,",
				"          {kmPerYear=9000} as double,",
				"          {kmPerYear=9500} as double,",
				"          {kmPerYear=10000} as double,",
				"          {kmPerYear=10500} as double,",
				"          {kmPerYear=11000} as double,",
				"          {kmPerYear=11500} as double,",
				"          {kmPerYear=12000} as double,",
				"          {kmPerYear=12500} as double,",
				"          {kmPerYear=13000} as double,",
				"          {kmPerYear=13500} as double,",
				"          {kmPerYear=14000} as double,",
				"          {kmPerYear=14500} as double,",
				"          {kmPerYear=15000} as double,",
				"          {kmPerYear=15500} as double,",
				"          {kmPerYear=16000} as double,",
				"          {kmPerYear=16500} as double,",
				"          {kmPerYear=17000} as double,",
				"          {kmPerYear=17500} as double,",
				"          {kmPerYear=18000} as double,",
				"          {kmPerYear=18500} as double,",
				"          {kmPerYear=19000} as double,",
				"          {kmPerYear=19500} as double,",
				"          {kmPerYear=20000} as double,",
				"          {kmPerYear=20500} as double,",
				"          {kmPerYear=21000} as double,",
				"          {kmPerYear=21500} as double,",
				"          {kmPerYear=22000} as double,",
				"          {kmPerYear=22500} as double,",
				"          {kmPerYear=23000} as double,",
				"          {kmPerYear=23500} as double,",
				"          {kmPerYear=24000} as double,",
				"          {kmPerYear=24500} as double,",
				"          {kmPerYear=25000} as double,",
				"          {kmPerYear=25500} as double,",
				"          {kmPerYear=26000} as double,",
				"          {kmPerYear=26500} as double,",
				"          {kmPerYear=27000} as double,",
				"          {kmPerYear=27500} as double,",
				"          {kmPerYear=28000} as double,",
				"          {kmPerYear=28500} as double,",
				"          {kmPerYear=29000} as double,",
				"          {kmPerYear=29500} as double,",
				"          {kmPerYear=30000} as double,",
				"          {kmPerYear=30500} as double,",
				"          {kmPerYear=31000} as double,",
				"          {kmPerYear=31500} as double,",
				"          {kmPerYear=32000} as double,",
				"          {kmPerYear=32500} as double,",
				"          {kmPerYear=33000} as double,",
				"          {kmPerYear=33500} as double,",
				"          {kmPerYear=34000} as double,",
				"          {kmPerYear=34500} as double,",
				"          {kmPerYear=35000} as double,",
				"          {kmPerYear=35500} as double,",
				"          {kmPerYear=36000} as double,",
				"          {kmPerYear=36500} as double,",
				"          {kmPerYear=37000} as double,",
				"          {kmPerYear=37500} as double,",
				"          {kmPerYear=38000} as double,",
				"          {kmPerYear=38500} as double,",
				"          {kmPerYear=39000} as double,",
				"          {kmPerYear=39500} as double,",
				"          {kmPerYear=40000} as double,",
				"          {kmPerYear=40500} as double,",
				"          {kmPerYear=41000} as double,",
				"          {kmPerYear=41500} as double,",
				"          {kmPerYear=42000} as double,",
				"          {kmPerYear=42500} as double,",
				"          {kmPerYear=43000} as double,",
				"          {kmPerYear=43500} as double,",
				"          {kmPerYear=44000} as double,",
				"          {kmPerYear=44500} as double,",
				"          {kmPerYear=45000} as double,",
				"          {kmPerYear=45500} as double,",
				"          {kmPerYear=46000} as double,",
				"          {kmPerYear=46500} as double,",
				"          {kmPerYear=47000} as double,",
				"          {kmPerYear=47500} as double,",
				"          {kmPerYear=48000} as double,",
				"          {kmPerYear=48500} as double,",
				"          {kmPerYear=49000} as double,",
				"          {kmPerYear=49500} as double,",
				"          {kmPerYear=50000} as double,",
				"          T4 as double,",
				"          T3 as double,",
				"          T2 as double,",
				"          T1 as double,",
				"          Anhui as double,",
				"          Beijing as double,",
				"          Chongqing as double,",
				"          Fujian as double,",
				"          Gansu as double,",
				"          Guangdong as double,",
				"          Guangxi as double,",
				"          Guizhou as double,",
				"          Hainan as double,",
				"          Hebei as double,",
				"          Heilongjiang as double,",
				"          Henan as double,",
				"          {Hong Kong} as double,",
				"          Hubei as double,",
				"          Hunan as double,",
				"          {Inner Mongolia} as double,",
				"          Jiangsu as double,",
				"          Jiangxi as double,",
				"          Jilin as double,",
				"          Liaoning as double,",
				"          Macau as double,",
				"          Ningxia as double,",
				"          Qinghai as double,",
				"          Shaanxi as double,",
				"          Shandong as double,",
				"          Shanghai as double,",
				"          Shanxi as double,",
				"          Sichuan as double,",
				"          Tianjin as double,",
				"          Tibet as double,",
				"          Xinjiang as double,",
				"          Yunnan as double,",
				"          Zhejiang as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 split(GroupType == 'Model/Gender',",
				"     GroupType == 'Model/Engine',",
				"     disjoint: false) ~> SplitModelTypes@(ModelGender, ModelEngine)",
				"SplitModelTypes@ModelGender derive(market = 'CN',",
				"          year = '2019',",
				"          variant = 'All',",
				"          model = iif(GroupName == 'Porsche/Female' || GroupName == 'Porsche/Male', 'All Models',",
				"             iif(startsWith(split(GroupName, '/')[1], '7') || startsWith(split(GroupName, '/')[1], '9'),",
				"                concat('_', split(GroupName, '/')[1]),",
				"                split(GroupName, '/')[1])),",
				"          gender = iif(endsWith(GroupName, '/Female'), 'female', 'male')) ~> DeriveGenderColumns",
				"SplitModelTypes@ModelEngine derive(market = 'CN',",
				"          year = '2019',",
				"          variant = trim(split(GroupName, '/')[2]),",
				"          model = iif(startsWith(split(GroupName, '/')[1], '7') || startsWith(split(GroupName, '/')[1], '9'),",
				"        concat('_', split(GroupName, '/')[1]),",
				"        split(GroupName, '/')[1])) ~> DeriveEngineColumns",
				"DeriveGenderColumns select(mapColumn(",
				"          market,",
				"          year,",
				"          variant,",
				"          model,",
				"          gender,",
				"          Village = T4,",
				"          Suburbs = T3,",
				"          Town = T2,",
				"          City = T1",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectGenderColumns",
				"DeriveEngineColumns select(mapColumn(",
				"          market,",
				"          year,",
				"          variant,",
				"          model,",
				"          Village = T4,",
				"          Suburbs = T3,",
				"          Town = T2,",
				"          City = T1",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectEngineColumns",
				"SelectGenderColumns derive(Village_key = 'Village',",
				"          Village_value = Village,",
				"          Suburbs_key = 'Suburbs',",
				"          Suburbs_value = Suburbs,",
				"          Town_key = 'Town',",
				"          Town_value = Town,",
				"          City_key = 'City',",
				"          City_value = City) ~> DeriveGenderKeys",
				"SelectEngineColumns derive(Village_key = 'Village',",
				"          Village_value = Village,",
				"          Suburbs_key = 'Suburbs',",
				"          Suburbs_value = Suburbs,",
				"          Town_key = 'Town',",
				"          Town_value = Town,",
				"          City_key = 'City',",
				"          City_value = City) ~> DeriveEngineKeys",
				"DeriveGenderKeys select(mapColumn(",
				"          market,",
				"          year,",
				"          variant,",
				"          model,",
				"          gender,",
				"          key = Village_key,",
				"          value = Village_value",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectVillageGender",
				"DeriveGenderKeys select(mapColumn(",
				"          market,",
				"          year,",
				"          variant,",
				"          model,",
				"          gender,",
				"          key = Suburbs_key,",
				"          value = Suburbs_value",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectSuburbsGender",
				"DeriveGenderKeys select(mapColumn(",
				"          market,",
				"          year,",
				"          variant,",
				"          model,",
				"          gender,",
				"          key = Town_key,",
				"          value = Town_value",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectTownGender",
				"DeriveGenderKeys select(mapColumn(",
				"          market,",
				"          year,",
				"          variant,",
				"          model,",
				"          gender,",
				"          key = City_key,",
				"          value = City_value",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectCityGender",
				"DeriveEngineKeys select(mapColumn(",
				"          market,",
				"          year,",
				"          variant,",
				"          model,",
				"          key = Village_key,",
				"          value = Village_value",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectVillageEngine",
				"DeriveEngineKeys select(mapColumn(",
				"          market,",
				"          year,",
				"          variant,",
				"          model,",
				"          key = Suburbs_key,",
				"          value = Suburbs_value",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectSuburbsEngine",
				"DeriveEngineKeys select(mapColumn(",
				"          market,",
				"          year,",
				"          variant,",
				"          model,",
				"          key = Town_key,",
				"          value = Town_value",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectTownEngine",
				"DeriveEngineKeys select(mapColumn(",
				"          market,",
				"          year,",
				"          variant,",
				"          model,",
				"          key = City_key,",
				"          value = City_value",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectCityEngine",
				"SelectVillageGender, SelectSuburbsGender, SelectTownGender, SelectCityGender union(byName: true)~> UnionGenderData",
				"SelectVillageEngine, SelectSuburbsEngine, SelectTownEngine, SelectCityEngine union(byName: true)~> UnionEngineData",
				"UnionGenderData, UnionEngineData union(byName: true)~> UnionAllData",
				"UnionAllData derive(data = @(market, year, key, value, variant, model, gender)) ~> CreateDataArray",
				"CreateDataArray aggregate(groupBy(dummy = 1),",
				"     data = collect(data)) ~> AggregateToArray",
				"AggregateToArray select(mapColumn(",
				"          data",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectDataArray",
				"SelectDataArray sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'json',",
				"     fileSystem: 'output',",
				"     partitionFileNames:['cityTypeChartCN.json'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}