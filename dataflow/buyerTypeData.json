{
	"name": "buyerTypeData",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Full_data",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "RenameColumns"
				},
				{
					"name": "addDerivedColumns"
				},
				{
					"name": "filterValidData"
				},
				{
					"name": "aggregateData"
				},
				{
					"name": "aggregateBaseModelData"
				},
				{
					"name": "prepareBaseModelData"
				},
				{
					"name": "aggregateAllModelsData"
				},
				{
					"name": "prepareAllModelsData"
				},
				{
					"name": "unionModelData"
				},
				{
					"name": "calculatePercentages"
				},
				{
					"name": "selectFinalColumns"
				},
				{
					"name": "collectIntoArray"
				},
				{
					"name": "selectArrayColumn"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ResponseId as string,",
				"          EndDate as string,",
				"          ED_MODEL_CODE as string,",
				"          ED_MODEL_YEAR as string,",
				"          {1711-1712} as integer,",
				"          Q4601 as string,",
				"          Q4531 as string,",
				"          Q4609 as string,",
				"          Q5386 as string,",
				"          Q2002 as integer,",
				"          Q2012 as string,",
				"          {1701} as integer,",
				"          {1721} as string,",
				"          {1731-1732} as string,",
				"          V1021 as string,",
				"          {1950} as string,",
				"          {670} as string,",
				"          {671g_1_1_1} as string,",
				"          {671g_1_1_3} as string,",
				"          {671g_1_1_5} as string,",
				"          {711} as integer,",
				"          {713g_1_1} as string,",
				"          {713g_1_3} as string,",
				"          {713g_1_5} as string,",
				"          {1961g_1_1_1} as string,",
				"          {1961g_1_1_3} as string,",
				"          {1961g_1_1_5} as string,",
				"          {3931g_3931} as string,",
				"          {3931g_3932} as string,",
				"          {3931g_3933} as string,",
				"          {3931g_3934} as string,",
				"          {3931g_3935} as string,",
				"          {3931g_3936} as string,",
				"          {3931g_3937} as string,",
				"          {3931g_3938} as string,",
				"          {3931g_3939} as string,",
				"          {3931g_3940} as string,",
				"          {3931g_3941} as string,",
				"          {1961g_2_1_1} as string,",
				"          {1961g_3_1_1} as string,",
				"          ED_AUTH_GROUP as string,",
				"          {3881g_38813883} as string,",
				"          {2674-2675} as string,",
				"          {1909-1910} as string,",
				"          Market as string,",
				"          Description as string,",
				"          Type as string,",
				"          Model_Row as string,",
				"          Derivate as string,",
				"          NBOSegment as string,",
				"          Drive as string,",
				"          Body as string,",
				"          PerformanceLevel as string,",
				"          TypeSOP as string,",
				"          TypeEOP as string,",
				"          Top as string,",
				"          Classic as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 select(mapColumn(",
				"          ResponseId,",
				"          EndDate,",
				"          ED_MODEL_CODE,",
				"          ED_MODEL_YEAR,",
				"          Q1711_1712 = {1711-1712},",
				"          Q4601,",
				"          Q4531,",
				"          Q4609,",
				"          Q5386,",
				"          Q2002,",
				"          Q2012,",
				"          Q1701 = {1701},",
				"          Q1721 = {1721},",
				"          {1731-1732},",
				"          V1021,",
				"          {1950},",
				"          {670},",
				"          {671g_1_1_1},",
				"          {671g_1_1_3},",
				"          {671g_1_1_5},",
				"          Q711 = {711},",
				"          {713g_1_1},",
				"          {713g_1_3},",
				"          {713g_1_5},",
				"          {1961g_1_1_1},",
				"          {1961g_1_1_3},",
				"          {1961g_1_1_5},",
				"          {3931g_3931},",
				"          {3931g_3932},",
				"          {3931g_3933},",
				"          {3931g_3934},",
				"          {3931g_3935},",
				"          {3931g_3936},",
				"          {3931g_3937},",
				"          {3931g_3938},",
				"          {3931g_3939},",
				"          {3931g_3940},",
				"          {3931g_3941},",
				"          {1961g_2_1_1},",
				"          {1961g_3_1_1},",
				"          ED_AUTH_GROUP,",
				"          {3881g_38813883},",
				"          {2674-2675},",
				"          {1909-1910},",
				"          Market,",
				"          Description,",
				"          Type,",
				"          Model_Row,",
				"          Derivate,",
				"          NBOSegment,",
				"          Drive,",
				"          Body,",
				"          PerformanceLevel,",
				"          TypeSOP,",
				"          TypeEOP,",
				"          Top,",
				"          Classic",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameColumns",
				"RenameColumns derive(ModelGroup = iif(isNull(Derivate) || Derivate == '' || Derivate == Model_Row, ",
				"                     Model_Row + ' Basic', ",
				"                     iif(startsWith(Derivate, Model_Row), ",
				"                         Derivate, ",
				"                         Model_Row + ' ' + Derivate)),",
				"          Year = left(EndDate, 4),",
				"          BaseModel = trim(split(Model_Row, ' ')[1]),",
				"          PurchaseType = case(",
				"               Market == 'PCNA',",
				"               case(Q2002 == 1 || Q2002 == 6, 'porscheModelReplaced',",
				"                     Q2002 == 2, 'competitorModelReplaced',",
				"                     Q2002 == 3 || Q2002 == 4 || Q2002 == 7, 'additionalBuyer',",
				"                     Q2002 == 5, 'firstCarPurchase',",
				"                     'other'),",
				"               case(Q711 == 1 || Q711 == 6, 'porscheModelReplaced',",
				"                     Q711 == 2, 'competitorModelReplaced',",
				"                     Q711 == 3 || Q711 == 4 || Q711 == 7, 'additionalBuyer',",
				"                     Q711 == 5, 'firstCarPurchase',",
				"                     'other')",
				"          )) ~> addDerivedColumns",
				"addDerivedColumns filter(!isNull(Market) &&",
				"    Market != '' &&",
				"    !isNull(Year) &&",
				"    Year != '' &&",
				"    !isNull(ModelGroup) &&",
				"    ModelGroup != '' &&",
				"    !isNull(Q1701) &&",
				"    !isNull(PurchaseType)) ~> filterValidData",
				"filterValidData aggregate(groupBy(Market,",
				"          Year,",
				"          ModelGroup,",
				"          BaseModel),",
				"     male_total = countIf(Q1701 == 1),",
				"          female_total = countIf(Q1701 == 2),",
				"          male_firstCarPurchase = countIf(Q1701 == 1 && PurchaseType == 'firstCarPurchase'),",
				"          male_additionalBuyer = countIf(Q1701 == 1 && PurchaseType == 'additionalBuyer'),",
				"          male_porscheModelReplaced = countIf(Q1701 == 1 && PurchaseType == 'porscheModelReplaced'),",
				"          male_competitorModelReplaced = countIf(Q1701 == 1 && PurchaseType == 'competitorModelReplaced'),",
				"          female_firstCarPurchase = countIf(Q1701 == 2 && PurchaseType == 'firstCarPurchase'),",
				"          female_additionalBuyer = countIf(Q1701 == 2 && PurchaseType == 'additionalBuyer'),",
				"          female_porscheModelReplaced = countIf(Q1701 == 2 && PurchaseType == 'porscheModelReplaced'),",
				"          female_competitorModelReplaced = countIf(Q1701 == 2 && PurchaseType == 'competitorModelReplaced')) ~> aggregateData",
				"aggregateData aggregate(groupBy(Market,",
				"          Year,",
				"          BaseModel),",
				"     male_total = sum(male_total),",
				"          female_total = sum(female_total),",
				"          male_firstCarPurchase = sum(male_firstCarPurchase),",
				"          male_additionalBuyer = sum(male_additionalBuyer),",
				"          male_porscheModelReplaced = sum(male_porscheModelReplaced),",
				"          male_competitorModelReplaced = sum(male_competitorModelReplaced),",
				"          female_firstCarPurchase = sum(female_firstCarPurchase),",
				"          female_additionalBuyer = sum(female_additionalBuyer),",
				"          female_porscheModelReplaced = sum(female_porscheModelReplaced),",
				"          female_competitorModelReplaced = sum(female_competitorModelReplaced)) ~> aggregateBaseModelData",
				"aggregateBaseModelData derive(ModelGroup = BaseModel + ' All') ~> prepareBaseModelData",
				"filterValidData aggregate(groupBy(Market,",
				"          Year),",
				"     male_total = countIf(Q1701 == 1),",
				"          female_total = countIf(Q1701 == 2),",
				"          male_firstCarPurchase = countIf(Q1701 == 1 && PurchaseType == 'firstCarPurchase'),",
				"          male_additionalBuyer = countIf(Q1701 == 1 && PurchaseType == 'additionalBuyer'),",
				"          male_porscheModelReplaced = countIf(Q1701 == 1 && PurchaseType == 'porscheModelReplaced'),",
				"          male_competitorModelReplaced = countIf(Q1701 == 1 && PurchaseType == 'competitorModelReplaced'),",
				"          female_firstCarPurchase = countIf(Q1701 == 2 && PurchaseType == 'firstCarPurchase'),",
				"          female_additionalBuyer = countIf(Q1701 == 2 && PurchaseType == 'additionalBuyer'),",
				"          female_porscheModelReplaced = countIf(Q1701 == 2 && PurchaseType == 'porscheModelReplaced'),",
				"          female_competitorModelReplaced = countIf(Q1701 == 2 && PurchaseType == 'competitorModelReplaced')) ~> aggregateAllModelsData",
				"aggregateAllModelsData derive(ModelGroup = 'All Models') ~> prepareAllModelsData",
				"aggregateData, prepareBaseModelData, prepareAllModelsData union(byName: true)~> unionModelData",
				"unionModelData derive(male_firstCarPurchase = coalesce(round(male_firstCarPurchase / male_total, 2), 0),",
				"          male_additionalBuyer = coalesce(round(male_additionalBuyer / male_total, 2), 0),",
				"          male_porscheModelReplaced = coalesce(round(male_porscheModelReplaced / male_total, 2), 0),",
				"          male_competitorModelReplaced = coalesce(round(male_competitorModelReplaced / male_total, 2), 0),",
				"          female_firstCarPurchase = coalesce(round(female_firstCarPurchase / female_total, 2), 0),",
				"          female_additionalBuyer = coalesce(round(female_additionalBuyer / female_total, 2), 0),",
				"          female_porscheModelReplaced = coalesce(round(female_porscheModelReplaced / female_total, 2), 0),",
				"          female_competitorModelReplaced = coalesce(round(female_competitorModelReplaced / female_total, 2), 0),",
				"          MappedMarket = case(",
				"        Market == 'PGCN', 'CN',",
				"        Market == 'PCGB', 'UK',",
				"        Market == 'PCNA', 'US',",
				"        Market == 'PD', 'DE',",
				"        Market",
				"    )) ~> calculatePercentages",
				"calculatePercentages select(mapColumn(",
				"          market = MappedMarket,",
				"          year = Year,",
				"          model = ModelGroup,",
				"          male_firstCarPurchase,",
				"          male_additionalBuyer,",
				"          male_porscheModelReplaced,",
				"          male_competitorModelReplaced,",
				"          female_firstCarPurchase,",
				"          female_additionalBuyer,",
				"          female_porscheModelReplaced,",
				"          female_competitorModelReplaced",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> selectFinalColumns",
				"selectFinalColumns aggregate(groupBy(dummy = 1),",
				"     data = collect(@(market = market,",
				"                 year = year,",
				"                 model = model,",
				"                 male_firstCarPurchase = male_firstCarPurchase,",
				"                 male_additionalBuyer = male_additionalBuyer,",
				"                 male_porscheModelReplaced = male_porscheModelReplaced,",
				"                 male_competitorModelReplaced = male_competitorModelReplaced,",
				"                 female_firstCarPurchase = female_firstCarPurchase,",
				"                 female_additionalBuyer = female_additionalBuyer,",
				"                 female_porscheModelReplaced = female_porscheModelReplaced,",
				"                 female_competitorModelReplaced = female_competitorModelReplaced",
				"     ))) ~> collectIntoArray",
				"collectIntoArray select(mapColumn(",
				"          data",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> selectArrayColumn",
				"selectArrayColumn sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'json',",
				"     fileSystem: 'output',",
				"     partitionFileNames:['buyerTypeChart.json'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}