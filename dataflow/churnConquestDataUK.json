{
	"name": "churnConquestDataUK",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CAP_UK_2019",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "CAP_UK_2020",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "CAP_CN_2021",
						"type": "DatasetReference"
					},
					"name": "source3"
				},
				{
					"dataset": {
						"referenceName": "CAP_UK_2022",
						"type": "DatasetReference"
					},
					"name": "source4"
				},
				{
					"dataset": {
						"referenceName": "CAP_UK_2023",
						"type": "DatasetReference"
					},
					"name": "source5"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "SplitModelTypes2019"
				},
				{
					"name": "SplitModelTypes2020"
				},
				{
					"name": "SplitModelTypes2021"
				},
				{
					"name": "SplitModelTypes2022"
				},
				{
					"name": "SplitModelTypes2023"
				},
				{
					"name": "DeriveGenderColumns2019"
				},
				{
					"name": "DeriveGenderColumns2020"
				},
				{
					"name": "DeriveGenderColumns2021"
				},
				{
					"name": "DeriveGenderColumns2022"
				},
				{
					"name": "DeriveGenderColumns2023"
				},
				{
					"name": "AggregateGenderData2019"
				},
				{
					"name": "AggregateGenderData2020"
				},
				{
					"name": "AggregateGenderData2021"
				},
				{
					"name": "AggregateGenderData2022"
				},
				{
					"name": "AggregateGenderData2023"
				},
				{
					"name": "DeriveEngineColumns2019"
				},
				{
					"name": "DeriveEngineColumns2020"
				},
				{
					"name": "DeriveEngineColumns2021"
				},
				{
					"name": "DeriveEngineColumns2022"
				},
				{
					"name": "DeriveEngineColumns2023"
				},
				{
					"name": "UnionAllData"
				},
				{
					"name": "CreateDataArray"
				},
				{
					"name": "AggregateToArray"
				},
				{
					"name": "SelectDataArray"
				}
			],
			"scriptLines": [
				"source(output(",
				"          GroupName as string,",
				"          GroupType as string,",
				"          ChurnRate as double,",
				"          ConquestRate as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          GroupName as string,",
				"          GroupType as string,",
				"          ChurnRate as double,",
				"          ConquestRate as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source(output(",
				"          GroupName as string,",
				"          GroupType as string,",
				"          ChurnRate as double,",
				"          ConquestRate as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source3",
				"source(output(",
				"          GroupName as string,",
				"          GroupType as string,",
				"          ChurnRate as double,",
				"          ConquestRate as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source4",
				"source(output(",
				"          GroupName as string,",
				"          GroupType as string,",
				"          ChurnRate as double,",
				"          ConquestRate as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source5",
				"source1 split(GroupType == 'Model/Gender',",
				"     GroupType == 'Model/Engine',",
				"     disjoint: false) ~> SplitModelTypes2019@(ModelGender, ModelEngine)",
				"source2 split(GroupType == 'Model/Gender',",
				"     GroupType == 'Model/Engine',",
				"     disjoint: false) ~> SplitModelTypes2020@(ModelGender, ModelEngine)",
				"source3 split(GroupType == 'Model/Gender',",
				"     GroupType == 'Model/Engine',",
				"     disjoint: false) ~> SplitModelTypes2021@(ModelGender, ModelEngine)",
				"source4 split(GroupType == 'Model/Gender',",
				"     GroupType == 'Model/Engine',",
				"     disjoint: false) ~> SplitModelTypes2022@(ModelGender, ModelEngine)",
				"source5 split(GroupType == 'Model/Gender',",
				"     GroupType == 'Model/Engine',",
				"     disjoint: false) ~> SplitModelTypes2023@(ModelGender, ModelEngine)",
				"SplitModelTypes2019@ModelGender derive(market = 'UK',",
				"          year = '2019',",
				"          model = iif(GroupName == 'Porsche/Female' || GroupName == 'Porsche/Male', 'All Models',",
				"      iif(locate('/', GroupName) > 0, ",
				"        concat(trim(split(GroupName, '/')[1]), ' All'),",
				"        GroupName",
				"      )",
				"    ),",
				"          male_churnRate = iif(endsWith(GroupName, '/Male'), toDouble(ChurnRate), toDouble(0)),",
				"          male_conquestRate = iif(endsWith(GroupName, '/Male'), toDouble(ConquestRate), toDouble(0)),",
				"          female_churnRate = iif(endsWith(GroupName, '/Female'), toDouble(ChurnRate), toDouble(0)),",
				"          female_conquestRate = iif(endsWith(GroupName, '/Female'), toDouble(ConquestRate), toDouble(0))) ~> DeriveGenderColumns2019",
				"SplitModelTypes2020@ModelGender derive(market = 'UK',",
				"          year = '2020',",
				"          model = iif(GroupName == 'Porsche/Female' || GroupName == 'Porsche/Male', 'All Models',",
				"      iif(locate('/', GroupName) > 0, ",
				"        concat(trim(split(GroupName, '/')[1]), ' All'),",
				"        GroupName",
				"      )",
				"    ),",
				"          male_churnRate = iif(endsWith(GroupName, '/Male'), ChurnRate, toDouble(0)),",
				"          male_conquestRate = iif(endsWith(GroupName, '/Male'), ConquestRate, toDouble(0)),",
				"          female_churnRate = iif(endsWith(GroupName, '/Female'), ChurnRate, toDouble(0)),",
				"          female_conquestRate = iif(endsWith(GroupName, '/Female'), ConquestRate, toDouble(0))) ~> DeriveGenderColumns2020",
				"SplitModelTypes2021@ModelGender derive(market = 'UK',",
				"          year = '2021',",
				"          model = iif(GroupName == 'Porsche/Female' || GroupName == 'Porsche/Male', 'All Models',",
				"      iif(locate('/', GroupName) > 0, ",
				"        concat(trim(split(GroupName, '/')[1]), ' All'),",
				"        GroupName",
				"      )",
				"    ),",
				"          male_churnRate = iif(endsWith(GroupName, '/Male'), ChurnRate, toDouble(0)),",
				"          male_conquestRate = iif(endsWith(GroupName, '/Male'), ConquestRate, toDouble(0)),",
				"          female_churnRate = iif(endsWith(GroupName, '/Female'), ChurnRate, toDouble(0)),",
				"          female_conquestRate = iif(endsWith(GroupName, '/Female'), ConquestRate, toDouble(0))) ~> DeriveGenderColumns2021",
				"SplitModelTypes2022@ModelGender derive(market = 'UK',",
				"          year = '2022',",
				"          model = iif(GroupName == 'Porsche/Female' || GroupName == 'Porsche/Male', 'All Models',",
				"      iif(locate('/', GroupName) > 0, ",
				"        concat(trim(split(GroupName, '/')[1]), ' All'),",
				"        GroupName",
				"      )",
				"    ),",
				"          male_churnRate = iif(endsWith(GroupName, '/Male'), ChurnRate, toDouble(0)),",
				"          male_conquestRate = iif(endsWith(GroupName, '/Male'), toDouble(0), toDouble(0)),",
				"          female_churnRate = iif(endsWith(GroupName, '/Female'), ChurnRate, toDouble(0)),",
				"          female_conquestRate = iif(endsWith(GroupName, '/Female'), toDouble(0), toDouble(0))) ~> DeriveGenderColumns2022",
				"SplitModelTypes2023@ModelGender derive(market = 'UK',",
				"          year = '2023',",
				"          model = iif(GroupName == 'Porsche/Female' || GroupName == 'Porsche/Male', 'All Models',",
				"      iif(locate('/', GroupName) > 0, ",
				"        concat(trim(split(GroupName, '/')[1]), ' All'),",
				"        GroupName",
				"      )",
				"    ),",
				"          male_churnRate = iif(endsWith(GroupName, '/Male'), ChurnRate, toDouble(0)),",
				"          male_conquestRate = iif(endsWith(GroupName, '/Male'), ConquestRate, toDouble(0)),",
				"          female_churnRate = iif(endsWith(GroupName, '/Female'), ChurnRate, toDouble(0)),",
				"          female_conquestRate = iif(endsWith(GroupName, '/Female'), ConquestRate, toDouble(0))) ~> DeriveGenderColumns2023",
				"DeriveGenderColumns2019 aggregate(groupBy(market,",
				"          year,",
				"          model),",
				"     male_churnRate = max(male_churnRate),",
				"          male_conquestRate = max(male_conquestRate),",
				"          female_churnRate = max(female_churnRate),",
				"          female_conquestRate = max(female_conquestRate),",
				"          total_churnRate = (max(male_churnRate) + max(female_churnRate)) / 2,",
				"          total_conquestRate = (max(male_conquestRate) + max(female_conquestRate)) / 2) ~> AggregateGenderData2019",
				"DeriveGenderColumns2020 aggregate(groupBy(market,",
				"          year,",
				"          model),",
				"     male_churnRate = max(male_churnRate),",
				"          male_conquestRate = max(male_conquestRate),",
				"          female_churnRate = max(female_churnRate),",
				"          female_conquestRate = max(female_conquestRate),",
				"          total_churnRate = (max(male_churnRate) + max(female_churnRate)) / 2,",
				"          total_conquestRate = (max(male_conquestRate) + max(female_conquestRate)) / 2) ~> AggregateGenderData2020",
				"DeriveGenderColumns2021 aggregate(groupBy(market,",
				"          year,",
				"          model),",
				"     male_churnRate = max(male_churnRate),",
				"          male_conquestRate = max(male_conquestRate),",
				"          female_churnRate = max(female_churnRate),",
				"          female_conquestRate = max(female_conquestRate),",
				"          total_churnRate = (max(male_churnRate) + max(female_churnRate)) / 2,",
				"          total_conquestRate = (max(male_conquestRate) + max(female_conquestRate)) / 2) ~> AggregateGenderData2021",
				"DeriveGenderColumns2022 aggregate(groupBy(market,",
				"          year,",
				"          model),",
				"     male_churnRate = max(male_churnRate),",
				"          male_conquestRate = max(male_conquestRate),",
				"          female_churnRate = max(female_churnRate),",
				"          female_conquestRate = max(female_conquestRate),",
				"          total_churnRate = (max(male_churnRate) + max(female_churnRate)) / 2,",
				"          total_conquestRate = (max(male_conquestRate) + max(female_conquestRate)) / 2) ~> AggregateGenderData2022",
				"DeriveGenderColumns2023 aggregate(groupBy(market,",
				"          year,",
				"          model),",
				"     male_churnRate = max(male_churnRate),",
				"          male_conquestRate = max(male_conquestRate),",
				"          female_churnRate = max(female_churnRate),",
				"          female_conquestRate = max(female_conquestRate),",
				"          total_churnRate = (max(male_churnRate) + max(female_churnRate)) / 2,",
				"          total_conquestRate = (max(male_conquestRate) + max(female_conquestRate)) / 2) ~> AggregateGenderData2023",
				"SplitModelTypes2019@ModelEngine derive(market = 'UK',",
				"          year = '2019',",
				"          model = replace(GroupName, '/', ' '),",
				"          total_churnRate = toDouble(ChurnRate),",
				"          total_conquestRate = toDouble(ConquestRate)) ~> DeriveEngineColumns2019",
				"SplitModelTypes2020@ModelEngine derive(market = 'UK',",
				"          year = '2020',",
				"          model = replace(GroupName, '/', ' '),",
				"          total_churnRate = ChurnRate,",
				"          total_conquestRate = ConquestRate) ~> DeriveEngineColumns2020",
				"SplitModelTypes2021@ModelEngine derive(market = 'UK',",
				"          year = '2021',",
				"          model = replace(GroupName, '/', ' '),",
				"          total_churnRate = ChurnRate,",
				"          total_conquestRate = ConquestRate) ~> DeriveEngineColumns2021",
				"SplitModelTypes2022@ModelEngine derive(market = 'UK',",
				"          year = '2022',",
				"          model = replace(GroupName, '/', ' '),",
				"          total_churnRate = ChurnRate,",
				"          total_conquestRate = toDouble(0)) ~> DeriveEngineColumns2022",
				"SplitModelTypes2023@ModelEngine derive(market = 'UK',",
				"          year = '2023',",
				"          model = replace(GroupName, '/', ' '),",
				"          total_churnRate = ChurnRate,",
				"          total_conquestRate = ConquestRate) ~> DeriveEngineColumns2023",
				"AggregateGenderData2019, AggregateGenderData2020, AggregateGenderData2021, AggregateGenderData2022, AggregateGenderData2023, DeriveEngineColumns2019, DeriveEngineColumns2020, DeriveEngineColumns2021, DeriveEngineColumns2022, DeriveEngineColumns2023 union(byName: true)~> UnionAllData",
				"UnionAllData derive(data = @(",
				"      market,",
				"      year,",
				"      model,",
				"      male_churnRate,",
				"      male_conquestRate,",
				"      female_churnRate,",
				"      female_conquestRate,",
				"      total_churnRate,",
				"      total_conquestRate",
				"    )) ~> CreateDataArray",
				"CreateDataArray aggregate(groupBy(dummy = 1),",
				"     data = collect(data)) ~> AggregateToArray",
				"AggregateToArray select(mapColumn(",
				"          data",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectDataArray",
				"SelectDataArray sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'json',",
				"     fileSystem: 'output',",
				"     partitionFileNames:['churnConquestChartUK.json'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}