{
	"name": "pss_numberOfVehiclesPerHousehold",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "PSS",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "sink",
					"rejectedDataLinkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "RenameColumns"
				},
				{
					"name": "DeriveBasicData"
				},
				{
					"name": "FilterValidData"
				},
				{
					"name": "AggregateData"
				},
				{
					"name": "CalculatePercentages"
				},
				{
					"name": "AggregateBaseModelData"
				},
				{
					"name": "PrepareBaseModelData"
				},
				{
					"name": "AggregateAllModelsData"
				},
				{
					"name": "PrepareAllModelsData"
				},
				{
					"name": "UnionModelData"
				},
				{
					"name": "collectIntoArray"
				},
				{
					"name": "SelectArrayColumn"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ResponseId as string,",
				"          EndDate as string,",
				"          ED_MODEL_CODE as string,",
				"          ED_MODEL_YEAR as string,",
				"          {1711-1712} as string,",
				"          Q4601 as string,",
				"          Q4531 as string,",
				"          Q4609 as string,",
				"          Q5386 as string,",
				"          Q2002 as string,",
				"          Q2012 as string,",
				"          {170111} as integer,",
				"          {1721} as string,",
				"          {1731-1732} as string,",
				"          V1021 as string,",
				"          {1950} as integer,",
				"          {670} as string,",
				"          {671g_1_1_1} as string,",
				"          {671g_1_1_3} as string,",
				"          {671g_1_1_5} as string,",
				"          {711} as string,",
				"          {713g_1_121} as string,",
				"          {713g_1_3} as string,",
				"          {713g_1_5} as string,",
				"          {1961g_1_1_1} as string,",
				"          {1961g_1_1_3} as string,",
				"          {1961g_1_1_5} as string,",
				"          {3931g_3931} as string,",
				"          {3931g_3932} as string,",
				"          {3931g_3933} as string,",
				"          {3931g_3934} as string,",
				"          {3931g_3935} as string,",
				"          {3931g_3936} as string,",
				"          {3931g_3937} as string,",
				"          {3931g_3938} as string,",
				"          {3931g_3939} as string,",
				"          {3931g_3940} as string,",
				"          {3931g_3941} as string,",
				"          {1961g_2_1_1} as string,",
				"          {1961g_3_1_1} as string,",
				"          ED_AUTH_GROUP as string,",
				"          {3881g_38813883} as string,",
				"          {2674-2675} as string,",
				"          {1909-1910} as string,",
				"          Market as string,",
				"          Description as string,",
				"          Type as string,",
				"          Model_Row as string,",
				"          Derivate as string,",
				"          NBOSegment as string,",
				"          Drive as string,",
				"          Body as string,",
				"          PerformanceLevel as string,",
				"          TypeSOP as string,",
				"          TypeEOP as string,",
				"          Top as string,",
				"          Classic as string,",
				"          {170157} as string,",
				"          {1903-1904} as string,",
				"          {1923-1924} as string,",
				"          {2601-2602} as string,",
				"          {2702-2703} as string,",
				"          {3881g_38843886} as string,",
				"          {3881g_38873889} as string,",
				"          {3881g_38903892} as string,",
				"          {3881g_38933895} as string,",
				"          {3881g_38963898} as string,",
				"          {2051g_1001} as string,",
				"          {2051g_30168} as string,",
				"          {2051g_30269} as string,",
				"          {2051g_101} as string,",
				"          {2063} as string,",
				"          {2051g_901} as string,",
				"          {2051g_90273} as string,",
				"          {2051g_406} as string,",
				"          {2051g_30375} as string,",
				"          {2051g_60276} as string,",
				"          {2072} as string,",
				"          {2073} as string,",
				"          {2051g_604} as string,",
				"          {2075} as string,",
				"          {2051g_90381} as string,",
				"          {2051g_904} as string,",
				"          {2051g_50183} as string,",
				"          {2051g_41584} as string,",
				"          {208285} as string,",
				"          {2083} as string,",
				"          {208487} as string,",
				"          {209088} as string,",
				"          {209289} as string,",
				"          {2093} as string,",
				"          {2096} as string,",
				"          {2051g_1003} as string,",
				"          {2051g_50393} as string,",
				"          {210294} as string,",
				"          {2051g_1004} as string,",
				"          {2110} as string,",
				"          {211197} as string,",
				"          {211498} as string,",
				"          {2115} as string,",
				"          {2051g_413} as string,",
				"          {2117} as string,",
				"          {2051g_414102} as string,",
				"          {2119} as string,",
				"          {2051g_309104} as string,",
				"          {2122105} as string,",
				"          {2124} as string,",
				"          {2051g_611} as string,",
				"          {2128} as string,",
				"          {2129} as string,",
				"          {2051g_419110} as string,",
				"          {2051g_1006} as string,",
				"          {2051g_804112} as string,",
				"          {2051g_805} as string,",
				"          {2051g_803} as string,",
				"          {2136} as string,",
				"          {2138116} as string,",
				"          {2141} as string,",
				"          {2142} as string,",
				"          {2051g_703} as string,",
				"          {2051g_1002} as string,",
				"          {2145} as string,",
				"          {2146} as string,",
				"          {2147} as string,",
				"          {2154} as string,",
				"          {2051g_301125} as string,",
				"          {2051g_403} as string,",
				"          {2051g_404} as string,",
				"          {2051g_302128} as string,",
				"          {2051g_102} as string,",
				"          {2102130} as string,",
				"          {2051g_103} as string,",
				"          {2051g_902132} as string,",
				"          {2051g_303133} as string,",
				"          {2051g_602134} as string,",
				"          {2051g_304} as string,",
				"          {2090136} as string,",
				"          {2053} as string,",
				"          {2051g_903138} as string,",
				"          {2135} as string,",
				"          {2092140} as string,",
				"          {2080} as string,",
				"          {2082142} as string,",
				"          {2084143} as string,",
				"          {2087} as string,",
				"          {2088} as string,",
				"          {2091} as string,",
				"          {2051g_503147} as string,",
				"          {2100} as string,",
				"          {2101} as string,",
				"          {2104} as string,",
				"          {2105} as string,",
				"          {2106} as string,",
				"          {2111153} as string,",
				"          {2114154} as string,",
				"          {2051g_502} as string,",
				"          {2051g_414156} as string,",
				"          {2051g_309157} as string,",
				"          {2120} as string,",
				"          {2051g_415159} as string,",
				"          {2122160} as string,",
				"          {2051g_310} as string,",
				"          {2051g_419162} as string,",
				"          {2051g_804163} as string,",
				"          {2054} as string,",
				"          {2051g_501165} as string,",
				"          {2051g_504} as string,",
				"          {2051g_416} as string,",
				"          {2051g_417} as string,",
				"          {2138169} as string,",
				"          {2051g_1102_TEXT} as string,",
				"          Q4970 as string,",
				"          {2051g_1101} as string,",
				"          {713g_1_4} as string,",
				"          {713g_1_1174} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 select(mapColumn(",
				"          EndDate,",
				"          Q1701 = {170111},",
				"          Market,",
				"          Model_Row,",
				"          Derivate,",
				"          Drive,",
				"          Body,",
				"          PerformanceLevel,",
				"          Q1950 = {1950}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameColumns",
				"RenameColumns derive(market = case(",
				"          Market == 'PGCN', 'CN',",
				"          Market == 'PCGB', 'UK',",
				"          Market == 'PCNA', 'US',",
				"          Market == 'PD', 'DE',",
				"          Market",
				"     ),",
				"          year = year(toDate(EndDate)),",
				"          ModelGroup = iif(isNull(Derivate) || Derivate == '' || Derivate == Model_Row, ",
				"                 Model_Row + ' Basic', ",
				"                 iif(startsWith(Derivate, Model_Row), ",
				"                    Derivate, ",
				"                    Model_Row + ' ' + Derivate)),",
				"          BaseModel = trim(split(Model_Row, ' ')[1])) ~> DeriveBasicData",
				"DeriveBasicData filter(!isNull(DeriveBasicData@market) &&",
				"    DeriveBasicData@market != '' &&",
				"    !isNull(year) &&",
				"    !isNull(ModelGroup) &&",
				"    ModelGroup != '' &&",
				"    !isNull(Q1950)) ~> FilterValidData",
				"FilterValidData aggregate(groupBy(DeriveBasicData@market,",
				"          year,",
				"          ModelGroup,",
				"          BaseModel),",
				"     total_count = count(1),",
				"          male_count = countIf(Q1701 == 1),",
				"          female_count = countIf(Q1701 == 2),",
				"          total_vehicle1 = countIf(Q1950 == 1),",
				"          total_vehicle2 = countIf(Q1950 == 2),",
				"          total_vehicle3 = countIf(Q1950 == 3),",
				"          total_vehicle4 = countIf(Q1950 == 4),",
				"          total_vehicle5 = countIf(Q1950 == 5),",
				"          total_vehicle6 = countIf(Q1950 == 6),",
				"          total_vehicleMoreThan6 = countIf(Q1950 > 6),",
				"          male_vehicle1 = countIf(Q1701 == 1 && Q1950 == 1),",
				"          male_vehicle2 = countIf(Q1701 == 1 && Q1950 == 2),",
				"          male_vehicle3 = countIf(Q1701 == 1 && Q1950 == 3),",
				"          male_vehicle4 = countIf(Q1701 == 1 && Q1950 == 4),",
				"          male_vehicle5 = countIf(Q1701 == 1 && Q1950 == 5),",
				"          male_vehicle6 = countIf(Q1701 == 1 && Q1950 == 6),",
				"          male_vehicleMoreThan6 = countIf(Q1701 == 1 && Q1950 > 6),",
				"          female_vehicle1 = countIf(Q1701 == 2 && Q1950 == 1),",
				"          female_vehicle2 = countIf(Q1701 == 2 && Q1950 == 2),",
				"          female_vehicle3 = countIf(Q1701 == 2 && Q1950 == 3),",
				"          female_vehicle4 = countIf(Q1701 == 2 && Q1950 == 4),",
				"          female_vehicle5 = countIf(Q1701 == 2 && Q1950 == 5),",
				"          female_vehicle6 = countIf(Q1701 == 2 && Q1950 == 6),",
				"          female_vehicleMoreThan6 = countIf(Q1701 == 2 && Q1950 > 6)) ~> AggregateData",
				"UnionModelData derive(total_vehicle1 = round(toDouble(total_vehicle1) / toDouble(total_count), 2),",
				"          total_vehicle2 = round(toDouble(total_vehicle2) / toDouble(total_count), 2),",
				"          total_vehicle3 = round(toDouble(total_vehicle3) / toDouble(total_count), 2),",
				"          total_vehicle4 = round(toDouble(total_vehicle4) / toDouble(total_count), 2),",
				"          total_vehicle5 = round(toDouble(total_vehicle5) / toDouble(total_count), 2),",
				"          total_vehicle6 = round(toDouble(total_vehicle6) / toDouble(total_count), 2),",
				"          total_vehicleMoreThan6 = round(toDouble(total_vehicleMoreThan6) / toDouble(total_count), 2),",
				"          male_vehicle1 = round(toDouble(male_vehicle1) / toDouble(male_count), 2),",
				"          male_vehicle2 = round(toDouble(male_vehicle2) / toDouble(male_count), 2),",
				"          male_vehicle3 = round(toDouble(male_vehicle3) / toDouble(male_count), 2),",
				"          male_vehicle4 = round(toDouble(male_vehicle4) / toDouble(male_count), 2),",
				"          male_vehicle5 = round(toDouble(male_vehicle5) / toDouble(male_count), 2),",
				"          male_vehicle6 = round(toDouble(male_vehicle6) / toDouble(male_count), 2),",
				"          male_vehicleMoreThan6 = round(toDouble(male_vehicleMoreThan6) / toDouble(male_count), 2),",
				"          female_vehicle1 = round(toDouble(female_vehicle1) / toDouble(female_count), 2),",
				"          female_vehicle2 = round(toDouble(female_vehicle2) / toDouble(female_count), 2),",
				"          female_vehicle3 = round(toDouble(female_vehicle3) / toDouble(female_count), 2),",
				"          female_vehicle4 = round(toDouble(female_vehicle4) / toDouble(female_count), 2),",
				"          female_vehicle5 = round(toDouble(female_vehicle5) / toDouble(female_count), 2),",
				"          female_vehicle6 = round(toDouble(female_vehicle6) / toDouble(female_count), 2),",
				"          female_vehicleMoreThan6 = round(toDouble(female_vehicleMoreThan6) / toDouble(female_count), 2)) ~> CalculatePercentages",
				"FilterValidData aggregate(groupBy(DeriveBasicData@market,",
				"          year,",
				"          BaseModel),",
				"     total_count = count(1),",
				"          male_count = countIf(Q1701 == 1),",
				"          female_count = countIf(Q1701 == 2),",
				"          total_vehicle1 = countIf(Q1950 == 1),",
				"          total_vehicle2 = countIf(Q1950 == 2),",
				"          total_vehicle3 = countIf(Q1950 == 3),",
				"          total_vehicle4 = countIf(Q1950 == 4),",
				"          total_vehicle5 = countIf(Q1950 == 5),",
				"          total_vehicle6 = countIf(Q1950 == 6),",
				"          total_vehicleMoreThan6 = countIf(Q1950 > 6),",
				"          male_vehicle1 = countIf(Q1701 == 1 && Q1950 == 1),",
				"          male_vehicle2 = countIf(Q1701 == 1 && Q1950 == 2),",
				"          male_vehicle3 = countIf(Q1701 == 1 && Q1950 == 3),",
				"          male_vehicle4 = countIf(Q1701 == 1 && Q1950 == 4),",
				"          male_vehicle5 = countIf(Q1701 == 1 && Q1950 == 5),",
				"          male_vehicle6 = countIf(Q1701 == 1 && Q1950 == 6),",
				"          male_vehicleMoreThan6 = countIf(Q1701 == 1 && Q1950 > 6),",
				"          female_vehicle1 = countIf(Q1701 == 2 && Q1950 == 1),",
				"          female_vehicle2 = countIf(Q1701 == 2 && Q1950 == 2),",
				"          female_vehicle3 = countIf(Q1701 == 2 && Q1950 == 3),",
				"          female_vehicle4 = countIf(Q1701 == 2 && Q1950 == 4),",
				"          female_vehicle5 = countIf(Q1701 == 2 && Q1950 == 5),",
				"          female_vehicle6 = countIf(Q1701 == 2 && Q1950 == 6),",
				"          female_vehicleMoreThan6 = countIf(Q1701 == 2 && Q1950 > 6)) ~> AggregateBaseModelData",
				"AggregateBaseModelData derive(ModelGroup = BaseModel + ' All') ~> PrepareBaseModelData",
				"FilterValidData aggregate(groupBy(DeriveBasicData@market,",
				"          year),",
				"     total_count = count(1),",
				"          male_count = countIf(Q1701 == 1),",
				"          female_count = countIf(Q1701 == 2),",
				"          total_vehicle1 = countIf(Q1950 == 1),",
				"          total_vehicle2 = countIf(Q1950 == 2),",
				"          total_vehicle3 = countIf(Q1950 == 3),",
				"          total_vehicle4 = countIf(Q1950 == 4),",
				"          total_vehicle5 = countIf(Q1950 == 5),",
				"          total_vehicle6 = countIf(Q1950 == 6),",
				"          total_vehicleMoreThan6 = countIf(Q1950 > 6),",
				"          male_vehicle1 = countIf(Q1701 == 1 && Q1950 == 1),",
				"          male_vehicle2 = countIf(Q1701 == 1 && Q1950 == 2),",
				"          male_vehicle3 = countIf(Q1701 == 1 && Q1950 == 3),",
				"          male_vehicle4 = countIf(Q1701 == 1 && Q1950 == 4),",
				"          male_vehicle5 = countIf(Q1701 == 1 && Q1950 == 5),",
				"          male_vehicle6 = countIf(Q1701 == 1 && Q1950 == 6),",
				"          male_vehicleMoreThan6 = countIf(Q1701 == 1 && Q1950 > 6),",
				"          female_vehicle1 = countIf(Q1701 == 2 && Q1950 == 1),",
				"          female_vehicle2 = countIf(Q1701 == 2 && Q1950 == 2),",
				"          female_vehicle3 = countIf(Q1701 == 2 && Q1950 == 3),",
				"          female_vehicle4 = countIf(Q1701 == 2 && Q1950 == 4),",
				"          female_vehicle5 = countIf(Q1701 == 2 && Q1950 == 5),",
				"          female_vehicle6 = countIf(Q1701 == 2 && Q1950 == 6),",
				"          female_vehicleMoreThan6 = countIf(Q1701 == 2 && Q1950 > 6)) ~> AggregateAllModelsData",
				"AggregateAllModelsData derive(ModelGroup = 'All Models',",
				"          total_vehicle1 = round(toDouble(total_vehicle1) / toDouble(total_count), 2),",
				"          total_vehicle2 = round(toDouble(total_vehicle2) / toDouble(total_count), 2),",
				"          total_vehicle3 = round(toDouble(total_vehicle3) / toDouble(total_count), 2),",
				"          total_vehicle4 = round(toDouble(total_vehicle4) / toDouble(total_count), 2),",
				"          total_vehicle5 = round(toDouble(total_vehicle5) / toDouble(total_count), 2),",
				"          total_vehicle6 = round(toDouble(total_vehicle6) / toDouble(total_count), 2),",
				"          male_vehicle1 = round(toDouble(male_vehicle1) / toDouble(male_count), 2),",
				"          male_vehicle2 = round(toDouble(male_vehicle2) / toDouble(male_count), 2),",
				"          male_vehicle3 = round(toDouble(male_vehicle3) / toDouble(male_count), 2),",
				"          male_vehicle4 = round(toDouble(male_vehicle4) / toDouble(male_count), 2),",
				"          male_vehicle5 = round(toDouble(male_vehicle5) / toDouble(male_count), 2),",
				"          male_vehicle6 = round(toDouble(male_vehicle6) / toDouble(male_count), 2),",
				"          male_vehicleMoreThan6 = round(toDouble(male_vehicleMoreThan6) / toDouble(male_count), 2),",
				"          female_vehicle1 = round(toDouble(female_vehicle1) / toDouble(female_count), 2),",
				"          female_vehicle2 = round(toDouble(female_vehicle2) / toDouble(female_count), 2),",
				"          female_vehicle3 = round(toDouble(female_vehicle3) / toDouble(female_count), 2),",
				"          female_vehicle4 = round(toDouble(female_vehicle4) / toDouble(female_count), 2),",
				"          female_vehicle5 = round(toDouble(female_vehicle5) / toDouble(female_count), 2),",
				"          female_vehicle6 = round(toDouble(female_vehicle6) / toDouble(female_count), 2),",
				"          female_vehicleMoreThan6 = round(toDouble(female_vehicleMoreThan6) / toDouble(female_count), 2)) ~> PrepareAllModelsData",
				"PrepareAllModelsData, PrepareBaseModelData, AggregateData union(byName: false)~> UnionModelData",
				"CalculatePercentages aggregate(groupBy(dummy = 1),",
				"     data = collect(@(",
				"    market = market,",
				"    year = year,",
				"    model = ModelGroup,",
				"    total_count = total_count,",
				"    male_count = male_count,",
				"    female_count = female_count,",
				"    total_vehicle1 = total_vehicle1,",
				"    total_vehicle2 = total_vehicle2,",
				"    total_vehicle3 = total_vehicle3,",
				"    total_vehicle4 = total_vehicle4,",
				"    total_vehicle5 = total_vehicle5,",
				"    total_vehicle6 = total_vehicle6,",
				"    total_vehicleMoreThan6 = total_vehicleMoreThan6,",
				"    male_vehicle1 = male_vehicle1,",
				"    male_vehicle2 = male_vehicle2,",
				"    male_vehicle3 = male_vehicle3,",
				"    male_vehicle4 = male_vehicle4,",
				"    male_vehicle5 = male_vehicle5,",
				"    male_vehicle6 = male_vehicle6,",
				"    male_vehicleMoreThan6 = male_vehicleMoreThan6,",
				"    female_vehicle1 = female_vehicle1,",
				"    female_vehicle2 = female_vehicle2,",
				"    female_vehicle3 = female_vehicle3,",
				"    female_vehicle4 = female_vehicle4,",
				"    female_vehicle5 = female_vehicle5,",
				"    female_vehicle6 = female_vehicle6,",
				"    female_vehicleMoreThan6 = female_vehicleMoreThan6",
				"))) ~> collectIntoArray",
				"collectIntoArray select(mapColumn(",
				"          data",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectArrayColumn",
				"SelectArrayColumn sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'json',",
				"     fileSystem: 'output',",
				"     partitionFileNames:['numberOfVehiclesPerHousehold.json'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink"
			]
		}
	}
}