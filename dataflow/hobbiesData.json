{
	"name": "hobbiesData",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "FullData",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "SelectRelevantColumns"
				},
				{
					"name": "DeriveBasicColumns"
				},
				{
					"name": "AdjustBaseModel"
				},
				{
					"name": "DeriveHobbyColumn"
				},
				{
					"name": "FilterUnknownHobbies"
				},
				{
					"name": "AggregateData"
				},
				{
					"name": "AggregateBaseModelData"
				},
				{
					"name": "AggregateAllModelsData"
				},
				{
					"name": "PrepareBaseModelData"
				},
				{
					"name": "PrepareAllModelsData"
				},
				{
					"name": "UnionModelData"
				},
				{
					"name": "SelectFinalColumns"
				},
				{
					"name": "WrapInDataObject"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ResponseId as string,",
				"          EndDate as string,",
				"          ED_MODEL_CODE as string,",
				"          ED_MODEL_YEAR as string,",
				"          {1711-1712} as string,",
				"          Q4601 as integer,",
				"          Q4531 as string,",
				"          Q4609 as integer,",
				"          Q5386 as string,",
				"          Q2002 as integer,",
				"          Q2012 as string,",
				"          {2051g_1001} as integer,",
				"          {2051g_301} as integer,",
				"          {2051g_302} as integer,",
				"          {2051g_101} as integer,",
				"          {2063} as integer,",
				"          {2051g_901} as integer,",
				"          {2051g_902} as integer,",
				"          {2051g_406} as integer,",
				"          {2051g_604} as integer,",
				"          {2051g_303} as integer,",
				"          {2051g_602} as integer,",
				"          {2072} as integer,",
				"          {2075} as integer,",
				"          {2051g_903} as integer,",
				"          {2051g_904} as integer,",
				"          {2051g_501} as integer,",
				"          {2051g_415} as integer,",
				"          {2082} as integer,",
				"          {2083} as integer,",
				"          {2084} as integer,",
				"          {2090} as integer,",
				"          {2092} as integer,",
				"          {2093} as integer,",
				"          {2096} as integer,",
				"          {2051g_1003} as integer,",
				"          {2051g_503} as integer,",
				"          {2102} as integer,",
				"          {2051g_1004} as integer,",
				"          {2110} as integer,",
				"          {2111} as integer,",
				"          {2114} as integer,",
				"          {2115} as integer,",
				"          {2051g_413} as integer,",
				"          {2117} as integer,",
				"          {2051g_414} as integer,",
				"          {2119} as integer,",
				"          {2051g_309} as integer,",
				"          {2122} as integer,",
				"          {2124} as integer,",
				"          {2051g_611} as integer,",
				"          {2128} as integer,",
				"          {2129} as integer,",
				"          {2051g_419} as integer,",
				"          {2051g_1006} as integer,",
				"          {2051g_804} as integer,",
				"          {2051g_805} as integer,",
				"          {2051g_803} as integer,",
				"          {2136} as integer,",
				"          {2138} as integer,",
				"          {2141} as integer,",
				"          {2142} as integer,",
				"          {2051g_703} as integer,",
				"          {2051g_1002} as integer,",
				"          {2145} as integer,",
				"          {2146} as integer,",
				"          {2147} as integer,",
				"          {2154} as integer,",
				"          {2051g_403} as integer,",
				"          {2051g_404} as integer,",
				"          {2051g_102} as integer,",
				"          {2051g_103} as integer,",
				"          {2051g_304} as integer,",
				"          {2053} as integer,",
				"          {2135} as integer,",
				"          {2080} as integer,",
				"          {2087} as integer,",
				"          {2088} as integer,",
				"          {2091} as integer,",
				"          {2100} as integer,",
				"          {2101} as integer,",
				"          {2104} as integer,",
				"          {2105} as integer,",
				"          {2106} as integer,",
				"          {2051g_502} as integer,",
				"          {2120} as integer,",
				"          {2051g_310} as integer,",
				"          {2054} as integer,",
				"          {2051g_504} as integer,",
				"          {2051g_416} as integer,",
				"          {2051g_417} as integer,",
				"          Market as string,",
				"          Description as string,",
				"          Type as string,",
				"          Model_Row as string,",
				"          Derivate as string,",
				"          NBOSegment as string,",
				"          Drive as string,",
				"          Body as string,",
				"          PerformanceLevel as string,",
				"          TypeSOP as string,",
				"          TypeEOP as string,",
				"          Top as string,",
				"          Classic as string,",
				"          {170111} as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 select(mapColumn(",
				"          ResponseId,",
				"          EndDate,",
				"          ED_MODEL_CODE,",
				"          ED_MODEL_YEAR,",
				"          Market,",
				"          Description,",
				"          Type,",
				"          Model_Row,",
				"          Derivate,",
				"          NBOSegment,",
				"          Drive,",
				"          Body,",
				"          PerformanceLevel,",
				"          TypeSOP,",
				"          TypeEOP,",
				"          Top,",
				"          Classic,",
				"          {170111},",
				"          {2051g_1001},",
				"          {2051g_301},",
				"          {2051g_302},",
				"          {2051g_101},",
				"          {2063},",
				"          {2051g_901},",
				"          {2051g_902},",
				"          {2051g_406},",
				"          {2051g_604},",
				"          {2051g_303},",
				"          {2051g_602},",
				"          {2072},",
				"          {2075},",
				"          {2051g_903},",
				"          {2051g_904},",
				"          {2051g_501},",
				"          {2051g_415},",
				"          {2082},",
				"          {2083},",
				"          {2084},",
				"          {2090},",
				"          {2092},",
				"          {2093},",
				"          {2096},",
				"          {2051g_1003},",
				"          {2051g_503},",
				"          {2102},",
				"          {2051g_1004},",
				"          {2110},",
				"          {2111},",
				"          {2114},",
				"          {2115},",
				"          {2051g_413},",
				"          {2117},",
				"          {2051g_414},",
				"          {2119},",
				"          {2051g_309},",
				"          {2122},",
				"          {2124},",
				"          {2051g_611},",
				"          {2128},",
				"          {2129},",
				"          {2051g_419},",
				"          {2051g_1006},",
				"          {2051g_804},",
				"          {2051g_805},",
				"          {2051g_803},",
				"          {2136},",
				"          {2138},",
				"          {2141},",
				"          {2142},",
				"          {2051g_703},",
				"          {2051g_1002},",
				"          {2145},",
				"          {2146},",
				"          {2147},",
				"          {2154},",
				"          {2051g_403},",
				"          {2051g_404},",
				"          {2051g_102},",
				"          {2051g_103},",
				"          {2051g_304},",
				"          {2053},",
				"          {2135},",
				"          {2080},",
				"          {2087},",
				"          {2088},",
				"          {2091},",
				"          {2100},",
				"          {2101},",
				"          {2104},",
				"          {2105},",
				"          {2106},",
				"          {2051g_502},",
				"          {2120},",
				"          {2051g_310},",
				"          {2054},",
				"          {2051g_504},",
				"          {2051g_416},",
				"          {2051g_417}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectRelevantColumns",
				"SelectRelevantColumns derive(Year = toString(year(toDate(EndDate, 'yyyy-MM-dd'))),",
				"          BaseModel = trim(split(Model_Row, ' ')[1]),",
				"          Variant = iif(isNull(Derivate) || Derivate == '' || Derivate == Model_Row, 'Basic', ",
				"           replace(Derivate, trim(split(Model_Row, ' ')[1]) + ' ', '')),",
				"          MappedMarket = case(",
				"        Market == 'PCNA', 'US',",
				"        Market == 'PGCN', 'CN',",
				"        Market == 'PCGB', 'UK',",
				"        Market == 'PD', 'DE',",
				"        Market",
				"    )) ~> DeriveBasicColumns",
				"DeriveBasicColumns derive(BaseModel = iif(regexMatch(BaseModel, '^[0-9]+$'), '_' + BaseModel, BaseModel)) ~> AdjustBaseModel",
				"AdjustBaseModel derive(Hobby = case(",
				"    MappedMarket == 'US', case(",
				"        {2051g_1001} == 1, 'Arts and culture',",
				"        {2051g_301} == 1, 'Aviation/flying',",
				"        {2051g_302} == 1, 'Boating/Sailing/Yachting',",
				"        {2051g_101} == 1, 'Cars - Driving Events/Car shows',",
				"        {2102} == 1, 'Motorsport',",
				"        {2051g_902} == 1, 'Cooking',",
				"        {2051g_303} == 1, 'Cycling',",
				"        {2051g_602} == 1, 'Dance/Dancing',",
				"        {2090} == 1, 'Equestrian/Horses',",
				"        {2053} == 1, 'Fine Art - Collecting/Museums',",
				"        {2051g_903} == 1, 'Fine Dining/Dining Out',",
				"        {2135} == 1, 'Fine Wine',",
				"        {2092} == 1, 'Fishing',",
				"        {2080} == 1, 'Football - Playing/Watching',",
				"        {2082} == 1, 'Gardening/Landscaping',",
				"        {2084} == 1, 'Golf',",
				"        {2087} == 1, 'Hiking/Climbing',",
				"        {2088} == 1, 'Hockey - Playing/Watching',",
				"        {2091} == 1, 'Hunting',",
				"        {2051g_503} == 1, 'Martial arts',",
				"        {2100} == 1, 'Motor Sports - Watching',",
				"        {2101} == 1, 'Motorcycles',",
				"        {2104} == 1, 'Music - Listening/Attending',",
				"        {2105} == 1, 'Music - Playing/Performing',",
				"        {2106} == 1, 'My Pets',",
				"        {2111} == 1, 'Photography',",
				"        {2114} == 1, 'Reading',",
				"        {2051g_502} == 1, 'Jogging / Running',",
				"        {2051g_414} == 1, 'Shooting/Guns',",
				"        {2051g_309} == 1, 'Skiing/Snowboarding',",
				"        {2120} == 1, 'Skiing - Water',",
				"        {2051g_415} == 1, 'Soccer - Playing/Watching',",
				"        {2122} == 1, 'Spending time with my family',",
				"        {2051g_310} == 1, 'Surfing',",
				"        {2051g_419} == 1, 'Tennis',",
				"        {2051g_804} == 1, 'Traveling',",
				"        {2054} == 1, 'Woodworking/Arts & Crafts',",
				"        {2051g_501} == 1, 'Working Out/Gym/Crossfit',",
				"        {2051g_504} == 1, 'Yoga/Pilates',",
				"        {2051g_416} == 1, 'Racquetball/Squash/Pickleball',",
				"        {2051g_417} == 1, 'Swimming',",
				"        {2138} == 1, 'Others',",
				"        'Unknown'",
				"    ),",
				"    MappedMarket == 'CN', case(",
				"        {2051g_1001} == 1, 'Arts and culture',",
				"        {2063} == 1, 'Cars - driving',",
				"        {2051g_901} == 1, 'Cigars',",
				"        {2051g_902} == 1, 'Cooking',",
				"        {2051g_602} == 1, 'Dance / dancing',",
				"        {2072} == 1, 'Domestic traveling',",
				"        {2051g_604} == 1, 'Socializing',",
				"        {2075} == 1, 'Fashion',",
				"        {2051g_903} == 1, 'Fine dining / dining out',",
				"        {2051g_904} == 1, 'Fine wine',",
				"        {2051g_501} == 1, 'Fitness',",
				"        {2084} == 1, 'Golf',",
				"        {2090} == 1, 'Horse riding',",
				"        {2092} == 1, 'Fishing',",
				"        {2096} == 1, 'International traveling',",
				"        {2051g_1003} == 1, 'Karaoke',",
				"        {2102} == 1, 'Motorsport',",
				"        {2051g_1004} == 1, 'Music',",
				"        {2111} == 1, 'Photography',",
				"        {2114} == 1, 'Reading / books / literature',",
				"        {2117} == 1, 'Sailing',",
				"        {2119} == 1, 'Shopping',",
				"        {2122} == 1, 'Spending time with my family',",
				"        {2051g_611} == 1, 'Stock markets',",
				"        {2128} == 1, 'Technology / high technology',",
				"        {2051g_419} == 1, 'Tennis',",
				"        {2051g_1006} == 1, 'Theatre / opera',",
				"        {2051g_803} == 1, 'Wellness / beauty',",
				"        {2138} == 1, 'Others',",
				"        {2141} == 1, 'Video / online games',",
				"        {2142} == 1, 'Playing Cards',",
				"        {2051g_703} == 1, 'Online chatting / surfing',",
				"        {2051g_1002} == 1, 'Movies',",
				"        {2145} == 1, 'Mahjong',",
				"        {2146} == 1, 'Chess',",
				"        {2147} == 1, 'Sports',",
				"        'Unknown'",
				"    ),",
				"    MappedMarket == 'UK', case(",
				"        {2051g_1001} == 1, 'Arts and culture',",
				"        {2051g_301} == 1, 'Aviation / flying',",
				"        {2051g_302} == 1, 'Boating / sailing / yachting',",
				"        {2051g_101} == 1, 'Cars - collecting',",
				"        {2051g_902} == 1, 'Cooking',",
				"        {2051g_406} == 1, 'Cricket',",
				"        {2051g_303} == 1, 'Cycling / mountain biking',",
				"        {2072} == 1, 'Do it yourself',",
				"        {2051g_903} == 1, 'Fine dining / dining out',",
				"        {2051g_501} == 1, 'Fitness',",
				"        {2051g_415} == 1, 'Football / soccer / A-League',",
				"        {2082} == 1, 'Gardening / landscaping',",
				"        {2083} == 1, 'Going to the movies',",
				"        {2084} == 1, 'Golf',",
				"        {2090} == 1, 'Horse riding',",
				"        {2093} == 1, 'Hunting / fishing',",
				"        {2051g_503} == 1, 'Martial arts',",
				"        {2102} == 1, 'Motorsport',",
				"        {2051g_1004} == 1, 'Music',",
				"        {2110} == 1, 'Parachuting / Skydiving',",
				"        {2114} == 1, 'Reading / books / literature',",
				"        {2115} == 1, 'Roller skating / Inline skating',",
				"        {2051g_413} == 1, 'Rugby',",
				"        {2051g_414} == 1, 'Shooting / guns',",
				"        {2119} == 1, 'Shopping',",
				"        {2051g_309} == 1, 'Skiing / snowboarding',",
				"        {2124} == 1, 'Squash / tennis / badminton',",
				"        {2051g_611} == 1, 'Stock markets',",
				"        {2129} == 1, 'Television',",
				"        {2051g_1006} == 1, 'Theatre / opera',",
				"        {2051g_804} == 1, 'Traveling',",
				"        {2051g_805} == 1, 'Watches',",
				"        {2136} == 1, 'Wine / degusting / cigars',",
				"        {2138} == 1, 'Others',",
				"        {2154} == 1, 'Sailing / Sailboarding / Water Skiing',",
				"        'Unknown'",
				"    ),",
				"    'Unknown'",
				")) ~> DeriveHobbyColumn",
				"DeriveHobbyColumn filter(Hobby != 'Unknown') ~> FilterUnknownHobbies",
				"FilterUnknownHobbies aggregate(groupBy(MappedMarket,",
				"          Year,",
				"          Hobby,",
				"          Variant,",
				"          BaseModel),",
				"     male = sum(iif({170111} == 1, 1, 0)),",
				"          female = sum(iif({170111} == 2, 1, 0))) ~> AggregateData",
				"AggregateData aggregate(groupBy(MappedMarket,",
				"          Year,",
				"          Hobby,",
				"          BaseModel),",
				"     male = sum(male),",
				"          female = sum(female)) ~> AggregateBaseModelData",
				"AggregateData aggregate(groupBy(MappedMarket,",
				"          Year,",
				"          Hobby),",
				"     male = sum(male),",
				"          female = sum(female)) ~> AggregateAllModelsData",
				"AggregateBaseModelData derive(Variant = 'All') ~> PrepareBaseModelData",
				"AggregateAllModelsData derive(BaseModel = 'All Models',",
				"          Variant = '') ~> PrepareAllModelsData",
				"AggregateData, PrepareBaseModelData, PrepareAllModelsData union(byName: true)~> UnionModelData",
				"UnionModelData select(mapColumn(",
				"          market = MappedMarket,",
				"          year = Year,",
				"          key = Hobby,",
				"          male,",
				"          female,",
				"          variant = Variant,",
				"          model = BaseModel",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectFinalColumns",
				"SelectFinalColumns aggregate(groupBy(dummy = 1),",
				"     data = collect(@(",
				"          market = market,",
				"          year = year,",
				"          key = key,",
				"          male = male,",
				"          female = female,",
				"          variant = variant,",
				"          model = model",
				"     ))) ~> WrapInDataObject",
				"WrapInDataObject sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'json',",
				"     fileSystem: 'output',",
				"     partitionFileNames:['hobbiesChart.json'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          data",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}