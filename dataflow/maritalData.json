{
	"name": "maritalData",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "PSS",
						"type": "DatasetReference"
					},
					"name": "maritalData"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "maritalDataSink"
				}
			],
			"transformations": [
				{
					"name": "addDerivedColumns"
				},
				{
					"name": "filterValidMaritalData"
				},
				{
					"name": "aggregateMaritalData"
				},
				{
					"name": "aggregateBaseModelData"
				},
				{
					"name": "prepareBaseModelData"
				},
				{
					"name": "aggregateAllModelsData"
				},
				{
					"name": "prepareAllModelsData"
				},
				{
					"name": "unionModelData"
				},
				{
					"name": "calculateMaritalPercentages"
				},
				{
					"name": "selectFinalMaritalColumns"
				},
				{
					"name": "collectIntoArray"
				},
				{
					"name": "selectArrayColumn"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ResponseId as string,",
				"          EndDate as string,",
				"          ED_MODEL_CODE as string,",
				"          ED_MODEL_YEAR as string,",
				"          {1711-1712} as string,",
				"          Q4601 as string,",
				"          Q4531 as integer,",
				"          Q4609 as string,",
				"          Q5386 as string,",
				"          Q2002 as integer,",
				"          Q2012 as string,",
				"          {170111} as integer,",
				"          {1721} as integer,",
				"          {1731-1732} as string,",
				"          V1021 as string,",
				"          {1950} as string,",
				"          {670} as string,",
				"          {671g_1_1_1} as string,",
				"          {671g_1_1_3} as string,",
				"          {671g_1_1_5} as string,",
				"          {711} as integer,",
				"          {713g_1_121} as string,",
				"          {713g_1_3} as string,",
				"          {713g_1_5} as string,",
				"          {1961g_1_1_1} as string,",
				"          {1961g_1_1_3} as string,",
				"          {1961g_1_1_5} as string,",
				"          {3931g_3931} as string,",
				"          {3931g_3932} as string,",
				"          {3931g_3933} as string,",
				"          {3931g_3934} as string,",
				"          {3931g_3935} as string,",
				"          {3931g_3936} as string,",
				"          {3931g_3937} as string,",
				"          {3931g_3938} as string,",
				"          {3931g_3939} as string,",
				"          {3931g_3940} as string,",
				"          {3931g_3941} as string,",
				"          {1961g_2_1_1} as string,",
				"          {1961g_3_1_1} as string,",
				"          ED_AUTH_GROUP as string,",
				"          {3881g_38813883} as string,",
				"          {2674-2675} as string,",
				"          {1909-1910} as string,",
				"          Market as string,",
				"          Description as string,",
				"          Type as string,",
				"          Model_Row as string,",
				"          Derivate as string,",
				"          NBOSegment as string,",
				"          Drive as string,",
				"          Body as string,",
				"          PerformanceLevel as string,",
				"          TypeSOP as string,",
				"          TypeEOP as string,",
				"          Top as string,",
				"          Classic as string,",
				"          {170157} as string,",
				"          {1903-1904} as string,",
				"          {1923-1924} as string,",
				"          {2601-2602} as string,",
				"          {2702-2703} as string,",
				"          {3881g_38843886} as string,",
				"          {3881g_38873889} as string,",
				"          {3881g_38903892} as string,",
				"          {3881g_38933895} as string,",
				"          {3881g_38963898} as string,",
				"          {2051g_1001} as string,",
				"          {2051g_30168} as string,",
				"          {2051g_30269} as string,",
				"          {2051g_101} as string,",
				"          {2063} as string,",
				"          {2051g_901} as string,",
				"          {2051g_90273} as string,",
				"          {2051g_406} as string,",
				"          {2051g_30375} as string,",
				"          {2051g_60276} as string,",
				"          {2072} as string,",
				"          {2073} as string,",
				"          {2051g_604} as string,",
				"          {2075} as string,",
				"          {2051g_90381} as string,",
				"          {2051g_904} as string,",
				"          {2051g_50183} as string,",
				"          {2051g_41584} as string,",
				"          {208285} as string,",
				"          {2083} as string,",
				"          {208487} as string,",
				"          {209088} as string,",
				"          {209289} as string,",
				"          {2093} as string,",
				"          {2096} as string,",
				"          {2051g_1003} as string,",
				"          {2051g_50393} as string,",
				"          {210294} as string,",
				"          {2051g_1004} as string,",
				"          {2110} as string,",
				"          {211197} as string,",
				"          {211498} as string,",
				"          {2115} as string,",
				"          {2051g_413} as string,",
				"          {2117} as string,",
				"          {2051g_414102} as string,",
				"          {2119} as string,",
				"          {2051g_309104} as string,",
				"          {2122105} as string,",
				"          {2124} as string,",
				"          {2051g_611} as string,",
				"          {2128} as string,",
				"          {2129} as string,",
				"          {2051g_419110} as string,",
				"          {2051g_1006} as string,",
				"          {2051g_804112} as string,",
				"          {2051g_805} as string,",
				"          {2051g_803} as string,",
				"          {2136} as string,",
				"          {2138116} as string,",
				"          {2141} as string,",
				"          {2142} as string,",
				"          {2051g_703} as string,",
				"          {2051g_1002} as string,",
				"          {2145} as string,",
				"          {2146} as string,",
				"          {2147} as string,",
				"          {2154} as string,",
				"          {2051g_301125} as string,",
				"          {2051g_403} as string,",
				"          {2051g_404} as string,",
				"          {2051g_302128} as string,",
				"          {2051g_102} as string,",
				"          {2102130} as string,",
				"          {2051g_103} as string,",
				"          {2051g_902132} as string,",
				"          {2051g_303133} as string,",
				"          {2051g_602134} as string,",
				"          {2051g_304} as string,",
				"          {2090136} as string,",
				"          {2053} as string,",
				"          {2051g_903138} as string,",
				"          {2135} as string,",
				"          {2092140} as string,",
				"          {2080} as string,",
				"          {2082142} as string,",
				"          {2084143} as string,",
				"          {2087} as string,",
				"          {2088} as string,",
				"          {2091} as string,",
				"          {2051g_503147} as string,",
				"          {2100} as string,",
				"          {2101} as string,",
				"          {2104} as string,",
				"          {2105} as string,",
				"          {2106} as string,",
				"          {2111153} as string,",
				"          {2114154} as string,",
				"          {2051g_502} as string,",
				"          {2051g_414156} as string,",
				"          {2051g_309157} as string,",
				"          {2120} as string,",
				"          {2051g_415159} as string,",
				"          {2122160} as string,",
				"          {2051g_310} as string,",
				"          {2051g_419162} as string,",
				"          {2051g_804163} as string,",
				"          {2054} as string,",
				"          {2051g_501165} as string,",
				"          {2051g_504} as string,",
				"          {2051g_416} as string,",
				"          {2051g_417} as string,",
				"          {2138169} as string,",
				"          {2051g_1102_TEXT} as string,",
				"          Q4970 as string,",
				"          {2051g_1101} as string,",
				"          {713g_1_4} as string,",
				"          {713g_1_1174} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> maritalData",
				"maritalData derive(ModelGroup = iif(isNull(Derivate) || Derivate == '' || Derivate == Model_Row, ",
				"                     Model_Row + ' Basic', ",
				"                     iif(startsWith(Derivate, Model_Row), ",
				"                         Derivate, ",
				"                         Model_Row + ' ' + Derivate)),",
				"          Year = left(EndDate, 4),",
				"          BaseModel = trim(split(Model_Row, ' ')[1])) ~> addDerivedColumns",
				"addDerivedColumns filter(!isNull(Market) &&",
				"    Market != '' &&",
				"    !isNull(Year) &&",
				"    Year != '' &&",
				"    !isNull(ModelGroup) &&",
				"    ModelGroup != '' &&",
				"    !isNull({170111}) &&",
				"    ((Market == 'PCNA' && !isNull(Q4531)) ||",
				"    (Market != 'PCNA' && !isNull({1721})))) ~> filterValidMaritalData",
				"filterValidMaritalData aggregate(groupBy(Market,",
				"          Year,",
				"          ModelGroup,",
				"          BaseModel),",
				"     male_total = countIf({170111} == 1),",
				"          female_total = countIf({170111} == 2),",
				"          male_married = countIf({170111} == 1 && ((Market == 'PCNA' && (Q4531 == 1 || Q4531 == 2 || Q4531 == 7 || Q4531 == 8 || Q4531 == 9)) || ",
				"                                             (Market != 'PCNA' && {1721} == 1))),",
				"          male_single = countIf({170111} == 1 && ((Market == 'PCNA' && (Q4531 == 3 || Q4531 == 4 || Q4531 == 5 || Q4531 == 6)) || ",
				"                                            (Market != 'PCNA' && {1721} == 2))),",
				"          female_married = countIf({170111} == 2 && ((Market == 'PCNA' && (Q4531 == 1 || Q4531 == 2 || Q4531 == 7 || Q4531 == 8 || Q4531 == 9)) || ",
				"                                               (Market != 'PCNA' && {1721} == 1))),",
				"          female_single = countIf({170111} == 2 && ((Market == 'PCNA' && (Q4531 == 3 || Q4531 == 4 || Q4531 == 5 || Q4531 == 6)) || ",
				"                                              (Market != 'PCNA' && {1721} == 2)))) ~> aggregateMaritalData",
				"aggregateMaritalData aggregate(groupBy(Market,",
				"          Year,",
				"          BaseModel),",
				"     male_total = sum(male_total),",
				"          female_total = sum(female_total),",
				"          male_married = sum(male_married),",
				"          male_single = sum(male_single),",
				"          female_married = sum(female_married),",
				"          female_single = sum(female_single)) ~> aggregateBaseModelData",
				"aggregateBaseModelData derive(ModelGroup = BaseModel + ' All') ~> prepareBaseModelData",
				"filterValidMaritalData aggregate(groupBy(Market,",
				"          Year),",
				"     male_total = countIf({170111} == 1),",
				"          female_total = countIf({170111} == 2),",
				"          male_married = countIf({170111} == 1 && ((Market == 'PCNA' && (Q4531 == 1 || Q4531 == 2 || Q4531 == 7 || Q4531 == 8 || Q4531 == 9)) || ",
				"                                             (Market != 'PCNA' && {1721} == 1))),",
				"          male_single = countIf({170111} == 1 && ((Market == 'PCNA' && (Q4531 == 3 || Q4531 == 4 || Q4531 == 5 || Q4531 == 6)) || ",
				"                                            (Market != 'PCNA' && {1721} == 2))),",
				"          female_married = countIf({170111} == 2 && ((Market == 'PCNA' && (Q4531 == 1 || Q4531 == 2 || Q4531 == 7 || Q4531 == 8 || Q4531 == 9)) || ",
				"                                               (Market != 'PCNA' && {1721} == 1))),",
				"          female_single = countIf({170111} == 2 && ((Market == 'PCNA' && (Q4531 == 3 || Q4531 == 4 || Q4531 == 5 || Q4531 == 6)) || ",
				"                                              (Market != 'PCNA' && {1721} == 2)))) ~> aggregateAllModelsData",
				"aggregateAllModelsData derive(ModelGroup = 'All Models') ~> prepareAllModelsData",
				"aggregateMaritalData, prepareBaseModelData, prepareAllModelsData union(byName: true)~> unionModelData",
				"unionModelData derive(male_married = coalesce(round(1.0 * male_married / male_total, 2), 0.0),",
				"          male_single = coalesce(round(1.0 * male_single / male_total, 2), 0.0),",
				"          female_married = coalesce(round(1.0 * female_married / female_total, 2), 0.0),",
				"          female_single = coalesce(round(1.0 * female_single / female_total, 2), 0.0),",
				"          MappedMarket = case(",
				"        Market == 'PGCN', 'CN',",
				"        Market == 'PCGB', 'UK',",
				"        Market == 'PCNA', 'US',",
				"        Market == 'PD', 'DE',",
				"        Market",
				"    )) ~> calculateMaritalPercentages",
				"calculateMaritalPercentages select(mapColumn(",
				"          market = MappedMarket,",
				"          year = Year,",
				"          model = ModelGroup,",
				"          male_married,",
				"          male_single,",
				"          female_married,",
				"          female_single",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> selectFinalMaritalColumns",
				"selectFinalMaritalColumns aggregate(groupBy(dummy = 1),",
				"     data = collect(@(market = market,",
				"                 year = year,",
				"                 model = model,",
				"                 male_married = male_married,",
				"                 male_single = male_single,",
				"                 female_married = female_married,",
				"                 female_single = female_single))) ~> collectIntoArray",
				"collectIntoArray select(mapColumn(",
				"          data",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> selectArrayColumn",
				"selectArrayColumn sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'json',",
				"     fileSystem: 'output',",
				"     partitionFileNames:['maritalStatusChart.json'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> maritalDataSink"
			]
		}
	}
}