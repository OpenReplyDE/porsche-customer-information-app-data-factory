{
	"name": "maritalData",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Full_data",
						"type": "DatasetReference"
					},
					"name": "maritalData"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "maritalDataSinkfewd"
				}
			],
			"transformations": [
				{
					"name": "addDerivedColumns"
				},
				{
					"name": "filterValidMaritalData"
				},
				{
					"name": "aggregateMaritalData"
				},
				{
					"name": "calculateMaritalPercentages"
				},
				{
					"name": "selectFinalMaritalColumns"
				},
				{
					"name": "collectIntoArray"
				},
				{
					"name": "selectArrayColumn"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ResponseId as string,",
				"          EndDate as string,",
				"          ED_MODEL_CODE as string,",
				"          ED_MODEL_YEAR as string,",
				"          {1711-1712} as integer,",
				"          Q4601 as string,",
				"          Q4531 as integer,",
				"          Q4609 as string,",
				"          Q5386 as string,",
				"          Q2002 as string,",
				"          Q2012 as string,",
				"          {1701} as integer,",
				"          {1721} as integer,",
				"          {1731-1732} as string,",
				"          V1021 as string,",
				"          {1950} as string,",
				"          {670} as string,",
				"          {671g_1_1_1} as string,",
				"          {671g_1_1_3} as string,",
				"          {671g_1_1_5} as string,",
				"          {711} as string,",
				"          {713g_1_1} as string,",
				"          {713g_1_3} as string,",
				"          {713g_1_5} as string,",
				"          {1961g_1_1_1} as string,",
				"          {1961g_1_1_3} as string,",
				"          {1961g_1_1_5} as string,",
				"          {3931g_3931} as string,",
				"          {3931g_3932} as string,",
				"          {3931g_3933} as string,",
				"          {3931g_3934} as string,",
				"          {3931g_3935} as string,",
				"          {3931g_3936} as string,",
				"          {3931g_3937} as string,",
				"          {3931g_3938} as string,",
				"          {3931g_3939} as string,",
				"          {3931g_3940} as string,",
				"          {3931g_3941} as string,",
				"          {1961g_2_1_1} as string,",
				"          {1961g_3_1_1} as string,",
				"          ED_AUTH_GROUP as string,",
				"          {3881g_38813883} as string,",
				"          {2674-2675} as string,",
				"          {1909-1910} as string,",
				"          Market as string,",
				"          Description as string,",
				"          Type as string,",
				"          Model_Row as string,",
				"          Derivate as string,",
				"          NBOSegment as string,",
				"          Drive as string,",
				"          Body as string,",
				"          PerformanceLevel as string,",
				"          TypeSOP as string,",
				"          TypeEOP as string,",
				"          Top as string,",
				"          Classic as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> maritalData",
				"maritalData derive(ModelGroup = iif(isNull(Derivate) || Derivate == '' || Derivate == Model_Row, ",
				"                     Model_Row + ' Basic', ",
				"                     iif(startsWith(Derivate, Model_Row), ",
				"                         Derivate, ",
				"                         Model_Row + ' ' + Derivate)),",
				"          Year = left(EndDate, 4)) ~> addDerivedColumns",
				"addDerivedColumns filter(!isNull(Market) &&",
				"    Market != '' &&",
				"    !isNull(Year) &&",
				"    Year != '' &&",
				"    !isNull(ModelGroup) &&",
				"    ModelGroup != '' &&",
				"    ((Market == 'PCNA' && !isNull(Q4531)) ||",
				"    (Market != 'PCNA' && !isNull({1721})))) ~> filterValidMaritalData",
				"filterValidMaritalData aggregate(groupBy(Market,",
				"          Year,",
				"          ModelGroup),",
				"     totalCount = count(),",
				"          marriedCount = countIf(iif(Market == 'PCNA', Q4531 == 1, {1721} == 1)),",
				"          singleCount = countIf(iif(Market == 'PCNA', Q4531 == 2, {1721} == 2))) ~> aggregateMaritalData",
				"aggregateMaritalData derive(married = round(toDouble(marriedCount) / toDouble(totalCount), 2),",
				"          single = round(toDouble(singleCount) / toDouble(totalCount), 2),",
				"          MappedMarket = case(",
				"       Market == 'PGCN', 'CN',",
				"       Market == 'PCGB', 'UK',",
				"       Market == 'PCNA', 'US',",
				"       Market == 'PD', 'DE',",
				"       Market",
				"    )) ~> calculateMaritalPercentages",
				"calculateMaritalPercentages select(mapColumn(",
				"          market = MappedMarket,",
				"          year = Year,",
				"          model = ModelGroup,",
				"          married,",
				"          single",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> selectFinalMaritalColumns",
				"selectFinalMaritalColumns aggregate(groupBy(dummy = 1),",
				"     data = collect(@(market = market,",
				"                 year = year,",
				"                 model = model,",
				"                 married = married,",
				"                 single = single))) ~> collectIntoArray",
				"collectIntoArray select(mapColumn(",
				"          data",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> selectArrayColumn",
				"selectArrayColumn sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'json',",
				"     fileSystem: 'output',",
				"     partitionFileNames:['maritalStatusChart.json'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> maritalDataSinkfewd"
			]
		}
	}
}