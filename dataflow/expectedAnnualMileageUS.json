{
	"name": "expectedAnnualMileageUS",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CAP_US_2019",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "CAP_US_2021",
						"type": "DatasetReference"
					},
					"name": "source3"
				},
				{
					"dataset": {
						"referenceName": "CAP_US_2022",
						"type": "DatasetReference"
					},
					"name": "source4"
				},
				{
					"dataset": {
						"referenceName": "CAP_UK_2023",
						"type": "DatasetReference"
					},
					"name": "source5"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "SplitModelTypes2019"
				},
				{
					"name": "SplitModelTypes2021"
				},
				{
					"name": "SplitModelTypes2022"
				},
				{
					"name": "SplitModelTypes2023"
				},
				{
					"name": "DeriveGenderColumns2019"
				},
				{
					"name": "DeriveGenderColumns2021"
				},
				{
					"name": "DeriveGenderColumns2022"
				},
				{
					"name": "DeriveGenderColumns2023"
				},
				{
					"name": "AggregateGenderData2019"
				},
				{
					"name": "AggregateGenderData2021"
				},
				{
					"name": "AggregateGenderData2022"
				},
				{
					"name": "AggregateGenderData2023"
				},
				{
					"name": "DeriveEngineColumns2019"
				},
				{
					"name": "DeriveEngineColumns2021"
				},
				{
					"name": "DeriveEngineColumns2022"
				},
				{
					"name": "DeriveEngineColumns2023"
				},
				{
					"name": "UnionAllData"
				},
				{
					"name": "CreateDataArray"
				},
				{
					"name": "AggregateToArray"
				},
				{
					"name": "SelectDataArray"
				}
			],
			"scriptLines": [
				"source(output(",
				"          GroupName as string,",
				"          GroupType as string,",
				"          {kmPerYear=0} as double,",
				"          {kmPerYear=5000} as double,",
				"          {kmPerYear=10000} as double,",
				"          {kmPerYear=15000} as double,",
				"          {kmPerYear=20000} as double,",
				"          {kmPerYear=25000} as double,",
				"          {kmPerYear=30000} as double,",
				"          {kmPerYear=35000} as double,",
				"          {kmPerYear=40000} as double,",
				"          {kmPerYear=45000} as double,",
				"          {kmPerYear=50000} as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          GroupName as string,",
				"          GroupType as string,",
				"          {kmPerYear=0} as double,",
				"          {kmPerYear=5000} as double,",
				"          {kmPerYear=10000} as double,",
				"          {kmPerYear=15000} as double,",
				"          {kmPerYear=20000} as double,",
				"          {kmPerYear=25000} as double,",
				"          {kmPerYear=30000} as double,",
				"          {kmPerYear=35000} as double,",
				"          {kmPerYear=40000} as double,",
				"          {kmPerYear=45000} as double,",
				"          {kmPerYear=50000} as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source3",
				"source(output(",
				"          GroupName as string,",
				"          GroupType as string,",
				"          {kmPerYear=0} as double,",
				"          {kmPerYear=5000} as double,",
				"          {kmPerYear=10000} as double,",
				"          {kmPerYear=15000} as double,",
				"          {kmPerYear=20000} as double,",
				"          {kmPerYear=25000} as double,",
				"          {kmPerYear=30000} as double,",
				"          {kmPerYear=35000} as double,",
				"          {kmPerYear=40000} as double,",
				"          {kmPerYear=45000} as double,",
				"          {kmPerYear=50000} as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source4",
				"source(output(",
				"          GroupName as string,",
				"          GroupType as string,",
				"          {kmPerYear=0} as double,",
				"          {kmPerYear=5000} as double,",
				"          {kmPerYear=10000} as double,",
				"          {kmPerYear=15000} as double,",
				"          {kmPerYear=20000} as double,",
				"          {kmPerYear=25000} as double,",
				"          {kmPerYear=30000} as double,",
				"          {kmPerYear=35000} as double,",
				"          {kmPerYear=40000} as double,",
				"          {kmPerYear=45000} as double,",
				"          {kmPerYear=50000} as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source5",
				"source1 split(GroupType == 'Model/Gender',",
				"     GroupType == 'Model/Engine',",
				"     disjoint: false) ~> SplitModelTypes2019@(ModelGender, ModelEngine)",
				"source3 split(GroupType == 'Model/Gender',",
				"     GroupType == 'Model/Engine',",
				"     disjoint: false) ~> SplitModelTypes2021@(ModelGender, ModelEngine)",
				"source4 split(GroupType == 'Model/Gender',",
				"     GroupType == 'Model/Engine',",
				"     disjoint: false) ~> SplitModelTypes2022@(ModelGender, ModelEngine)",
				"source5 split(GroupType == 'Model/Gender',",
				"     GroupType == 'Model/Engine',",
				"     disjoint: false) ~> SplitModelTypes2023@(ModelGender, ModelEngine)",
				"SplitModelTypes2019@ModelGender derive(market = 'US',",
				"          year = '2019',",
				"          model = iif(GroupName == 'Porsche/Female' || GroupName == 'Porsche/Male', 'All Models',",
				"     iif(locate('/', GroupName) > 0, ",
				"       concat(trim(split(GroupName, '/')[1]), ' All'),",
				"       GroupName",
				"     )",
				"    ),",
				"          male_0k = iif(endsWith(GroupName, '/Male'), toDouble({kmPerYear=0}), toDouble(0)),",
				"          male_5k = iif(endsWith(GroupName, '/Male'), toDouble({kmPerYear=5000}), toDouble(0)),",
				"          male_10k = iif(endsWith(GroupName, '/Male'), toDouble({kmPerYear=10000}), toDouble(0)),",
				"          male_15k = iif(endsWith(GroupName, '/Male'), toDouble({kmPerYear=15000}), toDouble(0)),",
				"          male_20k = iif(endsWith(GroupName, '/Male'), toDouble({kmPerYear=20000}), toDouble(0)),",
				"          male_25k = iif(endsWith(GroupName, '/Male'), toDouble({kmPerYear=25000}), toDouble(0)),",
				"          male_30k = iif(endsWith(GroupName, '/Male'), toDouble({kmPerYear=30000}), toDouble(0)),",
				"          male_35k = iif(endsWith(GroupName, '/Male'), toDouble({kmPerYear=35000}), toDouble(0)),",
				"          male_40k = iif(endsWith(GroupName, '/Male'), toDouble({kmPerYear=40000}), toDouble(0)),",
				"          male_45k = iif(endsWith(GroupName, '/Male'), toDouble({kmPerYear=45000}), toDouble(0)),",
				"          male_50k = iif(endsWith(GroupName, '/Male'), toDouble({kmPerYear=50000}), toDouble(0)),",
				"          female_0k = iif(endsWith(GroupName, '/Female'), toDouble({kmPerYear=0}), toDouble(0)),",
				"          female_5k = iif(endsWith(GroupName, '/Female'), toDouble({kmPerYear=5000}), toDouble(0)),",
				"          female_10k = iif(endsWith(GroupName, '/Female'), toDouble({kmPerYear=10000}), toDouble(0)),",
				"          female_15k = iif(endsWith(GroupName, '/Female'), toDouble({kmPerYear=15000}), toDouble(0)),",
				"          female_20k = iif(endsWith(GroupName, '/Female'), toDouble({kmPerYear=20000}), toDouble(0)),",
				"          female_25k = iif(endsWith(GroupName, '/Female'), toDouble({kmPerYear=25000}), toDouble(0)),",
				"          female_30k = iif(endsWith(GroupName, '/Female'), toDouble({kmPerYear=30000}), toDouble(0)),",
				"          female_35k = iif(endsWith(GroupName, '/Female'), toDouble({kmPerYear=35000}), toDouble(0)),",
				"          female_40k = iif(endsWith(GroupName, '/Female'), toDouble({kmPerYear=40000}), toDouble(0)),",
				"          female_45k = iif(endsWith(GroupName, '/Female'), toDouble({kmPerYear=45000}), toDouble(0)),",
				"          female_50k = iif(endsWith(GroupName, '/Female'), toDouble({kmPerYear=50000}), toDouble(0))) ~> DeriveGenderColumns2019",
				"SplitModelTypes2021@ModelGender derive(market = 'US',",
				"          year = '2021',",
				"          model = iif(GroupName == 'Porsche/Female' || GroupName == 'Porsche/Male', 'All Models',",
				"     iif(locate('/', GroupName) > 0, ",
				"       concat(trim(split(GroupName, '/')[1]), ' All'),",
				"       GroupName",
				"     )",
				"    ),",
				"          male_0k = iif(endsWith(GroupName, '/Male'), {kmPerYear=0}, toDouble(0)),",
				"          male_5k = iif(endsWith(GroupName, '/Male'), {kmPerYear=5000}, toDouble(0)),",
				"          male_10k = iif(endsWith(GroupName, '/Male'), {kmPerYear=10000}, toDouble(0)),",
				"          male_15k = iif(endsWith(GroupName, '/Male'), {kmPerYear=15000}, toDouble(0)),",
				"          male_20k = iif(endsWith(GroupName, '/Male'), {kmPerYear=20000}, toDouble(0)),",
				"          male_25k = iif(endsWith(GroupName, '/Male'), {kmPerYear=25000}, toDouble(0)),",
				"          male_30k = iif(endsWith(GroupName, '/Male'), {kmPerYear=30000}, toDouble(0)),",
				"          male_35k = iif(endsWith(GroupName, '/Male'), {kmPerYear=35000}, toDouble(0)),",
				"          male_40k = iif(endsWith(GroupName, '/Male'), {kmPerYear=40000}, toDouble(0)),",
				"          male_45k = iif(endsWith(GroupName, '/Male'), {kmPerYear=45000}, toDouble(0)),",
				"          male_50k = iif(endsWith(GroupName, '/Male'), {kmPerYear=50000}, toDouble(0)),",
				"          female_0k = iif(endsWith(GroupName, '/Female'), {kmPerYear=0}, toDouble(0)),",
				"          female_5k = iif(endsWith(GroupName, '/Female'), {kmPerYear=5000}, toDouble(0)),",
				"          female_10k = iif(endsWith(GroupName, '/Female'), {kmPerYear=10000}, toDouble(0)),",
				"          female_15k = iif(endsWith(GroupName, '/Female'), {kmPerYear=15000}, toDouble(0)),",
				"          female_20k = iif(endsWith(GroupName, '/Female'), {kmPerYear=20000}, toDouble(0)),",
				"          female_25k = iif(endsWith(GroupName, '/Female'), {kmPerYear=25000}, toDouble(0)),",
				"          female_30k = iif(endsWith(GroupName, '/Female'), {kmPerYear=30000}, toDouble(0)),",
				"          female_35k = iif(endsWith(GroupName, '/Female'), {kmPerYear=35000}, toDouble(0)),",
				"          female_40k = iif(endsWith(GroupName, '/Female'), {kmPerYear=40000}, toDouble(0)),",
				"          female_45k = iif(endsWith(GroupName, '/Female'), {kmPerYear=45000}, toDouble(0)),",
				"          female_50k = iif(endsWith(GroupName, '/Female'), {kmPerYear=50000}, toDouble(0))) ~> DeriveGenderColumns2021",
				"SplitModelTypes2022@ModelGender derive(market = 'US',",
				"          year = '2022',",
				"          model = iif(GroupName == 'Porsche/Female' || GroupName == 'Porsche/Male', 'All Models',",
				"     iif(locate('/', GroupName) > 0, ",
				"       concat(trim(split(GroupName, '/')[1]), ' All'),",
				"       GroupName",
				"     )",
				"    ),",
				"          male_0k = iif(endsWith(GroupName, '/Male'), {kmPerYear=0}, toDouble(0)),",
				"          male_5k = iif(endsWith(GroupName, '/Male'), {kmPerYear=5000}, toDouble(0)),",
				"          male_10k = iif(endsWith(GroupName, '/Male'), {kmPerYear=10000}, toDouble(0)),",
				"          male_15k = iif(endsWith(GroupName, '/Male'), {kmPerYear=15000}, toDouble(0)),",
				"          male_20k = iif(endsWith(GroupName, '/Male'), {kmPerYear=20000}, toDouble(0)),",
				"          male_25k = iif(endsWith(GroupName, '/Male'), {kmPerYear=25000}, toDouble(0)),",
				"          male_30k = iif(endsWith(GroupName, '/Male'), {kmPerYear=30000}, toDouble(0)),",
				"          male_35k = iif(endsWith(GroupName, '/Male'), {kmPerYear=35000}, toDouble(0)),",
				"          male_40k = iif(endsWith(GroupName, '/Male'), {kmPerYear=40000}, toDouble(0)),",
				"          male_45k = iif(endsWith(GroupName, '/Male'), {kmPerYear=45000}, toDouble(0)),",
				"          male_50k = iif(endsWith(GroupName, '/Male'), {kmPerYear=50000}, toDouble(0)),",
				"          female_0k = iif(endsWith(GroupName, '/Female'), {kmPerYear=0}, toDouble(0)),",
				"          female_5k = iif(endsWith(GroupName, '/Female'), {kmPerYear=5000}, toDouble(0)),",
				"          female_10k = iif(endsWith(GroupName, '/Female'), {kmPerYear=10000}, toDouble(0)),",
				"          female_15k = iif(endsWith(GroupName, '/Female'), {kmPerYear=15000}, toDouble(0)),",
				"          female_20k = iif(endsWith(GroupName, '/Female'), {kmPerYear=20000}, toDouble(0)),",
				"          female_25k = iif(endsWith(GroupName, '/Female'), {kmPerYear=25000}, toDouble(0)),",
				"          female_30k = iif(endsWith(GroupName, '/Female'), {kmPerYear=30000}, toDouble(0)),",
				"          female_35k = iif(endsWith(GroupName, '/Female'), {kmPerYear=35000}, toDouble(0)),",
				"          female_40k = iif(endsWith(GroupName, '/Female'), {kmPerYear=40000}, toDouble(0)),",
				"          female_45k = iif(endsWith(GroupName, '/Female'), {kmPerYear=45000}, toDouble(0)),",
				"          female_50k = iif(endsWith(GroupName, '/Female'), {kmPerYear=50000}, toDouble(0))) ~> DeriveGenderColumns2022",
				"SplitModelTypes2023@ModelGender derive(market = 'US',",
				"          year = '2023',",
				"          model = iif(GroupName == 'Porsche/Female' || GroupName == 'Porsche/Male', 'All Models',",
				"     iif(locate('/', GroupName) > 0, ",
				"       concat(trim(split(GroupName, '/')[1]), ' All'),",
				"       GroupName",
				"     )",
				"    ),",
				"          male_0k = iif(endsWith(GroupName, '/Male'), {kmPerYear=0}, toDouble(0)),",
				"          male_5k = iif(endsWith(GroupName, '/Male'), {kmPerYear=5000}, toDouble(0)),",
				"          male_10k = iif(endsWith(GroupName, '/Male'), {kmPerYear=10000}, toDouble(0)),",
				"          male_15k = iif(endsWith(GroupName, '/Male'), {kmPerYear=15000}, toDouble(0)),",
				"          male_20k = iif(endsWith(GroupName, '/Male'), {kmPerYear=20000}, toDouble(0)),",
				"          male_25k = iif(endsWith(GroupName, '/Male'), {kmPerYear=25000}, toDouble(0)),",
				"          male_30k = iif(endsWith(GroupName, '/Male'), {kmPerYear=30000}, toDouble(0)),",
				"          male_35k = iif(endsWith(GroupName, '/Male'), {kmPerYear=35000}, toDouble(0)),",
				"          male_40k = iif(endsWith(GroupName, '/Male'), {kmPerYear=40000}, toDouble(0)),",
				"          male_45k = iif(endsWith(GroupName, '/Male'), {kmPerYear=45000}, toDouble(0)),",
				"          male_50k = iif(endsWith(GroupName, '/Male'), {kmPerYear=50000}, toDouble(0)),",
				"          female_0k = iif(endsWith(GroupName, '/Female'), {kmPerYear=0}, toDouble(0)),",
				"          female_5k = iif(endsWith(GroupName, '/Female'), {kmPerYear=5000}, toDouble(0)),",
				"          female_10k = iif(endsWith(GroupName, '/Female'), {kmPerYear=10000}, toDouble(0)),",
				"          female_15k = iif(endsWith(GroupName, '/Female'), {kmPerYear=15000}, toDouble(0)),",
				"          female_20k = iif(endsWith(GroupName, '/Female'), {kmPerYear=20000}, toDouble(0)),",
				"          female_25k = iif(endsWith(GroupName, '/Female'), {kmPerYear=25000}, toDouble(0)),",
				"          female_30k = iif(endsWith(GroupName, '/Female'), {kmPerYear=30000}, toDouble(0)),",
				"          female_35k = iif(endsWith(GroupName, '/Female'), {kmPerYear=35000}, toDouble(0)),",
				"          female_40k = iif(endsWith(GroupName, '/Female'), {kmPerYear=40000}, toDouble(0)),",
				"          female_45k = iif(endsWith(GroupName, '/Female'), {kmPerYear=45000}, toDouble(0)),",
				"          female_50k = iif(endsWith(GroupName, '/Female'), {kmPerYear=50000}, toDouble(0))) ~> DeriveGenderColumns2023",
				"DeriveGenderColumns2019 aggregate(groupBy(market,",
				"          year,",
				"          model),",
				"     male_0k = max(male_0k),",
				"          male_5k = max(male_5k),",
				"          male_10k = max(male_10k),",
				"          male_15k = max(male_15k),",
				"          male_20k = max(male_20k),",
				"          male_25k = max(male_25k),",
				"          male_30k = max(male_30k),",
				"          male_35k = max(male_35k),",
				"          male_40k = max(male_40k),",
				"          male_45k = max(male_45k),",
				"          male_50k = max(male_50k),",
				"          female_0k = max(female_0k),",
				"          female_5k = max(female_5k),",
				"          female_10k = max(female_10k),",
				"          female_15k = max(female_15k),",
				"          female_20k = max(female_20k),",
				"          female_25k = max(female_25k),",
				"          female_30k = max(female_30k),",
				"          female_35k = max(female_35k),",
				"          female_40k = max(female_40k),",
				"          female_45k = max(female_45k),",
				"          female_50k = max(female_50k),",
				"          total_0k = (max(male_0k) + max(female_0k)) / 2,",
				"          total_5k = (max(male_5k) + max(female_5k)) / 2,",
				"          total_10k = (max(male_10k) + max(female_10k)) / 2,",
				"          total_15k = (max(male_15k) + max(female_15k)) / 2,",
				"          total_20k = (max(male_20k) + max(female_20k)) / 2,",
				"          total_25k = (max(male_25k) + max(female_25k)) / 2,",
				"          total_30k = (max(male_30k) + max(female_30k)) / 2,",
				"          total_35k = (max(male_35k) + max(female_35k)) / 2,",
				"          total_40k = (max(male_40k) + max(female_40k)) / 2,",
				"          total_45k = (max(male_45k) + max(female_45k)) / 2,",
				"          total_50k = (max(male_50k) + max(female_50k)) / 2) ~> AggregateGenderData2019",
				"DeriveGenderColumns2021 aggregate(groupBy(market,",
				"          year,",
				"          model),",
				"     male_0k = max(male_0k),",
				"          male_5k = max(male_5k),",
				"          male_10k = max(male_10k),",
				"          male_15k = max(male_15k),",
				"          male_20k = max(male_20k),",
				"          male_25k = max(male_25k),",
				"          male_30k = max(male_30k),",
				"          male_35k = max(male_35k),",
				"          male_40k = max(male_40k),",
				"          male_45k = max(male_45k),",
				"          male_50k = max(male_50k),",
				"          female_0k = max(female_0k),",
				"          female_5k = max(female_5k),",
				"          female_10k = max(female_10k),",
				"          female_15k = max(female_15k),",
				"          female_20k = max(female_20k),",
				"          female_25k = max(female_25k),",
				"          female_30k = max(female_30k),",
				"          female_35k = max(female_35k),",
				"          female_40k = max(female_40k),",
				"          female_45k = max(female_45k),",
				"          female_50k = max(female_50k),",
				"          total_0k = (max(male_0k) + max(female_0k)) / 2,",
				"          total_5k = (max(male_5k) + max(female_5k)) / 2,",
				"          total_10k = (max(male_10k) + max(female_10k)) / 2,",
				"          total_15k = (max(male_15k) + max(female_15k)) / 2,",
				"          total_20k = (max(male_20k) + max(female_20k)) / 2,",
				"          total_25k = (max(male_25k) + max(female_25k)) / 2,",
				"          total_30k = (max(male_30k) + max(female_30k)) / 2,",
				"          total_35k = (max(male_35k) + max(female_35k)) / 2,",
				"          total_40k = (max(male_40k) + max(female_40k)) / 2,",
				"          total_45k = (max(male_45k) + max(female_45k)) / 2,",
				"          total_50k = (max(male_50k) + max(female_50k)) / 2) ~> AggregateGenderData2021",
				"DeriveGenderColumns2022 aggregate(groupBy(market,",
				"          year,",
				"          model),",
				"     male_0k = max(male_0k),",
				"          male_5k = max(male_5k),",
				"          male_10k = max(male_10k),",
				"          male_15k = max(male_15k),",
				"          male_20k = max(male_20k),",
				"          male_25k = max(male_25k),",
				"          male_30k = max(male_30k),",
				"          male_35k = max(male_35k),",
				"          male_40k = max(male_40k),",
				"          male_45k = max(male_45k),",
				"          male_50k = max(male_50k),",
				"          female_0k = max(female_0k),",
				"          female_5k = max(female_5k),",
				"          female_10k = max(female_10k),",
				"          female_15k = max(female_15k),",
				"          female_20k = max(female_20k),",
				"          female_25k = max(female_25k),",
				"          female_30k = max(female_30k),",
				"          female_35k = max(female_35k),",
				"          female_40k = max(female_40k),",
				"          female_45k = max(female_45k),",
				"          female_50k = max(female_50k),",
				"          total_0k = (max(male_0k) + max(female_0k)) / 2,",
				"          total_5k = (max(male_5k) + max(female_5k)) / 2,",
				"          total_10k = (max(male_10k) + max(female_10k)) / 2,",
				"          total_15k = (max(male_15k) + max(female_15k)) / 2,",
				"          total_20k = (max(male_20k) + max(female_20k)) / 2,",
				"          total_25k = (max(male_25k) + max(female_25k)) / 2,",
				"          total_30k = (max(male_30k) + max(female_30k)) / 2,",
				"          total_35k = (max(male_35k) + max(female_35k)) / 2,",
				"          total_40k = (max(male_40k) + max(female_40k)) / 2,",
				"          total_45k = (max(male_45k) + max(female_45k)) / 2,",
				"          total_50k = (max(male_50k) + max(female_50k)) / 2) ~> AggregateGenderData2022",
				"DeriveGenderColumns2023 aggregate(groupBy(market,",
				"          year,",
				"          model),",
				"     male_0k = max(male_0k),",
				"          male_5k = max(male_5k),",
				"          male_10k = max(male_10k),",
				"          male_15k = max(male_15k),",
				"          male_20k = max(male_20k),",
				"          male_25k = max(male_25k),",
				"          male_30k = max(male_30k),",
				"          male_35k = max(male_35k),",
				"          male_40k = max(male_40k),",
				"          male_45k = max(male_45k),",
				"          male_50k = max(male_50k),",
				"          female_0k = max(female_0k),",
				"          female_5k = max(female_5k),",
				"          female_10k = max(female_10k),",
				"          female_15k = max(female_15k),",
				"          female_20k = max(female_20k),",
				"          female_25k = max(female_25k),",
				"          female_30k = max(female_30k),",
				"          female_35k = max(female_35k),",
				"          female_40k = max(female_40k),",
				"          female_45k = max(female_45k),",
				"          female_50k = max(female_50k),",
				"          total_0k = (max(male_0k) + max(female_0k)) / 2,",
				"          total_5k = (max(male_5k) + max(female_5k)) / 2,",
				"          total_10k = (max(male_10k) + max(female_10k)) / 2,",
				"          total_15k = (max(male_15k) + max(female_15k)) / 2,",
				"          total_20k = (max(male_20k) + max(female_20k)) / 2,",
				"          total_25k = (max(male_25k) + max(female_25k)) / 2,",
				"          total_30k = (max(male_30k) + max(female_30k)) / 2,",
				"          total_35k = (max(male_35k) + max(female_35k)) / 2,",
				"          total_40k = (max(male_40k) + max(female_40k)) / 2,",
				"          total_45k = (max(male_45k) + max(female_45k)) / 2,",
				"          total_50k = (max(male_50k) + max(female_50k)) / 2) ~> AggregateGenderData2023",
				"SplitModelTypes2019@ModelEngine derive(market = 'US',",
				"          year = '2019',",
				"          model = replace(GroupName, '/', ' '),",
				"          total_0k = toDouble({kmPerYear=0}),",
				"          total_5k = toDouble({kmPerYear=5000}),",
				"          total_10k = toDouble({kmPerYear=10000}),",
				"          total_15k = toDouble({kmPerYear=15000}),",
				"          total_20k = toDouble({kmPerYear=20000}),",
				"          total_25k = toDouble({kmPerYear=25000}),",
				"          total_30k = toDouble({kmPerYear=30000}),",
				"          total_35k = toDouble({kmPerYear=35000}),",
				"          total_40k = toDouble({kmPerYear=40000}),",
				"          total_45k = toDouble({kmPerYear=45000}),",
				"          total_50k = toDouble({kmPerYear=50000})) ~> DeriveEngineColumns2019",
				"SplitModelTypes2021@ModelEngine derive(market = 'US',",
				"          year = '2021',",
				"          model = replace(GroupName, '/', ' '),",
				"          total_0k = {kmPerYear=0},",
				"          total_5k = {kmPerYear=5000},",
				"          total_10k = {kmPerYear=10000},",
				"          total_15k = {kmPerYear=15000},",
				"          total_20k = {kmPerYear=20000},",
				"          total_25k = {kmPerYear=25000},",
				"          total_30k = {kmPerYear=30000},",
				"          total_35k = {kmPerYear=35000},",
				"          total_40k = {kmPerYear=40000},",
				"          total_45k = {kmPerYear=45000},",
				"          total_50k = {kmPerYear=50000}) ~> DeriveEngineColumns2021",
				"SplitModelTypes2022@ModelEngine derive(market = 'US',",
				"          year = '2022',",
				"          model = replace(GroupName, '/', ' '),",
				"          total_0k = {kmPerYear=0},",
				"          total_5k = {kmPerYear=5000},",
				"          total_10k = {kmPerYear=10000},",
				"          total_15k = {kmPerYear=15000},",
				"          total_20k = {kmPerYear=20000},",
				"          total_25k = {kmPerYear=25000},",
				"          total_30k = {kmPerYear=30000},",
				"          total_35k = {kmPerYear=35000},",
				"          total_40k = {kmPerYear=40000},",
				"          total_45k = {kmPerYear=45000},",
				"          total_50k = {kmPerYear=50000}) ~> DeriveEngineColumns2022",
				"SplitModelTypes2023@ModelEngine derive(market = 'US',",
				"          year = '2023',",
				"          model = replace(GroupName, '/', ' '),",
				"          total_0k = {kmPerYear=0},",
				"          total_5k = {kmPerYear=5000},",
				"          total_10k = {kmPerYear=10000},",
				"          total_15k = {kmPerYear=15000},",
				"          total_20k = {kmPerYear=20000},",
				"          total_25k = {kmPerYear=25000},",
				"          total_30k = {kmPerYear=30000},",
				"          total_35k = {kmPerYear=35000},",
				"          total_40k = {kmPerYear=40000},",
				"          total_45k = {kmPerYear=45000},",
				"          total_50k = {kmPerYear=50000}) ~> DeriveEngineColumns2023",
				"AggregateGenderData2019, AggregateGenderData2021, AggregateGenderData2022, AggregateGenderData2023, DeriveEngineColumns2019, DeriveEngineColumns2021, DeriveEngineColumns2022, DeriveEngineColumns2023 union(byName: true)~> UnionAllData",
				"UnionAllData derive(data = @(",
				"     market,",
				"     year,",
				"     model,",
				"     male_0k,",
				"     male_5k,",
				"     male_10k,",
				"     male_15k,",
				"     male_20k,",
				"     male_25k,",
				"     male_30k,",
				"     male_35k,",
				"     male_40k,",
				"     male_45k,",
				"     male_50k,",
				"     female_0k,",
				"     female_5k,",
				"     female_10k,",
				"     female_15k,",
				"     female_20k,",
				"     female_25k,",
				"     female_30k,",
				"     female_35k,",
				"     female_40k,",
				"     female_45k,",
				"     female_50k,",
				"     total_0k,",
				"     total_5k,",
				"     total_10k,",
				"     total_15k,",
				"     total_20k,",
				"     total_25k,",
				"     total_30k,",
				"     total_35k,",
				"     total_40k,",
				"     total_45k,",
				"     total_50k",
				"    )) ~> CreateDataArray",
				"CreateDataArray aggregate(groupBy(dummy = 1),",
				"     data = collect(data)) ~> AggregateToArray",
				"AggregateToArray select(mapColumn(",
				"          data",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectDataArray",
				"SelectDataArray sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'json',",
				"     fileSystem: 'output',",
				"     partitionFileNames:['expectedAnnualMileageUS.json'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}