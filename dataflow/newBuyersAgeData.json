{
	"name": "newBuyersAgeData",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "PSS",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "newBuyersAgeData"
				}
			],
			"transformations": [
				{
					"name": "RenameColumns"
				},
				{
					"name": "AddDerivedColumns"
				},
				{
					"name": "FilterValidData"
				},
				{
					"name": "AggregateGenderData"
				},
				{
					"name": "AggregateBaseModelData"
				},
				{
					"name": "PrepareBaseModelData"
				},
				{
					"name": "AggregateAllModels"
				},
				{
					"name": "PrepareAllModelsData"
				},
				{
					"name": "UnionModelData"
				},
				{
					"name": "CalculatePercentages"
				},
				{
					"name": "SelectFinalColumns"
				},
				{
					"name": "CollectAllData"
				},
				{
					"name": "FlattenOutput"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ResponseId as string,",
				"          EndDate as string,",
				"          ED_MODEL_CODE as string,",
				"          ED_MODEL_YEAR as string,",
				"          {1711-1712} as integer,",
				"          Q4601 as string,",
				"          Q4531 as string,",
				"          Q4609 as string,",
				"          Q5386 as string,",
				"          Q2002 as integer,",
				"          Q2012 as string,",
				"          {170111} as integer,",
				"          {1721} as string,",
				"          {1731-1732} as string,",
				"          V1021 as string,",
				"          {1950} as string,",
				"          {670} as string,",
				"          {671g_1_1_1} as string,",
				"          {671g_1_1_3} as string,",
				"          {671g_1_1_5} as string,",
				"          {711} as integer,",
				"          {713g_1_121} as string,",
				"          {713g_1_3} as string,",
				"          {713g_1_5} as string,",
				"          {1961g_1_1_1} as string,",
				"          {1961g_1_1_3} as string,",
				"          {1961g_1_1_5} as string,",
				"          {3931g_3931} as string,",
				"          {3931g_3932} as string,",
				"          {3931g_3933} as string,",
				"          {3931g_3934} as string,",
				"          {3931g_3935} as string,",
				"          {3931g_3936} as string,",
				"          {3931g_3937} as string,",
				"          {3931g_3938} as string,",
				"          {3931g_3939} as string,",
				"          {3931g_3940} as string,",
				"          {3931g_3941} as string,",
				"          {1961g_2_1_1} as string,",
				"          {1961g_3_1_1} as string,",
				"          ED_AUTH_GROUP as string,",
				"          {3881g_38813883} as string,",
				"          {2674-2675} as string,",
				"          {1909-1910} as string,",
				"          Market as string,",
				"          Description as string,",
				"          Type as string,",
				"          Model_Row as string,",
				"          Derivate as string,",
				"          NBOSegment as string,",
				"          Drive as string,",
				"          Body as string,",
				"          PerformanceLevel as string,",
				"          TypeSOP as string,",
				"          TypeEOP as string,",
				"          Top as string,",
				"          Classic as string,",
				"          {170157} as string,",
				"          {1903-1904} as string,",
				"          {1923-1924} as string,",
				"          {2601-2602} as string,",
				"          {2702-2703} as string,",
				"          {3881g_38843886} as string,",
				"          {3881g_38873889} as string,",
				"          {3881g_38903892} as string,",
				"          {3881g_38933895} as string,",
				"          {3881g_38963898} as string,",
				"          {2051g_1001} as string,",
				"          {2051g_30168} as string,",
				"          {2051g_30269} as string,",
				"          {2051g_101} as string,",
				"          {2063} as string,",
				"          {2051g_901} as string,",
				"          {2051g_90273} as string,",
				"          {2051g_406} as string,",
				"          {2051g_30375} as string,",
				"          {2051g_60276} as string,",
				"          {2072} as string,",
				"          {2073} as string,",
				"          {2051g_604} as string,",
				"          {2075} as string,",
				"          {2051g_90381} as string,",
				"          {2051g_904} as string,",
				"          {2051g_50183} as string,",
				"          {2051g_41584} as string,",
				"          {208285} as string,",
				"          {2083} as string,",
				"          {208487} as string,",
				"          {209088} as string,",
				"          {209289} as string,",
				"          {2093} as string,",
				"          {2096} as string,",
				"          {2051g_1003} as string,",
				"          {2051g_50393} as string,",
				"          {210294} as string,",
				"          {2051g_1004} as string,",
				"          {2110} as string,",
				"          {211197} as string,",
				"          {211498} as string,",
				"          {2115} as string,",
				"          {2051g_413} as string,",
				"          {2117} as string,",
				"          {2051g_414102} as string,",
				"          {2119} as string,",
				"          {2051g_309104} as string,",
				"          {2122105} as string,",
				"          {2124} as string,",
				"          {2051g_611} as string,",
				"          {2128} as string,",
				"          {2129} as string,",
				"          {2051g_419110} as string,",
				"          {2051g_1006} as string,",
				"          {2051g_804112} as string,",
				"          {2051g_805} as string,",
				"          {2051g_803} as string,",
				"          {2136} as string,",
				"          {2138116} as string,",
				"          {2141} as string,",
				"          {2142} as string,",
				"          {2051g_703} as string,",
				"          {2051g_1002} as string,",
				"          {2145} as string,",
				"          {2146} as string,",
				"          {2147} as string,",
				"          {2154} as string,",
				"          {2051g_301125} as string,",
				"          {2051g_403} as string,",
				"          {2051g_404} as string,",
				"          {2051g_302128} as string,",
				"          {2051g_102} as string,",
				"          {2102130} as string,",
				"          {2051g_103} as string,",
				"          {2051g_902132} as string,",
				"          {2051g_303133} as string,",
				"          {2051g_602134} as string,",
				"          {2051g_304} as string,",
				"          {2090136} as string,",
				"          {2053} as string,",
				"          {2051g_903138} as string,",
				"          {2135} as string,",
				"          {2092140} as string,",
				"          {2080} as string,",
				"          {2082142} as string,",
				"          {2084143} as string,",
				"          {2087} as string,",
				"          {2088} as string,",
				"          {2091} as string,",
				"          {2051g_503147} as string,",
				"          {2100} as string,",
				"          {2101} as string,",
				"          {2104} as string,",
				"          {2105} as string,",
				"          {2106} as string,",
				"          {2111153} as string,",
				"          {2114154} as string,",
				"          {2051g_502} as string,",
				"          {2051g_414156} as string,",
				"          {2051g_309157} as string,",
				"          {2120} as string,",
				"          {2051g_415159} as string,",
				"          {2122160} as string,",
				"          {2051g_310} as string,",
				"          {2051g_419162} as string,",
				"          {2051g_804163} as string,",
				"          {2054} as string,",
				"          {2051g_501165} as string,",
				"          {2051g_504} as string,",
				"          {2051g_416} as string,",
				"          {2051g_417} as string,",
				"          {2138169} as string,",
				"          {2051g_1102_TEXT} as string,",
				"          Q4970 as string,",
				"          {2051g_1101} as string,",
				"          {713g_1_4} as string,",
				"          {713g_1_1174} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 select(mapColumn(",
				"          ResponseId,",
				"          EndDate,",
				"          ED_MODEL_CODE,",
				"          ED_MODEL_YEAR,",
				"          Q1711_1712 = {1711-1712},",
				"          Q4601,",
				"          Q4531,",
				"          Q4609,",
				"          Q5386,",
				"          Q2002,",
				"          Q2012,",
				"          Q1701 = {170111},",
				"          Q1721 = {1721},",
				"          {1731-1732},",
				"          V1021,",
				"          {1950},",
				"          {670},",
				"          {671g_1_1_1},",
				"          {671g_1_1_3},",
				"          {671g_1_1_5},",
				"          {711},",
				"          {713g_1_1} = {713g_1_121},",
				"          {713g_1_3},",
				"          {713g_1_5},",
				"          {1961g_1_1_1},",
				"          {1961g_1_1_3},",
				"          {1961g_1_1_5},",
				"          {3931g_3931},",
				"          {3931g_3932},",
				"          {3931g_3933},",
				"          {3931g_3934},",
				"          {3931g_3935},",
				"          {3931g_3936},",
				"          {3931g_3937},",
				"          {3931g_3938},",
				"          {3931g_3939},",
				"          {3931g_3940},",
				"          {3931g_3941},",
				"          {1961g_2_1_1},",
				"          {1961g_3_1_1},",
				"          ED_AUTH_GROUP,",
				"          {3881g_38813883},",
				"          {2674-2675},",
				"          {1909-1910},",
				"          Market,",
				"          Description,",
				"          Type,",
				"          Model_Row,",
				"          Derivate,",
				"          NBOSegment,",
				"          Drive,",
				"          Body,",
				"          PerformanceLevel,",
				"          TypeSOP,",
				"          TypeEOP,",
				"          Top,",
				"          Classic",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameColumns",
				"RenameColumns derive(ModelGroup = iif(isNull(Derivate) || Derivate == '' || Derivate == Model_Row, ",
				"           Model_Row + ' Basic', ",
				"           iif(startsWith(Derivate, Model_Row), ",
				"             Derivate, ",
				"             Model_Row + ' ' + Derivate)),",
				"          Year = toString(year(toDate(EndDate, 'yyyy-MM-dd'))),",
				"          BaseModel = trim(split(Model_Row, ' ')[1])) ~> AddDerivedColumns",
				"AddDerivedColumns filter(!isNull(Market) &&",
				"Market != '' &&",
				"!isNull(Year) &&",
				"Year != '' &&",
				"!isNull(ModelGroup) &&",
				"ModelGroup != ''  &&",
				"!isNull(Q1711_1712)) ~> FilterValidData",
				"FilterValidData aggregate(groupBy(Market,",
				"          Year,",
				"          ModelGroup),",
				"     all_total = sum(1),",
				"          all_ageUnder29 = sum(iif(Q1711_1712 < 30, 1, 0)),",
				"          all_age30To39 = sum(iif(Q1711_1712 >= 30 && Q1711_1712 < 40, 1, 0)),",
				"          all_age40To49 = sum(iif(Q1711_1712 >= 40 && Q1711_1712 < 50, 1, 0)),",
				"          all_age50To59 = sum(iif(Q1711_1712 >= 50 && Q1711_1712 < 60, 1, 0)),",
				"          all_age60Plus = sum(iif(Q1711_1712 >= 60, 1, 0)),",
				"          male_total = sum(iif(Q1701 == 1, 1, 0)),",
				"          male_ageUnder29 = sum(iif(Q1701 == 1 && Q1711_1712 < 30, 1, 0)),",
				"          male_age30To39 = sum(iif(Q1701 == 1 && Q1711_1712 >= 30 && Q1711_1712 < 40, 1, 0)),",
				"          male_age40To49 = sum(iif(Q1701 == 1 && Q1711_1712 >= 40 && Q1711_1712 < 50, 1, 0)),",
				"          male_age50To59 = sum(iif(Q1701 == 1 && Q1711_1712 >= 50 && Q1711_1712 < 60, 1, 0)),",
				"          male_age60Plus = sum(iif(Q1701 == 1 && Q1711_1712 >= 60, 1, 0)),",
				"          female_total = sum(iif(Q1701 == 2, 1, 0)),",
				"          female_ageUnder29 = sum(iif(Q1701 == 2 && Q1711_1712 < 30, 1, 0)),",
				"          female_age30To39 = sum(iif(Q1701 == 2 && Q1711_1712 >= 30 && Q1711_1712 < 40, 1, 0)),",
				"          female_age40To49 = sum(iif(Q1701 == 2 && Q1711_1712 >= 40 && Q1711_1712 < 50, 1, 0)),",
				"          female_age50To59 = sum(iif(Q1701 == 2 && Q1711_1712 >= 50 && Q1711_1712 < 60, 1, 0)),",
				"          female_age60Plus = sum(iif(Q1701 == 2 && Q1711_1712 >= 60, 1, 0))) ~> AggregateGenderData",
				"FilterValidData aggregate(groupBy(Market,",
				"          Year,",
				"          BaseModel),",
				"     all_total = sum(1),",
				"          all_ageUnder29 = sum(iif(Q1711_1712 < 30, 1, 0)),",
				"          all_age30To39 = sum(iif(Q1711_1712 >= 30 && Q1711_1712 < 40, 1, 0)),",
				"          all_age40To49 = sum(iif(Q1711_1712 >= 40 && Q1711_1712 < 50, 1, 0)),",
				"          all_age50To59 = sum(iif(Q1711_1712 >= 50 && Q1711_1712 < 60, 1, 0)),",
				"          all_age60Plus = sum(iif(Q1711_1712 >= 60, 1, 0)),",
				"          male_total = sum(iif(Q1701 == 1, 1, 0)),",
				"          male_ageUnder29 = sum(iif(Q1701 == 1 && Q1711_1712 < 30, 1, 0)),",
				"          male_age30To39 = sum(iif(Q1701 == 1 && Q1711_1712 >= 30 && Q1711_1712 < 40, 1, 0)),",
				"          male_age40To49 = sum(iif(Q1701 == 1 && Q1711_1712 >= 40 && Q1711_1712 < 50, 1, 0)),",
				"          male_age50To59 = sum(iif(Q1701 == 1 && Q1711_1712 >= 50 && Q1711_1712 < 60, 1, 0)),",
				"          male_age60Plus = sum(iif(Q1701 == 1 && Q1711_1712 >= 60, 1, 0)),",
				"          female_total = sum(iif(Q1701 == 2, 1, 0)),",
				"          female_ageUnder29 = sum(iif(Q1701 == 2 && Q1711_1712 < 30, 1, 0)),",
				"          female_age30To39 = sum(iif(Q1701 == 2 && Q1711_1712 >= 30 && Q1711_1712 < 40, 1, 0)),",
				"          female_age40To49 = sum(iif(Q1701 == 2 && Q1711_1712 >= 40 && Q1711_1712 < 50, 1, 0)),",
				"          female_age50To59 = sum(iif(Q1701 == 2 && Q1711_1712 >= 50 && Q1711_1712 < 60, 1, 0)),",
				"          female_age60Plus = sum(iif(Q1701 == 2 && Q1711_1712 >= 60, 1, 0))) ~> AggregateBaseModelData",
				"AggregateBaseModelData derive(ModelGroup = BaseModel + ' All') ~> PrepareBaseModelData",
				"FilterValidData aggregate(groupBy(Market,",
				"          Year),",
				"     all_total = sum(1),",
				"          all_ageUnder29 = sum(iif(Q1711_1712 < 30, 1, 0)),",
				"          all_age30To39 = sum(iif(Q1711_1712 >= 30 && Q1711_1712 < 40, 1, 0)),",
				"          all_age40To49 = sum(iif(Q1711_1712 >= 40 && Q1711_1712 < 50, 1, 0)),",
				"          all_age50To59 = sum(iif(Q1711_1712 >= 50 && Q1711_1712 < 60, 1, 0)),",
				"          all_age60Plus = sum(iif(Q1711_1712 >= 60, 1, 0)),",
				"          male_total = sum(iif(Q1701 == 1, 1, 0)),",
				"          male_ageUnder29 = sum(iif(Q1701 == 1 && Q1711_1712 < 30, 1, 0)),",
				"          male_age30To39 = sum(iif(Q1701 == 1 && Q1711_1712 >= 30 && Q1711_1712 < 40, 1, 0)),",
				"          male_age40To49 = sum(iif(Q1701 == 1 && Q1711_1712 >= 40 && Q1711_1712 < 50, 1, 0)),",
				"          male_age50To59 = sum(iif(Q1701 == 1 && Q1711_1712 >= 50 && Q1711_1712 < 60, 1, 0)),",
				"          male_age60Plus = sum(iif(Q1701 == 1 && Q1711_1712 >= 60, 1, 0)),",
				"          female_total = sum(iif(Q1701 == 2, 1, 0)),",
				"          female_ageUnder29 = sum(iif(Q1701 == 2 && Q1711_1712 < 30, 1, 0)),",
				"          female_age30To39 = sum(iif(Q1701 == 2 && Q1711_1712 >= 30 && Q1711_1712 < 40, 1, 0)),",
				"          female_age40To49 = sum(iif(Q1701 == 2 && Q1711_1712 >= 40 && Q1711_1712 < 50, 1, 0)),",
				"          female_age50To59 = sum(iif(Q1701 == 2 && Q1711_1712 >= 50 && Q1711_1712 < 60, 1, 0)),",
				"          female_age60Plus = sum(iif(Q1701 == 2 && Q1711_1712 >= 60, 1, 0))) ~> AggregateAllModels",
				"AggregateAllModels derive(ModelGroup = 'All Models') ~> PrepareAllModelsData",
				"AggregateGenderData, PrepareBaseModelData, PrepareAllModelsData union(byName: true)~> UnionModelData",
				"UnionModelData derive(male_ageUnder29 = round(toDouble(male_ageUnder29) / toDouble(male_total), 2),",
				"          male_age30To39 = round(toDouble(male_age30To39) / toDouble(male_total), 2),",
				"          male_age40To49 = round(toDouble(male_age40To49) / toDouble(male_total), 2),",
				"          male_age50To59 = round(toDouble(male_age50To59) / toDouble(male_total), 2),",
				"          male_age60Plus = round(toDouble(male_age60Plus) / toDouble(male_total), 2),",
				"          female_ageUnder29 = round(toDouble(female_ageUnder29) / toDouble(female_total), 2),",
				"          female_age30To39 = round(toDouble(female_age30To39) / toDouble(female_total), 2),",
				"          female_age40To49 = round(toDouble(female_age40To49) / toDouble(female_total), 2),",
				"          female_age50To59 = round(toDouble(female_age50To59) / toDouble(female_total), 2),",
				"          female_age60Plus = round(toDouble(female_age60Plus) / toDouble(female_total), 2),",
				"          MappedMarket = case(",
				"    Market == 'PGCN', 'CN',",
				"    Market == 'PCGB', 'UK',",
				"    Market == 'PCNA', 'US',",
				"    Market == 'PD', 'DE',",
				"    Market",
				")) ~> CalculatePercentages",
				"CalculatePercentages select(mapColumn(",
				"          market = MappedMarket,",
				"          year = Year,",
				"          model = ModelGroup,",
				"          all_count = all_total,",
				"          all_ageUnder29,",
				"          all_age30To39,",
				"          all_age40To49,",
				"          all_age50To59,",
				"          all_age60Plus,",
				"          male_count = male_total,",
				"          male_ageUnder29,",
				"          male_age30To39,",
				"          male_age40To49,",
				"          male_age50To59,",
				"          male_age60Plus,",
				"          female_count = female_total,",
				"          female_ageUnder29,",
				"          female_age30To39,",
				"          female_age40To49,",
				"          female_age50To59,",
				"          female_age60Plus",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> SelectFinalColumns",
				"SelectFinalColumns aggregate(groupBy(dummy = 1),",
				"     data = collect(@(market = market,",
				"              year = year,",
				"              model = model,",
				"              male_ageUnder29 = male_ageUnder29,",
				"              male_age30To39 = male_age30To39,",
				"              male_age40To49 = male_age40To49,",
				"              male_age50To59 = male_age50To59,",
				"              male_age60Plus = male_age60Plus,",
				"              female_ageUnder29 = female_ageUnder29,",
				"              female_age30To39 = female_age30To39,",
				"              female_age40To49 = female_age40To49,",
				"              female_age50To59 = female_age50To59,",
				"              female_age60Plus = female_age60Plus))) ~> CollectAllData",
				"CollectAllData select(mapColumn(",
				"          data",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlattenOutput",
				"FlattenOutput sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'json',",
				"     fileSystem: 'output',",
				"     partitionFileNames:['newCarBuyersAgeChart.json'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> newBuyersAgeData"
			]
		}
	}
}