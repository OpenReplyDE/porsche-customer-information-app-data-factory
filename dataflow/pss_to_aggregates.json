{
	"name": "pss_to_aggregates",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "pss"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "aggregates"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          dat_quest as integer,",
				"          countryCode as short,",
				"          begin_date_local as string,",
				"          dat_created_local as string,",
				"          device_type as string,",
				"          os_name as string,",
				"          os_version as string,",
				"          browser_name as string,",
				"          user_agent as string,",
				"          cap_activity_id as string,",
				"          userinput_vin as string,",
				"          bpnumber as string,",
				"          pz_area as string,",
				"          pz_region_pss as short,",
				"          userinput_model_and_type as string,",
				"          model_descr as string,",
				"          userinput_lh_modelcode as short,",
				"          userinput_lh_modelcodeDescription as string,",
				"          engine_type as string,",
				"          userinput_model_year as short,",
				"          userinput_dlrno as integer,",
				"          userinput_bp_salesperson as integer,",
				"          userinput_salesp_fn as string,",
				"          userinput_status as short,",
				"          userinput_delivery_date as string,",
				"          used_vehicle_delivery_date as string,",
				"          Q260 as short,",
				"          Q270 as short,",
				"          Q285 as short,",
				"          Q301 as short,",
				"          Q305 as short,",
				"          Q303 as short,",
				"          Q2501 as short,",
				"          Q341 as boolean,",
				"          Q342 as boolean,",
				"          Q343 as boolean,",
				"          Q344 as boolean,",
				"          Q345 as string,",
				"          Q346 as boolean,",
				"          Q347 as boolean,",
				"          Q348 as boolean,",
				"          Q349 as boolean,",
				"          Q2901 as boolean,",
				"          Q2902 as boolean,",
				"          Q2903 as boolean,",
				"          Q2904 as boolean,",
				"          Q2905 as boolean,",
				"          Q2906 as boolean,",
				"          Q2907 as boolean,",
				"          Q2908 as boolean,",
				"          Q2909 as boolean,",
				"          Q2910 as boolean,",
				"          V1043 as string,",
				"          V1044 as string,",
				"          Q2921 as boolean,",
				"          Q2922 as boolean,",
				"          Q2923 as boolean,",
				"          Q2924 as boolean,",
				"          Q2925 as boolean,",
				"          V1045 as string,",
				"          V1046 as string,",
				"          Q2931 as boolean,",
				"          Q2932 as boolean,",
				"          Q2933 as boolean,",
				"          Q2934 as boolean,",
				"          Q2935 as boolean,",
				"          Q2936 as boolean,",
				"          V1047 as string,",
				"          V1048 as string,",
				"          Q2941 as boolean,",
				"          Q2942 as boolean,",
				"          Q2943 as boolean,",
				"          Q2944 as boolean,",
				"          Q2945 as boolean,",
				"          Q2946 as boolean,",
				"          Q2947 as boolean,",
				"          V1049 as string,",
				"          V1050 as string,",
				"          Q2951 as boolean,",
				"          Q2952 as boolean,",
				"          Q2953 as boolean,",
				"          Q2954 as boolean,",
				"          Q2955 as boolean,",
				"          V1051 as string,",
				"          V1052 as string,",
				"          Q2961 as boolean,",
				"          Q2962 as boolean,",
				"          Q2963 as boolean,",
				"          Q2964 as boolean,",
				"          Q2965 as boolean,",
				"          Q2966 as boolean,",
				"          Q2967 as boolean,",
				"          Q2968 as boolean,",
				"          V1053 as string,",
				"          V1054 as string,",
				"          Q2981 as boolean,",
				"          Q2982 as boolean,",
				"          Q2983 as boolean,",
				"          V1055 as string,",
				"          V1056 as string,",
				"          Q2991 as boolean,",
				"          Q2992 as boolean,",
				"          Q2993 as boolean,",
				"          V1057 as string,",
				"          V1058 as string,",
				"          Q350 as boolean,",
				"          Q370 as boolean,",
				"          Q380 as boolean,",
				"          Q400 as boolean,",
				"          Q410 as string,",
				"          Q3140 as boolean,",
				"          Q3160 as boolean,",
				"          Q3180 as boolean,",
				"          Q3190 as boolean,",
				"          Q352 as boolean,",
				"          Q353 as boolean,",
				"          Q356 as string,",
				"          Q359 as string,",
				"          Q360 as boolean,",
				"          Q361 as boolean,",
				"          Q362 as boolean,",
				"          Q3101 as boolean,",
				"          Q3102 as boolean,",
				"          Q3103 as boolean,",
				"          Q3108 as boolean,",
				"          Q3110 as boolean,",
				"          V1059 as string,",
				"          V1009 as string,",
				"          Q371 as string,",
				"          Q372 as boolean,",
				"          Q373 as boolean,",
				"          Q374 as boolean,",
				"          Q375 as string,",
				"          Q3123 as boolean,",
				"          Q3125 as boolean,",
				"          V1060 as string,",
				"          V1010 as string,",
				"          Q384 as boolean,",
				"          Q385 as boolean,",
				"          Q386 as string,",
				"          Q387 as boolean,",
				"          Q3133 as boolean,",
				"          Q3134 as boolean,",
				"          Q3136 as string,",
				"          V1061 as string,",
				"          V1011 as string,",
				"          Q3141 as boolean,",
				"          Q3142 as boolean,",
				"          Q3143 as boolean,",
				"          Q3144 as boolean,",
				"          Q3145 as boolean,",
				"          Q3146 as boolean,",
				"          Q3147 as string,",
				"          V1062 as string,",
				"          V1063 as string,",
				"          Q401 as string,",
				"          Q402 as boolean,",
				"          Q3152 as boolean,",
				"          Q3153 as boolean,",
				"          Q3154 as boolean,",
				"          Q3155 as boolean,",
				"          V1064 as string,",
				"          V1012 as string,",
				"          Q3161 as boolean,",
				"          Q3162 as boolean,",
				"          Q3163 as boolean,",
				"          Q3164 as boolean,",
				"          Q3165 as boolean,",
				"          Q3166 as boolean,",
				"          Q3167 as boolean,",
				"          Q3168 as boolean,",
				"          Q3169 as boolean,",
				"          Q3170 as boolean,",
				"          V1065 as string,",
				"          V1066 as string,",
				"          Q3181 as boolean,",
				"          Q3182 as boolean,",
				"          Q3183 as boolean,",
				"          Q3184 as boolean,",
				"          Q3185 as boolean,",
				"          Q3186 as boolean,",
				"          V1067 as string,",
				"          V1068 as string,",
				"          Q3191 as boolean,",
				"          Q3192 as boolean,",
				"          Q3193 as string,",
				"          Q3194 as string,",
				"          Q3195 as boolean,",
				"          Q3196 as boolean,",
				"          V1069 as string,",
				"          V1070 as string,",
				"          Q2599 as string,",
				"          Q2600 as string,",
				"          V1078 as string,",
				"          Q2595 as short,",
				"          Q2596 as short,",
				"          Q631 as string,",
				"          Q632 as string,",
				"          Q633 as string,",
				"          Q2539 as string,",
				"          V1136 as string,",
				"          Q745 as short,",
				"          Q765 as string,",
				"          Q805 as string,",
				"          Q2531 as short,",
				"          Q2532 as integer,",
				"          Q2521 as short,",
				"          Q2543 as string,",
				"          Q2547 as string,",
				"          Q2557 as string,",
				"          Q2551 as string,",
				"          Q2549 as string,",
				"          Q2553 as string,",
				"          Q2523 as short,",
				"          Q2555 as string,",
				"          Q2545 as short,",
				"          Q2525 as short,",
				"          Q2575 as string,",
				"          Q2561 as string,",
				"          Q2563 as string,",
				"          Q2559 as string,",
				"          Q2565 as short,",
				"          Q2567 as string,",
				"          Q2527 as short,",
				"          Q2569 as string,",
				"          Q2571 as string,",
				"          Q2573 as string,",
				"          Q2597 as short,",
				"          V1025 as string,",
				"          Q2592 as string,",
				"          Q2598 as short,",
				"          Q2594 as string,",
				"          Q2590 as short,",
				"          V1072 as string,",
				"          Q803 as short,",
				"          Q806 as short,",
				"          Q3701 as string,",
				"          Q3702 as string,",
				"          V1129 as string,",
				"          V1130 as string,",
				"          Q3703 as string,",
				"          V1131 as string,",
				"          V1132 as string,",
				"          Q804 as string,",
				"          Q2652 as string,",
				"          Q2653 as string,",
				"          V1021 as string,",
				"          Q2682 as string,",
				"          V1022 as string,",
				"          V1023 as string,",
				"          Q670 as short,",
				"          Q671 as integer,",
				"          Q671Description as string,",
				"          Q676 as short,",
				"          Q676Description as string,",
				"          Q681 as integer,",
				"          Q681Description as string,",
				"          Q686 as short,",
				"          Q686Description as string,",
				"          Q691 as integer,",
				"          Q691Description as string,",
				"          Q696 as short,",
				"          Q696Description as string,",
				"          Q678 as string,",
				"          Q688 as string,",
				"          Q698 as string,",
				"          V1024 as string,",
				"          Q711 as short,",
				"          Q713 as integer,",
				"          Q713Description as string,",
				"          Q719270 as short,",
				"          Q719Description as string,",
				"          Q719272 as short,",
				"          Q722 as short,",
				"          Q723 as short,",
				"          Q725 as short,",
				"          Q1950 as boolean,",
				"          Q1951 as short,",
				"          Q1961 as integer,",
				"          Q1961Description as string,",
				"          Q1966 as short,",
				"          Q1966Description as string,",
				"          Q1971 as integer,",
				"          Q1971Description as string,",
				"          Q1976 as short,",
				"          Q1976Description as string,",
				"          Q1981 as integer,",
				"          Q1981Description as string,",
				"          Q1986 as short,",
				"          Q1986Description as string,",
				"          Q2001 as short,",
				"          Q2011 as short,",
				"          Q2021 as short,",
				"          Q1701 as integer,",
				"          Q1711 as short,",
				"          Q1721 as short,",
				"          Q1731 as short,",
				"          Q1734 as short,",
				"          Q1733 as short,",
				"          Q2696 as short,",
				"          Q2601 as short,",
				"          V1032 as string,",
				"          Q1903 as short,",
				"          Q2611 as string,",
				"          Q831 as string,",
				"          Q832 as string,",
				"          Q833 as string,",
				"          Q841 as string,",
				"          Q883 as string,",
				"          V1028 as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'test-data',",
				"     fileName: '240701_Germany_PSS_RawData_00.csv',",
				"     columnDelimiter: ';',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> pss",
				"pss aggregate(groupBy(model_descr),",
				"     totalCount = count(Q1701),",
				"          maleCount = countIf(Q1701 == 1),",
				"          femaleCount = countIf(Q1701 == 2)) ~> aggregates",
				"aggregates derive(malePercentage = round(toDouble(maleCount) / toDouble(totalCount), 2),",
				"          femalePercentage = round(toDouble(femaleCount) / toDouble(totalCount), 2)) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'json',",
				"     fileSystem: 'output',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          model_descr,",
				"          male = malePercentage,",
				"          female = femalePercentage",
				"     )) ~> sink1"
			]
		}
	}
}